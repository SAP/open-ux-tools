name: CI/CD Pipeline

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
jobs:
    build:
        strategy:
            matrix:
                os: [ubuntu-latest]
                node-version: [20.x]
        runs-on: ${{ matrix.os }}
        timeout-minutes: 30
        steps:
            - name: Checkout code repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  run_install: true
            - name: Cache pnpm modules
              uses: actions/cache@v4
              env:
                  cache-name: cache-pnpm-modules
              with:
                  path: ~/.pnpm-store
                  key: ${{ matrix.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ matrix.os }}-build-${{ env.cache-name }}-${{ matrix.node-version }}-
            - name: Use Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Install pnpm modules
              run: pnpm install
            - name: Run build
              run: pnpm run build
              env:
                NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
            - name: Run unit tests
              run: pnpm run test
              env:
                NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
            - name: Check for changeset files
              id: check_changeset_files
              uses: andstor/file-existence-action@v3
              with:
                files: '.changeset/[!README]*.md'
                fail: false
            - name: Validate changeset files if found
              if: steps.check_changeset_files.outputs.files_exists == 'true'
              run: pnpm changeset status
    playwright-tests:
        # if: github.repository == 'SAP/open-ux-tools' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        needs: [build]
        strategy:
            fail-fast: false
            matrix:
                ui5-version: ['1.135.0', '1.134.1', '1.133.1', '1.130.10', '1.120.29', '1.108.42', '1.96.40', '1.84.53', '1.71.75']
        runs-on: ubuntu-latest
        timeout-minutes: 30
        steps:
            - name: Checkout code repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  run_install: true
            - name: Cache pnpm modules
              uses: actions/cache@v4
              env:
                  cache-name: cache-pnpm-modules
              with:
                  path: ~/.pnpm-store
                  key: ubuntu-latest-build-${{ env.cache-name }}-20.x-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ubuntu-latest-build-build-${{ env.cache-name }}-20.x-
            - name: Use Node.js 20.x
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
            - name: Install pnpm modules
              run: pnpm install
            - name: Run build
              run: pnpm run build
              env:
                NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
            - name: Cache playwright browsers
              id: cache-playwright-browsers
              uses: actions/cache@v4
              with:
                path: |
                    ~/.cache/ms-playwright
                key: playwright-browsers-os-ubuntu-latest-build-node-version-20.x
            - name: Install playwright chrome browsers
              if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
              run: npx playwright install chrome
            # TODO: cache results using nx
            - name: Run playwright tests
              run: cd tests/integration/adaptation-editor && pnpm exec playwright test --project=${{ matrix.ui5-version }} --reporter=blob
              env:
                NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
            - name: Upload blob report to GitHub Actions Artifacts
              if: ${{ !cancelled() }}
              uses: actions/upload-artifact@v4
              with:
                
                name: blob-report-${{ matrix.ui5-version }}
                path: tests/integration/adaptation-editor/blob-report
                retention-days: 1
    merge-reports:
    # Merge reports after playwright-tests, even if some shards have failed
    # TODO: do not check out and install modules for whole repo, we just need to merge reports perhaps that can be done with a dedicated action
      if: ${{ !cancelled() }}
      needs: [playwright-tests]

      runs-on: ubuntu-latest
      steps:
        - name: Checkout code repository
          uses: actions/checkout@v4
          with:
              fetch-depth: 0
        - name: Setup pnpm
          uses: pnpm/action-setup@v4
          with:
              run_install: true
        - name: Cache pnpm modules
          uses: actions/cache@v4
          env:
              cache-name: cache-pnpm-modules
          with:
              path: ~/.pnpm-store
              key: ubuntu-latest-build-${{ env.cache-name }}-20.x-${{ hashFiles('**/pnpm-lock.yaml') }}
              restore-keys: |
                  ubuntu-latest-build-build-${{ env.cache-name }}-20.x-
        - name: Use Node.js 20.x
          uses: actions/setup-node@v4
          with:
              node-version: 20.x
        - name: Install pnpm modules
          run: pnpm install
        - name: Download blob reports from GitHub Actions Artifacts
          uses: actions/download-artifact@v4
          with:
            path: packages/preview-middleware/all-blob-reports
            pattern: blob-report-*
            merge-multiple: true
    
        - name: Merge into HTML Report
          run: cd packages/preview-middleware && npx playwright merge-reports --reporter html ./all-blob-reports
    
        - name: Upload HTML report
          uses: actions/upload-artifact@v4
          with:
            name: playwright-report-${{ github.run_attempt }}
            path: packages/preview-middleware/playwright-report
            retention-days: 15
    version:
        # Run version job only on pushes to the main branch. The job depends on completion of the build job.
        if: github.repository == 'SAP/open-ux-tools' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        runs-on: ubuntu-latest
        needs: build
        outputs:
            changes: ${{ steps.changesetVersion.outputs.changes }} # map step output to job output
        steps:
            - name: Checkout code repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.ACCESS_PAT }}
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  run_install: true
            - name: Cache pnpm modules
              uses: actions/cache@v4
              env:
                  cache-name: cache-pnpm-modules
              with:
                  path: ~/.pnpm-store
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.cache-name }}-
            - name: Use Node.js 20.x
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
            - name: Install pnpm modules
              run: pnpm install
            - name: Apply changesets
              id: changesetVersion
              run: |
                  echo ::set-output name=changes::$(pnpm ci:version 2>&1 | grep -q 'No unreleased changesets found' && echo 'false' || echo 'true')
                  git status
            - name: Commit and push changes
              if: steps.changesetVersion.outputs.changes == 'true'
              run: |
                  git config user.name github-actions
                  git config user.email github-actions@github.com
                  git status
                  git add -A
                  git status
                  git commit -m "chore: apply latest changesets" --no-verify || echo "No changesets found"
                  git log --pretty=oneline | head -n 10
                  git push

    release:
        # Run release job only on pushes to the main branch. The job depends on completion of the build job.
        # This job needs to run after the version job commit has been merged - so check if that step returns 'false'
        if: github.repository == 'SAP/open-ux-tools' && github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.version.outputs.changes == 'false'
        runs-on: ubuntu-latest
        needs: version
        steps:
            - name: Checkout code repository
              uses: actions/checkout@v4
            - name: Setup pnpm
              uses: pnpm/action-setup@v4
              with:
                  run_install: true
            - name: Cache pnpm modules
              uses: actions/cache@v4
              env:
                  cache-name: cache-pnpm-modules
              with:
                  path: ~/.pnpm-store
                  key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-build-${{ env.cache-name }}-
            - name: Use Node.js 20.x
              uses: actions/setup-node@v4
              with:
                  node-version: 20.x
            - name: Install pnpm modules
              run: pnpm install
            - name: Run build
              run: pnpm run build
            - name: Setup npmrc with npmjs.com token
              run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPMJS_TOKEN }}" > .npmrc
            - name: 'Publish to npmjs'
              id: changesetPublish
              uses: changesets/action@v1.4.10
              with:
                  publish: pnpm ci:publish
              env:
                  GITHUB_TOKEN: ${{ secrets.ACCESS_PAT }}
            - name: Prepare Slack notification message
              if: steps.changesetPublish.outputs.published == 'true'
              run: |
                # Random delimiter required to support multi-line environment variable value
                EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
                echo "PUBLISHED_PACKAGES_MESSAGE<<$EOF" >> $GITHUB_ENV
                # publishedPackages JSON format: '[{"name": "@sap-ux/axios-extension", "version": "1.0.2"}, {"name": "@sap-ux/fiori-freestyle-writer", "version": "0.15.12"}]'
                echo "$(echo '${{ steps.changesetPublish.outputs.publishedPackages }}' | jq --raw-output 'map("*" + .name + "*" + " - " + "<https://www.npmjs.com/package/" + .name + "|" + .version + ">") | join("\\n")')" >> $GITHUB_ENV
                echo "$EOF" >> $GITHUB_ENV
            - name: Send Slack notification
              if: steps.changesetPublish.outputs.published == 'true'
              uses: slackapi/slack-github-action@v1.26.0
              with:
                payload: |
                  {"text": ":rocket: The following packages were published to npmjs.com:\n${{ env.PUBLISHED_PACKAGES_MESSAGE }}" }
              env:
                SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
