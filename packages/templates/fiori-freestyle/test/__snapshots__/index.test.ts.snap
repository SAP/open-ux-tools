// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Fiori freestyle templates generates files for template: basic 1`] = `
Object {
  "basic/.gitignore": Object {
    "contents": "node_modules/
dist/
.scp/
.env
Makefile*.mta
mta_archives
mta-*
resources
archive.zip",
    "state": "modified",
  },
  "basic/package.json": Object {
    "contents": "{
  \\"name\\": \\"test.me\\",
  \\"version\\": \\"0.0.1\\",
  \\"private\\": true,
  \\"description\\": \\"\\",
  \\"keywords\\": [
    \\"ui5\\",
    \\"openui5\\",
    \\"sapui5\\"
  ],
  \\"main\\": \\"dist/index.html\\",
  \\"dependencies\\": {},
  \\"devDependencies\\": {
    \\"@ui5/cli\\": \\"^2.12.0\\",
    \\"@sap/ux-ui5-tooling\\": \\"1\\",
    \\"@sap/ux-specification\\": \\"latest\\",
    \\"@sapui5/ts-types\\": \\"1.84.0\\",
    \\"@sapui5/ts-types-esm\\": \\"1.84.0\\"
  },
  \\"scripts\\": {
    \\"start\\": \\"fiori run --open 'index.html'\\",
    \\"build\\": \\"ui5 build --config=ui5.yaml --clean-dest --dest dist\\",
    \\"deploy-config\\": \\"fiori add deploy-config\\"
  },
  \\"ui5\\": {
    \\"dependencies\\": [
      \\"@sap/ux-ui5-tooling\\"
    ]
  },
  \\"files\\": [
    \\"dist\\"
  ]
}
",
    "state": "modified",
  },
  "basic/ui5.yaml": Object {
    "contents": "specVersion: \\"2.5\\"
metadata:
  name: test.me
type: application
resources:
  configuration:
    propertiesFileSourceEncoding: UTF-8
framework:
  name: SAPUI5
  version: 1.84.0
  libraries:
    - name: sap.ui.core
    - name: sap.m
    - name: sap.ui.layout
    - name: themelib_sap_fiori_3
    - name: sap.ushell
server:
  customMiddleware:
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
",
    "state": "modified",
  },
  "basic/webapp/Component.js": Object {
    "contents": "sap.ui.define([
		\\"sap/ui/core/UIComponent\\",
		\\"sap/ui/Device\\",
		\\"test/me/model/models\\"
	],
    function (UIComponent, Device, models) {
        \\"use strict\\";

        return UIComponent.extend(\\"test.me.Component\\", {
            metadata: {
                manifest: \\"json\\"
            },

            /**
             * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.
             * @public
             * @override
             */
            init: function () {
                // call the base component's init function
                UIComponent.prototype.init.apply(this, arguments);

                // enable routing
                this.getRouter().initialize();

				// set the device model
				this.setModel(models.createDeviceModel(), \\"device\\");
            }
        });
    }
);",
    "state": "modified",
  },
  "basic/webapp/controller/View1.controller.js": Object {
    "contents": "sap.ui.define([
	\\"sap/ui/core/mvc/Controller\\"
],
	/**
	 * @param {typeof sap.ui.core.mvc.Controller} Controller
	 */
	function (Controller) {
		\\"use strict\\";

		return Controller.extend(\\"test.me.controller.View1\\", {
			onInit: function () {

			}
		});
	});
",
    "state": "modified",
  },
  "basic/webapp/css/style.css": Object {
    "contents": "/* Enter your custom styles here */",
    "state": "modified",
  },
  "basic/webapp/i18n/i18n.properties": Object {
    "contents": "#XTIT: Application name
appTitle=My Test App

#YDES: Application description
appDescription=Description of test.me
#XTIT: Main view title
title=My Test App",
    "state": "modified",
  },
  "basic/webapp/i18n/i18n_en.properties": Object {
    "contents": "appTitle=My Test App
appDescription=Description of test.me
#XTIT: Main view title
title=My Test App",
    "state": "modified",
  },
  "basic/webapp/index.html": Object {
    "contents": "<!DOCTYPE html>
<html>
<head>
    <meta charset=\\"UTF-8\\">
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\">
    <title>My Test App</title>
    <style>
        html, body, body > div, #container, #container-uiarea {
            height: 100%;
        }
    </style>
    <script
        id=\\"sap-ui-bootstrap\\"
        src=\\"resources/sap-ui-core.js\\"
        data-sap-ui-theme=\\"sap_fiori_3\\"
        data-sap-ui-resourceroots='{
            \\"test.me\\": \\"./\\"
        }'
        data-sap-ui-oninit=\\"module:sap/ui/core/ComponentSupport\\"
        data-sap-ui-compatVersion=\\"edge\\"
        data-sap-ui-async=\\"true\\"
        data-sap-ui-frameOptions=\\"trusted\\"
    ></script>
</head>
<body class=\\"sapUiBody sapUiSizeCompact\\" id=\\"content\\">
    <div
        data-sap-ui-component
        data-name=\\"test.me\\"
        data-id=\\"container\\"
        data-settings='{\\"id\\" : \\"test.me\\"}'
        data-handle-validation=\\"true\\"
    ></div>
</body>
</html>",
    "state": "modified",
  },
  "basic/webapp/manifest.json": Object {
    "contents": "{
  \\"_version\\": \\"1.12.0\\",
  \\"sap.app\\": {
    \\"id\\": \\"test.me\\",
    \\"type\\": \\"application\\",
    \\"i18n\\": \\"i18n/i18n.properties\\",
    \\"applicationVersion\\": {
      \\"version\\": \\"0.9.0\\"
    },
    \\"title\\": \\"{{appTitle}}\\",
    \\"description\\": \\"{{appDescription}}\\"
  },
  \\"sap.ui\\": {
    \\"technology\\": \\"UI5\\",
    \\"icons\\": {
      \\"icon\\": \\"\\",
      \\"favIcon\\": \\"\\",
      \\"phone\\": \\"\\",
      \\"phone@2\\": \\"\\",
      \\"tablet\\": \\"\\",
      \\"tablet@2\\": \\"\\"
    },
    \\"deviceTypes\\": {
      \\"desktop\\": true,
      \\"tablet\\": true,
      \\"phone\\": true
    }
  },
  \\"sap.ui5\\": {
    \\"flexEnabled\\": true,
    \\"dependencies\\": {
      \\"minUI5Version\\": \\"1.60\\",
      \\"libs\\": {
        \\"sap.ui.core\\": {}
      }
    },
    \\"contentDensities\\": {
      \\"compact\\": true,
      \\"cozy\\": true
    },
    \\"models\\": {
      \\"i18n\\": {
        \\"type\\": \\"sap.ui.model.resource.ResourceModel\\",
        \\"settings\\": {
          \\"bundleName\\": \\"test.me.i18n.i18n\\"
        }
      }
    },
    \\"resources\\": {
      \\"css\\": [
        {
          \\"uri\\": \\"css/style.css\\"
        }
      ]
    },
    \\"routing\\": {
      \\"config\\": {
        \\"routerClass\\": \\"sap.m.routing.Router\\",
        \\"viewType\\": \\"XML\\",
        \\"async\\": true,
        \\"viewPath\\": \\"test.me.view\\",
        \\"controlAggregation\\": \\"pages\\",
        \\"controlId\\": \\"app\\",
        \\"clearControlAggregation\\": false
      },
      \\"routes\\": [
        {
          \\"name\\": \\"RouteView1\\",
          \\"pattern\\": \\"RouteView1\\",
          \\"target\\": [
            \\"TargetView1\\"
          ]
        }
      ],
      \\"targets\\": {
        \\"TargetView1\\": {
          \\"viewType\\": \\"XML\\",
          \\"transition\\": \\"slide\\",
          \\"clearControlAggregation\\": false,
          \\"viewId\\": \\"View1\\",
          \\"viewName\\": \\"View1\\"
        }
      }
    },
    \\"rootView\\": {
      \\"viewName\\": \\"test.me.view.View1\\",
      \\"type\\": \\"XML\\",
      \\"async\\": true,
      \\"id\\": \\"View1\\"
    }
  }
}
",
    "state": "modified",
  },
  "basic/webapp/model/models.js": Object {
    "contents": "sap.ui.define([
	\\"sap/ui/model/json/JSONModel\\",
	\\"sap/ui/Device\\"
], function (JSONModel, Device) {
	\\"use strict\\";

	return {

		createDeviceModel: function () {
			var oModel = new JSONModel(Device);
			oModel.setDefaultBindingMode(\\"OneWay\\");
			return oModel;
		}

	};
});",
    "state": "modified",
  },
  "basic/webapp/view/View1.view.xml": Object {
    "contents": "<mvc:View
    controllerName=\\"test.me.controller.View1\\"
    xmlns:mvc=\\"sap.ui.core.mvc\\"
    displayBlock=\\"true\\"
    xmlns=\\"sap.m\\"
>
	<Shell id=\\"shell\\">
		<App id=\\"app\\">
			<pages>
				<Page id=\\"page\\" title=\\"{i18n>title}\\">
					<content />
				</Page>
			</pages>
		</App>
	</Shell>
</mvc:View>
",
    "state": "modified",
  },
}
`;

exports[`Fiori freestyle templates generates files for template: worklist 1`] = `
Object {
  "worklist/.gitignore": Object {
    "contents": "node_modules/
dist/
.scp/
.env
Makefile*.mta
mta_archives
mta-*
resources
archive.zip",
    "state": "modified",
  },
  "worklist/package.json": Object {
    "contents": "{
  \\"name\\": \\"test.me\\",
  \\"version\\": \\"0.0.1\\",
  \\"private\\": true,
  \\"description\\": \\"\\",
  \\"keywords\\": [
    \\"ui5\\",
    \\"openui5\\",
    \\"sapui5\\"
  ],
  \\"main\\": \\"dist/index.html\\",
  \\"dependencies\\": {},
  \\"devDependencies\\": {
    \\"@ui5/cli\\": \\"^2.12.0\\",
    \\"@sap/ux-ui5-tooling\\": \\"1\\",
    \\"@sap/ux-specification\\": \\"latest\\",
    \\"@sapui5/ts-types\\": \\"1.84.0\\",
    \\"@sapui5/ts-types-esm\\": \\"1.84.0\\",
    \\"@sap/ux-ui5-fe-mockserver-middleware\\": \\"latest\\"
  },
  \\"scripts\\": {
    \\"start\\": \\"fiori run --open 'index.html'\\",
    \\"build\\": \\"ui5 build --config=ui5.yaml --clean-dest --dest dist\\",
    \\"deploy-config\\": \\"fiori add deploy-config\\",
    \\"start-local\\": \\"fiori run --config ui5-local.yaml --open 'index.html'\\"
  },
  \\"ui5\\": {
    \\"dependencies\\": [
      \\"@sap/ux-ui5-tooling\\",
      \\"@sap/ux-ui5-fe-mockserver-middleware\\"
    ]
  },
  \\"files\\": [
    \\"dist\\"
  ]
}
",
    "state": "modified",
  },
  "worklist/ui5-local.yaml": Object {
    "contents": "specVersion: \\"2.5\\"
metadata:
  name: test.me
type: application
resources:
  configuration:
    propertiesFileSourceEncoding: UTF-8
framework:
  name: SAPUI5
  version: 1.84.0
  libraries:
    - name: sap.ui.core
    - name: sap.m
    - name: sap.ui.layout
    - name: themelib_sap_fiori_3
    - name: sap.ushell
server:
  customMiddleware:
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
    - name: sap-fe-mockserver
      mountPath: /
      afterMiddleware: compression
      configuration:
        annotations:
          urlPath: /sap/opu/odata/IWFND/CATALOGSERVICE;v=2/Annotations*
        service:
          urlBasePath: /V2/Northwind/Northwind.svc
          name: ''
          metadataXmlPath: ./webapp/localService/metadata.xml
          mockdataRootPath: ./webapp/localService/data
          generateMockData: true
",
    "state": "modified",
  },
  "worklist/ui5.yaml": Object {
    "contents": "specVersion: \\"2.5\\"
metadata:
  name: test.me
type: application
resources:
  configuration:
    propertiesFileSourceEncoding: UTF-8
framework:
  name: SAPUI5
  version: 1.84.0
  libraries:
    - name: sap.ui.core
    - name: sap.m
    - name: sap.ui.layout
    - name: themelib_sap_fiori_3
    - name: sap.ushell
server:
  customMiddleware:
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
    - name: fiori-tools-proxy
      afterMiddleware: compression
      configuration:
        ignoreCertError: false # If set to true, certificate errors will be ignored. E.g. self-signed certificates will be accepted
        backend:
          - path: /V2
            url: https://services.odata.org
        ui5:
          path:
            - /resources
            - /test-resources
          url: https://ui5.sap.com
          version: null # The UI5 version, for instance, 1.78.1. null means latest version
",
    "state": "modified",
  },
  "worklist/webapp/Component.js": Object {
    "contents": "sap.ui.define([
	\\"sap/ui/core/UIComponent\\",
	\\"sap/ui/Device\\",
	\\"./model/models\\",
	\\"./controller/ErrorHandler\\"
], function (UIComponent, Device, models, ErrorHandler) {
	\\"use strict\\";

	return UIComponent.extend(\\"test.me.Component\\", {

		metadata : {
			manifest: \\"json\\"
		},

		/**
		 * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.
		 * In this function, the {{#if 1worklist.parameters.FLP.value.value}}FLP and {{/if}}device models are set and the router is initialized.
		 * @public
		 * @override
		 */
		init : function () {
			// call the base component's init function
			UIComponent.prototype.init.apply(this, arguments);

			// initialize the error handler with the component
			this._oErrorHandler = new ErrorHandler(this);

			// set the device model
			this.setModel(models.createDeviceModel(), \\"device\\");

			// create the views based on the url/hash
			this.getRouter().initialize();
		},

		/**
		 * The component is destroyed by UI5 automatically.
		 * In this method, the ErrorHandler is destroyed.
		 * @public
		 * @override
		 */
		destroy : function () {
			this._oErrorHandler.destroy();
			// call the base component's destroy function
			UIComponent.prototype.destroy.apply(this, arguments);
		},

		/**
		 * This method can be called to determine whether the sapUiSizeCompact or sapUiSizeCozy
		 * design mode class should be set, which influences the size appearance of some controls.
		 * @public
		 * @return {string} css class, either 'sapUiSizeCompact' or 'sapUiSizeCozy' - or an empty string if no css class should be set
		 */
		getContentDensityClass : function() {
			if (this._sContentDensityClass === undefined) {
				// check whether FLP has already set the content density class; do nothing in this case
				// eslint-disable-next-line sap-no-proprietary-browser-api
				if (document.body.classList.contains(\\"sapUiSizeCozy\\") || document.body.classList.contains(\\"sapUiSizeCompact\\")) {
					this._sContentDensityClass = \\"\\";
				} else if (!Device.support.touch) { // apply \\"compact\\" mode if touch is not supported
					this._sContentDensityClass = \\"sapUiSizeCompact\\";
				} else {
					// \\"cozy\\" in case of touch support; default for most sap.m controls, but needed for desktop-first controls like sap.ui.table.Table
					this._sContentDensityClass = \\"sapUiSizeCozy\\";
				}
			}
			return this._sContentDensityClass;
		}

	});

});",
    "state": "modified",
  },
  "worklist/webapp/controller/App.controller.js": Object {
    "contents": "sap.ui.define([
	\\"./BaseController\\",
	\\"sap/ui/model/json/JSONModel\\"
], function (BaseController, JSONModel) {
	\\"use strict\\";

	return BaseController.extend(\\"test.me.controller.App\\", {

		onInit : function () {
			var oViewModel,
				fnSetAppNotBusy,
				iOriginalBusyDelay = this.getView().getBusyIndicatorDelay();

			oViewModel = new JSONModel({
				busy : true,
				delay : 0
			});
			this.setModel(oViewModel, \\"appView\\");

			fnSetAppNotBusy = function() {
				oViewModel.setProperty(\\"/busy\\", false);
				oViewModel.setProperty(\\"/delay\\", iOriginalBusyDelay);
			};

			// disable busy indication when the metadata is loaded and in case of errors
			this.getOwnerComponent().getModel().metadataLoaded().
				then(fnSetAppNotBusy);
			this.getOwnerComponent().getModel().attachMetadataFailed(fnSetAppNotBusy);

			// apply content density mode to root view
			this.getView().addStyleClass(this.getOwnerComponent().getContentDensityClass());
		}
	});

});",
    "state": "modified",
  },
  "worklist/webapp/controller/BaseController.js": Object {
    "contents": "sap.ui.define([
	\\"sap/ui/core/mvc/Controller\\",
	\\"sap/ui/core/UIComponent\\",
	\\"sap/m/library\\"
], function (Controller, UIComponent, mobileLibrary) {
	\\"use strict\\";

	// shortcut for sap.m.URLHelper
	var URLHelper = mobileLibrary.URLHelper;

	return Controller.extend(\\"test.me.controller.BaseController\\", {
		/**
		 * Convenience method for accessing the router.
		 * @public
		 * @returns {sap.ui.core.routing.Router} the router for this component
		 */
		getRouter : function () {
			return UIComponent.getRouterFor(this);
		},

		/**
		 * Convenience method for getting the view model by name.
		 * @public
		 * @param {string} [sName] the model name
		 * @returns {sap.ui.model.Model} the model instance
		 */
		getModel : function (sName) {
			return this.getView().getModel(sName);
		},

		/**
		 * Convenience method for setting the view model.
		 * @public
		 * @param {sap.ui.model.Model} oModel the model instance
		 * @param {string} sName the model name
		 * @returns {sap.ui.mvc.View} the view instance
		 */
		setModel : function (oModel, sName) {
			return this.getView().setModel(oModel, sName);
		},

		/**
		 * Getter for the resource bundle.
		 * @public
		 * @returns {sap.ui.model.resource.ResourceModel} the resourceModel of the component
		 */
		getResourceBundle : function () {
			return this.getOwnerComponent().getModel(\\"i18n\\").getResourceBundle();
		},

		/**
		 * Event handler when the share by E-Mail button has been clicked
		 * @public
		 */
		onShareEmailPress : function () {
			var oViewModel = (this.getModel(\\"objectView\\") || this.getModel(\\"worklistView\\"));
			URLHelper.triggerEmail(
				null,
				oViewModel.getProperty(\\"/shareSendEmailSubject\\"),
				oViewModel.getProperty(\\"/shareSendEmailMessage\\")
			);
		}
	});

});",
    "state": "modified",
  },
  "worklist/webapp/controller/ErrorHandler.js": Object {
    "contents": "sap.ui.define([
	\\"sap/ui/base/Object\\",
	\\"sap/m/MessageBox\\"
], function (UI5Object, MessageBox) {
	\\"use strict\\";

	return UI5Object.extend(\\"test.me.controller.ErrorHandler\\", {

		/**
		 * Handles application errors by automatically attaching to the model events and displaying errors when needed.
		 * @class
		 * @param {sap.ui.core.UIComponent} oComponent reference to the app's component
		 * @public
		 * @alias test.me.controller.ErrorHandler
		 */
		constructor : function (oComponent) {
			this._oResourceBundle = oComponent.getModel(\\"i18n\\").getResourceBundle();
			this._oComponent = oComponent;
			this._oModel = oComponent.getModel();
			this._bMessageOpen = false;
			this._sErrorText = this._oResourceBundle.getText(\\"errorText\\");

			this._oModel.attachMetadataFailed(function (oEvent) {
				var oParams = oEvent.getParameters();
				this._showServiceError(oParams.response);
			}, this);

			this._oModel.attachRequestFailed(function (oEvent) {
				var oParams = oEvent.getParameters();
				// An entity that was not found in the service is also throwing a 404 error in oData.
				// We already cover this case with a notFound target so we skip it here.
				// A request that cannot be sent to the server is a technical error that we have to handle though
				if (oParams.response.statusCode !== \\"404\\" || (oParams.response.statusCode === 404 && oParams.response.responseText.indexOf(\\"Cannot POST\\") === 0)) {
					this._showServiceError(oParams.response);
				}
			}, this);
		},

		/**
		 * Shows a {@link sap.m.MessageBox} when a service call has failed.
		 * Only the first error message will be display.
		 * @param {string} sDetails a technical error to be displayed on request
		 * @private
		 */
		_showServiceError : function (sDetails) {
			if (this._bMessageOpen) {
				return;
			}
			this._bMessageOpen = true;
			MessageBox.error(
				this._sErrorText,
				{
					id : \\"serviceErrorMessageBox\\",
					details: sDetails,
					styleClass: this._oComponent.getContentDensityClass(),
					actions: [MessageBox.Action.CLOSE],
					onClose: function () {
						this._bMessageOpen = false;
					}.bind(this)
				}
			);
		}
	});
});",
    "state": "modified",
  },
  "worklist/webapp/controller/NotFound.controller.js": Object {
    "contents": "sap.ui.define([
	\\"./BaseController\\"
], function (BaseController) {
	\\"use strict\\";

	return BaseController.extend(\\"test.me.controller.NotFound\\", {

		/**
		 * Navigates to the worklist when the link is pressed
		 * @public
		 */
		onLinkPressed : function () {
			this.getRouter().navTo(\\"worklist\\");
		}

	});

});",
    "state": "modified",
  },
  "worklist/webapp/controller/Object.controller.js": Object {
    "contents": "sap.ui.define([
	\\"./BaseController\\",
	\\"sap/ui/model/json/JSONModel\\",
	\\"../model/formatter\\"
], function (BaseController, JSONModel, formatter) {
	\\"use strict\\";

	return BaseController.extend(\\"test.me.controller.Object\\", {

		formatter: formatter,

		/* =========================================================== */
		/* lifecycle methods                                           */
		/* =========================================================== */

		/**
		 * Called when the worklist controller is instantiated.
		 * @public
		 */
		onInit : function () {
			// Model used to manipulate control states. The chosen values make sure,
			// detail page is busy indication immediately so there is no break in
			// between the busy indication for loading the view's meta data
			var iOriginalBusyDelay,
				oViewModel = new JSONModel({
					busy : true,
					delay : 0
				});

			this.getRouter().getRoute(\\"object\\").attachPatternMatched(this._onObjectMatched, this);

			// Store original busy indicator delay, so it can be restored later on
			iOriginalBusyDelay = this.getView().getBusyIndicatorDelay();
			this.setModel(oViewModel, \\"objectView\\");
			this.getOwnerComponent().getModel().metadataLoaded().then(function () {
					// Restore original busy indicator delay for the object view
					oViewModel.setProperty(\\"/delay\\", iOriginalBusyDelay);
				}
			);
		},

		/* =========================================================== */
		/* event handlers                                              */
		/* =========================================================== */


		/**
		 * Event handler for navigating back.
		 * @public
		 */
		onNavBack : function() {
			this.getRouter().navTo(\\"worklist\\", {}, true);
		},

		/* =========================================================== */
		/* internal methods                                            */
		/* =========================================================== */

		/**
		 * Binds the view to the object path.
		 * @function
		 * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'
		 * @private
		 */
		_onObjectMatched : function (oEvent) {
			var sObjectId =  oEvent.getParameter(\\"arguments\\").objectId;
			this.getModel().metadataLoaded().then( function() {
				var sObjectPath = this.getModel().createKey(\\"Products\\", {
					ProductID :  sObjectId
				});
				this._bindView(\\"/\\" + sObjectPath);
			}.bind(this));
		},

		/**
		 * Binds the view to the object path.
		 * @function
		 * @param {string} sObjectPath path to the object to be bound
		 * @private
		 */
		_bindView : function (sObjectPath) {
			var oViewModel = this.getModel(\\"objectView\\"),
				oDataModel = this.getModel();

			this.getView().bindElement({
				path: sObjectPath,
				events: {
					change: this._onBindingChange.bind(this),
					dataRequested: function () {
						oDataModel.metadataLoaded().then(function () {
							// Busy indicator on view should only be set if metadata is loaded,
							// otherwise there may be two busy indications next to each other on the
							// screen. This happens because route matched handler already calls '_bindView'
							// while metadata is loaded.
							oViewModel.setProperty(\\"/busy\\", true);
						});
					},
					dataReceived: function () {
						oViewModel.setProperty(\\"/busy\\", false);
					}
				}
			});
		},

		_onBindingChange : function () {
			var oView = this.getView(),
				oViewModel = this.getModel(\\"objectView\\"),
				oElementBinding = oView.getElementBinding();

			// No data for the binding
			if (!oElementBinding.getBoundContext()) {
				this.getRouter().getTargets().display(\\"objectNotFound\\");
				return;
			}

			var oResourceBundle = this.getResourceBundle(),
				oObject = oView.getBindingContext().getObject(),
				sObjectId = oObject.ProductID,
				sObjectName = oObject.ProductName;

			oViewModel.setProperty(\\"/busy\\", false);

			oViewModel.setProperty(\\"/shareSendEmailSubject\\",
			oResourceBundle.getText(\\"shareSendEmailObjectSubject\\", [sObjectId]));
			oViewModel.setProperty(\\"/shareSendEmailMessage\\",
			oResourceBundle.getText(\\"shareSendEmailObjectMessage\\", [sObjectName, sObjectId, location.href]));
		}

	});

});",
    "state": "modified",
  },
  "worklist/webapp/controller/Worklist.controller.js": Object {
    "contents": "sap.ui.define([
	\\"./BaseController\\",
	\\"sap/ui/model/json/JSONModel\\",
	\\"../model/formatter\\",
	\\"sap/ui/model/Filter\\",
	\\"sap/ui/model/FilterOperator\\"
], function (BaseController, JSONModel, formatter, Filter, FilterOperator) {
	\\"use strict\\";

	return BaseController.extend(\\"test.me.controller.Worklist\\", {

		formatter: formatter,

		/* =========================================================== */
		/* lifecycle methods                                           */
		/* =========================================================== */

		/**
		 * Called when the worklist controller is instantiated.
		 * @public
		 */
		onInit : function () {
			var oViewModel,
				iOriginalBusyDelay,
				oTable = this.byId(\\"table\\");

			// Put down worklist table's original value for busy indicator delay,
			// so it can be restored later on. Busy handling on the table is
			// taken care of by the table itself.
			iOriginalBusyDelay = oTable.getBusyIndicatorDelay();
			// keeps the search state
			this._aTableSearchState = [];

			// Model used to manipulate control states
			oViewModel = new JSONModel({
				worklistTableTitle : this.getResourceBundle().getText(\\"worklistTableTitle\\"),
				shareSendEmailSubject: this.getResourceBundle().getText(\\"shareSendEmailWorklistSubject\\"),
				shareSendEmailMessage: this.getResourceBundle().getText(\\"shareSendEmailWorklistMessage\\", [location.href]),
				tableNoDataText : this.getResourceBundle().getText(\\"tableNoDataText\\"),
				tableBusyDelay : 0
			});
			this.setModel(oViewModel, \\"worklistView\\");

			// Make sure, busy indication is showing immediately so there is no
			// break after the busy indication for loading the view's meta data is
			// ended (see promise 'oWhenMetadataIsLoaded' in AppController)
			oTable.attachEventOnce(\\"updateFinished\\", function(){
				// Restore original busy indicator delay for worklist's table
				oViewModel.setProperty(\\"/tableBusyDelay\\", iOriginalBusyDelay);
			});
		},

		/* =========================================================== */
		/* event handlers                                              */
		/* =========================================================== */

		/**
		 * Triggered by the table's 'updateFinished' event: after new table
		 * data is available, this handler method updates the table counter.
		 * This should only happen if the update was successful, which is
		 * why this handler is attached to 'updateFinished' and not to the
		 * table's list binding's 'dataReceived' method.
		 * @param {sap.ui.base.Event} oEvent the update finished event
		 * @public
		 */
		onUpdateFinished : function (oEvent) {
			// update the worklist's object counter after the table update
			var sTitle,
				oTable = oEvent.getSource(),
				iTotalItems = oEvent.getParameter(\\"total\\");
			// only update the counter if the length is final and
			// the table is not empty
			if (iTotalItems && oTable.getBinding(\\"items\\").isLengthFinal()) {
				sTitle = this.getResourceBundle().getText(\\"worklistTableTitleCount\\", [iTotalItems]);
			} else {
				sTitle = this.getResourceBundle().getText(\\"worklistTableTitle\\");
			}
			this.getModel(\\"worklistView\\").setProperty(\\"/worklistTableTitle\\", sTitle);
		},

		/**
		 * Event handler when a table item gets pressed
		 * @param {sap.ui.base.Event} oEvent the table selectionChange event
		 * @public
		 */
		onPress : function (oEvent) {
			// The source is the list item that got pressed
			this._showObject(oEvent.getSource());
		},

		onSearch : function (oEvent) {
			if (oEvent.getParameters().refreshButtonPressed) {
				// Search field's 'refresh' button has been pressed.
				// This is visible if you select any master list item.
				// In this case no new search is triggered, we only
				// refresh the list binding.
				this.onRefresh();
			} else {
				var aTableSearchState = [];
				var sQuery = oEvent.getParameter(\\"query\\");

				if (sQuery && sQuery.length > 0) {
					aTableSearchState = [new Filter(\\"ProductName\\", FilterOperator.Contains, sQuery)];
				}
				this._applySearch(aTableSearchState);
			}

		},

		/**
		 * Event handler for refresh event. Keeps filter, sort
		 * and group settings and refreshes the list binding.
		 * @public
		 */
		onRefresh : function () {
			var oTable = this.byId(\\"table\\");
			oTable.getBinding(\\"items\\").refresh();
		},

		/* =========================================================== */
		/* internal methods                                            */
		/* =========================================================== */

		/**
		 * Shows the selected item on the object page
		 * On phones a additional history entry is created
		 * @param {sap.m.ObjectListItem} oItem selected Item
		 * @private
		 */
		_showObject : function (oItem) {
			this.getRouter().navTo(\\"object\\", {
				objectId: oItem.getBindingContext().getProperty(\\"ProductID\\")
			});
		},

		/**
		 * Internal helper method to apply both filter and search state together on the list binding
		 * @param {sap.ui.model.Filter[]} aTableSearchState An array of filters for the search
		 * @private
		 */
		_applySearch: function(aTableSearchState) {
			var oTable = this.byId(\\"table\\"),
				oViewModel = this.getModel(\\"worklistView\\");
			oTable.getBinding(\\"items\\").filter(aTableSearchState, \\"Application\\");
			// changes the noDataText of the list in case there are no filter results
			if (aTableSearchState.length !== 0) {
				oViewModel.setProperty(\\"/tableNoDataText\\", this.getResourceBundle().getText(\\"worklistNoDataWithSearchText\\"));
			}
		}

	});
});",
    "state": "modified",
  },
  "worklist/webapp/i18n/i18n.properties": Object {
    "contents": "#XTIT: Application name
appTitle=My Test App

#YDES: Application description
appDescription=Description of test.me
#~~~ Worklist View ~~~~~~~~~~~~~~~~~~~~~~~~~~
#XTIT: Worklist view title
worklistViewTitle=Manage Products

#XTIT: Worklist page title
worklistTitle=My Test App

#XTIT: Table view title
worklistTableTitle=Products

#XTOL: Tooltip for the search field
worklistSearchTooltip=Enter an Products name or a part of it.

#XBLI: text for a table with no data with filter or search
worklistNoDataWithSearchText=No matching Products found

#XTIT: Table view title with placeholder for the number of items
worklistTableTitleCount=Products ({0})

#XTIT: The title of the column containing the ProductName of Products
tableNameColumnTitle=ProductName

#XTIT: The title of the column containing the UnitsInStock and the unit of measure
tableUnitNumberColumnTitle=UnitsInStock

#XBLI: text for a table with no data
tableNoDataText=No Products are currently available

#XLNK: text for link in 'not found' pages
backToWorklist=Show My Test App

#~~~ Object View ~~~~~~~~~~~~~~~~~~~~~~~~~~
#XTIT: Object view title
objectViewTitle=Products Details

#XTIT: Object page title
objectTitle=Products

#XTIT: Label for the ProductName
ProductNameLabel=ProductName


#XTIT: Label for the UnitsInStock
UnitsInStockLabel=UnitsInStock


#~~~ Share Menu Options ~~~~~~~~~~~~~~~~~~~~~~~

#XTIT: Send E-Mail subject
shareSendEmailWorklistSubject=<Email subject PLEASE REPLACE ACCORDING TO YOUR USE CASE>

#YMSG: Send E-Mail message
shareSendEmailWorklistMessage=<Email body PLEASE REPLACE ACCORDING TO YOUR USE CASE>\\\\r\\\\n{0}

#XTIT: Send E-Mail subject
shareSendEmailObjectSubject=<Email subject including object identifier PLEASE REPLACE ACCORDING TO YOUR USE CASE> {0}

#YMSG: Send E-Mail message
shareSendEmailObjectMessage=<Email body PLEASE REPLACE ACCORDING TO YOUR USE CASE> {0} (id: {1})\\\\r\\\\n{2}


#~~~ Not Found View ~~~~~~~~~~~~~~~~~~~~~~~

#XTIT: Not found view title
notFoundTitle=Not Found

#YMSG: The Products not found text is displayed when there is no Products with this id
noObjectFoundText=This Products is not available

#YMSG: The Products not available text is displayed when there is no data when starting the app
noObjectsAvailableText=No Products are currently available

#YMSG: The not found text is displayed when there was an error loading the resource (404 error)
notFoundText=The requested resource was not found

#~~~ Error Handling ~~~~~~~~~~~~~~~~~~~~~~~

#YMSG: Error dialog description
errorText=Sorry, a technical error occurred! Please try again later.",
    "state": "modified",
  },
  "worklist/webapp/i18n/i18n_en.properties": Object {
    "contents": "appTitle=My Test App
appDescription=Description of test.me
#~~~ Worklist View ~~~~~~~~~~~~~~~~~~~~~~~~~~
#XTIT: Worklist view title
worklistViewTitle=Manage Products

#XTIT: Worklist page title
worklistTitle=My Test App

#XTIT: Table view title
worklistTableTitle=Products

#XTOL: Tooltip for the search field
worklistSearchTooltip=Enter an Products name or a part of it.

#XBLI: text for a table with no data with filter or search
worklistNoDataWithSearchText=No matching Products found

#XTIT: Table view title with placeholder for the number of items
worklistTableTitleCount=Products ({0})

#XTIT: The title of the column containing the ProductName of Products
tableNameColumnTitle=ProductName

#XTIT: The title of the column containing the UnitsInStock and the unit of measure
tableUnitNumberColumnTitle=UnitsInStock

#XBLI: text for a table with no data
tableNoDataText=No Products are currently available

#XLNK: text for link in 'not found' pages
backToWorklist=Show My Test App

#~~~ Object View ~~~~~~~~~~~~~~~~~~~~~~~~~~
#XTIT: Object view title
objectViewTitle=Products Details

#XTIT: Object page title
objectTitle=Products

#XTIT: Label for the ProductName
ProductNameLabel=ProductName


#XTIT: Label for the UnitsInStock
UnitsInStockLabel=UnitsInStock


#~~~ Share Menu Options ~~~~~~~~~~~~~~~~~~~~~~~

#XTIT: Send E-Mail subject
shareSendEmailWorklistSubject=<Email subject PLEASE REPLACE ACCORDING TO YOUR USE CASE>

#YMSG: Send E-Mail message
shareSendEmailWorklistMessage=<Email body PLEASE REPLACE ACCORDING TO YOUR USE CASE>\\\\r\\\\n{0}

#XTIT: Send E-Mail subject
shareSendEmailObjectSubject=<Email subject including object identifier PLEASE REPLACE ACCORDING TO YOUR USE CASE> {0}

#YMSG: Send E-Mail message
shareSendEmailObjectMessage=<Email body PLEASE REPLACE ACCORDING TO YOUR USE CASE> {0} (id: {1})\\\\r\\\\n{2}


#~~~ Not Found View ~~~~~~~~~~~~~~~~~~~~~~~

#XTIT: Not found view title
notFoundTitle=Not Found

#YMSG: The Products not found text is displayed when there is no Products with this id
noObjectFoundText=This Products is not available

#YMSG: The Products not available text is displayed when there is no data when starting the app
noObjectsAvailableText=No Products are currently available

#YMSG: The not found text is displayed when there was an error loading the resource (404 error)
notFoundText=The requested resource was not found

#~~~ Error Handling ~~~~~~~~~~~~~~~~~~~~~~~

#YMSG: Error dialog description
errorText=Sorry, a technical error occurred! Please try again later.",
    "state": "modified",
  },
  "worklist/webapp/index.html": Object {
    "contents": "<!DOCTYPE html>
<html>
<head>
    <meta charset=\\"UTF-8\\">
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\">
    <title>My Test App</title>
    <style>
        html, body, body > div, #container, #container-uiarea {
            height: 100%;
        }
    </style>
    <script
        id=\\"sap-ui-bootstrap\\"
        src=\\"resources/sap-ui-core.js\\"
        data-sap-ui-theme=\\"sap_fiori_3\\"
        data-sap-ui-resourceroots='{
            \\"test.me\\": \\"./\\"
        }'
        data-sap-ui-oninit=\\"module:sap/ui/core/ComponentSupport\\"
        data-sap-ui-compatVersion=\\"edge\\"
        data-sap-ui-async=\\"true\\"
        data-sap-ui-frameOptions=\\"trusted\\"
    ></script>
</head>
<body class=\\"sapUiBody sapUiSizeCompact\\" id=\\"content\\">
    <div
        data-sap-ui-component
        data-name=\\"test.me\\"
        data-id=\\"container\\"
        data-settings='{\\"id\\" : \\"test.me\\"}'
        data-handle-validation=\\"true\\"
    ></div>
</body>
</html>",
    "state": "modified",
  },
  "worklist/webapp/manifest.json": Object {
    "contents": "{
  \\"_version\\": \\"1.12.0\\",
  \\"sap.app\\": {
    \\"id\\": \\"test.me\\",
    \\"type\\": \\"application\\",
    \\"i18n\\": \\"i18n/i18n.properties\\",
    \\"applicationVersion\\": {
      \\"version\\": \\"0.9.0\\"
    },
    \\"title\\": \\"{{appTitle}}\\",
    \\"description\\": \\"{{appDescription}}\\",
    \\"dataSources\\": {
      \\"mainService\\": {
        \\"uri\\": \\"/V2/Northwind/Northwind.svc/\\",
        \\"type\\": \\"OData\\",
        \\"settings\\": {
          \\"annotations\\": [
            \\"annotation\\"
          ],
          \\"localUri\\": \\"localService/metadata.xml\\"
        }
      }
    }
  },
  \\"sap.ui\\": {
    \\"technology\\": \\"UI5\\",
    \\"icons\\": {
      \\"icon\\": \\"\\",
      \\"favIcon\\": \\"\\",
      \\"phone\\": \\"\\",
      \\"phone@2\\": \\"\\",
      \\"tablet\\": \\"\\",
      \\"tablet@2\\": \\"\\"
    },
    \\"deviceTypes\\": {
      \\"desktop\\": true,
      \\"tablet\\": true,
      \\"phone\\": true
    }
  },
  \\"sap.ui5\\": {
    \\"flexEnabled\\": true,
    \\"dependencies\\": {
      \\"minUI5Version\\": \\"1.60\\",
      \\"libs\\": {
        \\"sap.ui.core\\": {},
        \\"sap.m\\": {},
        \\"sap.f\\": {}
      }
    },
    \\"contentDensities\\": {
      \\"compact\\": true,
      \\"cozy\\": true
    },
    \\"models\\": {
      \\"i18n\\": {
        \\"type\\": \\"sap.ui.model.resource.ResourceModel\\",
        \\"settings\\": {
          \\"bundleName\\": \\"test.me.i18n.i18n\\"
        }
      },
      \\"\\": {
        \\"dataSource\\": \\"mainService\\",
        \\"preload\\": true,
        \\"settings\\": {}
      }
    },
    \\"resources\\": {
      \\"css\\": []
    },
    \\"routing\\": {
      \\"config\\": {
        \\"routerClass\\": \\"sap.m.routing.Router\\",
        \\"viewType\\": \\"XML\\",
        \\"viewPath\\": \\"test.me.view\\",
        \\"controlId\\": \\"app\\",
        \\"controlAggregation\\": \\"pages\\",
        \\"bypassed\\": {
          \\"target\\": [
            \\"notFound\\"
          ]
        },
        \\"async\\": true
      },
      \\"routes\\": [
        {
          \\"pattern\\": \\"\\",
          \\"name\\": \\"worklist\\",
          \\"target\\": [
            \\"worklist\\"
          ]
        },
        {
          \\"pattern\\": \\"Products/{objectId}\\",
          \\"name\\": \\"object\\",
          \\"target\\": [
            \\"object\\"
          ]
        }
      ],
      \\"targets\\": {
        \\"worklist\\": {
          \\"viewName\\": \\"Worklist\\",
          \\"viewId\\": \\"worklist\\",
          \\"viewLevel\\": 1,
          \\"title\\": \\"{i18n>worklistViewTitle}\\"
        },
        \\"object\\": {
          \\"viewName\\": \\"Object\\",
          \\"viewId\\": \\"object\\",
          \\"viewLevel\\": 2,
          \\"title\\": \\"{i18n>objectViewTitle}\\"
        },
        \\"objectNotFound\\": {
          \\"viewName\\": \\"ObjectNotFound\\",
          \\"viewId\\": \\"objectNotFound\\"
        },
        \\"notFound\\": {
          \\"viewName\\": \\"NotFound\\",
          \\"viewId\\": \\"notFound\\"
        }
      }
    },
    \\"rootView\\": {
      \\"viewName\\": \\"test.me.view.App\\",
      \\"type\\": \\"XML\\",
      \\"async\\": true,
      \\"id\\": \\"app\\"
    }
  }
}
",
    "state": "modified",
  },
  "worklist/webapp/model/formatter.js": Object {
    "contents": "sap.ui.define([], function () {
	\\"use strict\\";

	return {

		/**
		 * Rounds the number unit value to 2 digits
		 * @public
		 * @param {string} sValue the number string to be rounded
		 * @returns {string} sValue with 2 digits rounded
		 */
		numberUnit : function (sValue) {
			if (!sValue) {
				return \\"\\";
			}
			return parseFloat(sValue).toFixed(2);
		}

	};

});",
    "state": "modified",
  },
  "worklist/webapp/model/models.js": Object {
    "contents": "sap.ui.define([
	\\"sap/ui/model/json/JSONModel\\",
	\\"sap/ui/Device\\"
], function (JSONModel, Device) {
	\\"use strict\\";

	return {
		createDeviceModel : function () {
			var oModel = new JSONModel(Device);
			oModel.setDefaultBindingMode(\\"OneWay\\");
			return oModel;
		}
	};
});",
    "state": "modified",
  },
  "worklist/webapp/view/App.view.xml": Object {
    "contents": "<mvc:View
	controllerName=\\"test.me.controller.App\\"
	displayBlock=\\"true\\"
	xmlns=\\"sap.m\\"
	xmlns:mvc=\\"sap.ui.core.mvc\\">

	<Shell>
		<App
			id=\\"app\\"
			busy=\\"{appView>/busy}\\"
			busyIndicatorDelay=\\"{appView>/delay}\\"/>
	</Shell>

</mvc:View>",
    "state": "modified",
  },
  "worklist/webapp/view/NotFound.view.xml": Object {
    "contents": "<mvc:View
	controllerName=\\"test.me.controller.NotFound\\"
	xmlns=\\"sap.m\\"
	xmlns:mvc=\\"sap.ui.core.mvc\\">

	<MessagePage
		title=\\"{i18n>notFoundTitle}\\"
		text=\\"{i18n>notFoundText}\\"
		icon=\\"sap-icon://document\\"
		id=\\"page\\"
		description=\\"\\">
		<customDescription>
			<Link id=\\"link\\" text=\\"{i18n>backToWorklist}\\" press=\\".onLinkPressed\\"/>
		</customDescription>
	</MessagePage>

</mvc:View>",
    "state": "modified",
  },
  "worklist/webapp/view/Object.view.xml": Object {
    "contents": "<mvc:View
	controllerName=\\"test.me.controller.Object\\"
	xmlns=\\"sap.m\\"
	xmlns:mvc=\\"sap.ui.core.mvc\\"
	xmlns:semantic=\\"sap.f.semantic\\">

	<semantic:SemanticPage
		id=\\"page\\"
		headerPinnable=\\"false\\"
		toggleHeaderOnTitleClick=\\"false\\"
		busy=\\"{objectView>/busy}\\"
		busyIndicatorDelay=\\"{objectView>/delay}\\">

		<semantic:titleHeading>
			<Title
				text=\\"{ProductName}\\"
				level=\\"H2\\"/>
		</semantic:titleHeading>

		<semantic:headerContent>
			<ObjectNumber
				number=\\"{
					path: 'UnitsInStock',
					formatter: '.formatter.numberUnit'
				}\\"
				unit=\\"{QuantityPerUnit}\\" />
		</semantic:headerContent>

		<semantic:sendEmailAction>
			<semantic:SendEmailAction id=\\"shareEmail\\" press=\\".onShareEmailPress\\"/>
		</semantic:sendEmailAction>

	</semantic:SemanticPage>

</mvc:View>",
    "state": "modified",
  },
  "worklist/webapp/view/ObjectNotFound.view.xml": Object {
    "contents": "<mvc:View
	controllerName=\\"test.me.controller.NotFound\\"
	xmlns=\\"sap.m\\"
	xmlns:mvc=\\"sap.ui.core.mvc\\">

	<MessagePage
		title=\\"{i18n>objectTitle}\\"
		text=\\"{i18n>noObjectFoundText}\\"
		icon=\\"sap-icon://product\\"
		description=\\"\\"
		id=\\"page\\">
		<customDescription>
			<Link id=\\"link\\" text=\\"{i18n>backToWorklist}\\" press=\\".onLinkPressed\\" />
		</customDescription>
	</MessagePage>

</mvc:View>",
    "state": "modified",
  },
  "worklist/webapp/view/Worklist.view.xml": Object {
    "contents": "<mvc:View
	controllerName=\\"test.me.controller.Worklist\\"
	xmlns=\\"sap.m\\"
	xmlns:mvc=\\"sap.ui.core.mvc\\"
	xmlns:semantic=\\"sap.f.semantic\\">

	<semantic:SemanticPage
		id=\\"page\\"
		headerPinnable=\\"false\\"
		toggleHeaderOnTitleClick=\\"false\\">

		<semantic:titleHeading>
			<Title
				text=\\"{i18n>worklistTitle}\\"
				level=\\"H2\\"/>
		</semantic:titleHeading>

		<semantic:content>
			<Table
				id=\\"table\\"
				width=\\"auto\\"
				items=\\"{
					path: '/Products',
					sorter: {
						path: 'ProductName',
						descending: false
					}
				}\\"
				noDataText=\\"{worklistView>/tableNoDataText}\\"
				busyIndicatorDelay=\\"{worklistView>/tableBusyDelay}\\"
				growing=\\"true\\"
				growingScrollToLoad=\\"true\\"
				updateFinished=\\".onUpdateFinished\\">

				<headerToolbar>
					<OverflowToolbar>
						<Title
							id=\\"tableHeader\\"
							text=\\"{worklistView>/worklistTableTitle}\\"
							level=\\"H3\\"/>
						<ToolbarSpacer />
						<SearchField
							id=\\"searchField\\"
							tooltip=\\"{i18n>worklistSearchTooltip}\\"
							search=\\".onSearch\\">
							<layoutData>
								<OverflowToolbarLayoutData
									maxWidth=\\"200px\\"
									priority=\\"NeverOverflow\\"/>
							</layoutData>
						</SearchField>
					</OverflowToolbar>
				</headerToolbar>

				<columns>
					<Column id=\\"nameColumn\\">
						<Text text=\\"{i18n>tableNameColumnTitle}\\" id=\\"nameColumnTitle\\"/>
					</Column>
					<Column id=\\"unitNumberColumn\\" hAlign=\\"End\\">
						<Text text=\\"{i18n>tableUnitNumberColumnTitle}\\" id=\\"unitNumberColumnTitle\\"/>
					</Column>
				</columns>

				<items>
					<ColumnListItem
						type=\\"Navigation\\"
						press=\\".onPress\\">
						<cells>
							<ObjectIdentifier
								title=\\"{ProductName}\\"/>
							<ObjectNumber
								number=\\"{
									path: 'UnitsInStock',
									formatter: '.formatter.numberUnit'
								}\\"
								unit=\\"{QuantityPerUnit}\\" />
						</cells>
					</ColumnListItem>
				</items>
			</Table>
		</semantic:content>

		<semantic:sendEmailAction>
			<semantic:SendEmailAction id=\\"shareEmail\\" press=\\".onShareEmailPress\\"/>
		</semantic:sendEmailAction>

	</semantic:SemanticPage>

</mvc:View>",
    "state": "modified",
  },
}
`;
