// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Fiori freestyle template: basicTemplate Generate files for template: basic_no_datasource 1`] = `
Object {
  ".gitignore": Object {
    "contents": "node_modules/
dist/
.scp/
.env
Makefile*.mta
mta_archives
mta-*
resources
archive.zip
.*_mta_build_tmp",
    "state": "modified",
  },
  "package.json": Object {
    "contents": "{
  \\"name\\": \\"nods1\\",
  \\"version\\": \\"0.0.1\\",
  \\"private\\": true,
  \\"description\\": \\"A Fiori application.\\",
  \\"keywords\\": [
    \\"ui5\\",
    \\"openui5\\",
    \\"sapui5\\"
  ],
  \\"main\\": \\"webapp/index.html\\",
  \\"dependencies\\": {},
  \\"devDependencies\\": {
    \\"@ui5/cli\\": \\"^2.12.0\\",
    \\"@sap/ux-ui5-tooling\\": \\"1\\",
    \\"@sap/ux-ui5-fe-mockserver-middleware\\": \\"latest\\"
  },
  \\"scripts\\": {
    \\"start\\": \\"fiori run --open 'test/flpSandbox.html#nods1-tile'\\",
    \\"build\\": \\"ui5 build --config=ui5.yaml --clean-dest --dest dist\\",
    \\"deploy-config\\": \\"fiori add deploy-config\\",
    \\"start-local\\": \\"fiori run --config ./ui5-local.yaml --open 'test/flpSandbox.html#nods1-tile'\\",
    \\"start-noflp\\": \\"fiori run --open 'index.html'\\"
  },
  \\"ui5\\": {
    \\"dependencies\\": [
      \\"@sap/ux-ui5-tooling\\",
      \\"@sap/ux-ui5-fe-mockserver-middleware\\"
    ]
  }
}
",
    "state": "modified",
  },
  "ui5-local.yaml": Object {
    "contents": "specVersion: \\"2.5\\"
metadata:
  name: nods1
type: application
framework:
  name: SAPUI5
  version: 1.86.3
  libraries:
    - name: sap.m
    - name: sap.ushell
    - name: sap.f
    - name: sap.suite.ui.generic.template
    - name: sap.ui.comp
    - name: sap.ui.core
    - name: sap.ui.generic.app
    - name: sap.ui.table
    - name: themelib_sap_belize
server:
  customMiddleware:
    - name: fiori-tools-proxy
      afterMiddleware: compression
      configuration:
        ignoreCertError: false # If set to true, certificate errors will be ignored. E.g. self-signed certificates will be accepted
        backend:
          - path: /sap
            url: http://localhost
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
",
    "state": "modified",
  },
  "ui5.yaml": Object {
    "contents": "specVersion: \\"2.5\\"
metadata:
  name: nods1
type: application
server:
  customMiddleware:
    - name: fiori-tools-proxy
      afterMiddleware: compression
      configuration:
        ignoreCertError: false # If set to true, certificate errors will be ignored. E.g. self-signed certificates will be accepted
        backend:
          - path: /sap
            url: http://localhost
        ui5:
          path:
            - /resources
            - /test-resources
          url: https://ui5.sap.com
          version: '' # The UI5 version, for instance, 1.78.1. null means latest version
    - name: fiori-tools-appreload
      afterMiddleware: compression
      configuration:
        port: 35729
        path: webapp
",
    "state": "modified",
  },
  "webapp/Component.js": Object {
    "contents": "sap.ui.define([
		\\"sap/ui/core/UIComponent\\",
		\\"sap/ui/Device\\",
		\\"nods1/model/models\\"
	],
    function (UIComponent, Device, models) {
        \\"use strict\\";

        return UIComponent.extend(\\"nods1.Component\\", {
            metadata: {
                manifest: \\"json\\"
            },

            /**
             * The component is initialized by UI5 automatically during the startup of the app and calls the init method once.
             * @public
             * @override
             */
            init: function () {
                // call the base component's init function
                UIComponent.prototype.init.apply(this, arguments);

                // enable routing
                this.getRouter().initialize();

				// set the device model
				this.setModel(models.createDeviceModel(), \\"device\\");
            }
        });
    }
);",
    "state": "modified",
  },
  "webapp/controller/View1.controller.js": Object {
    "contents": "sap.ui.define([
	\\"sap/ui/core/mvc/Controller\\"
],
	/**
	 * @param {typeof sap.ui.core.mvc.Controller} Controller
	 */
	function (Controller) {
		\\"use strict\\";

		return Controller.extend(\\"nods1.controller.View1\\", {
			onInit: function () {

			}
		});
	});
",
    "state": "modified",
  },
  "webapp/css/style.css": Object {
    "contents": "/* Enter your custom styles here */",
    "state": "modified",
  },
  "webapp/i18n/i18n.properties": Object {
    "contents": "# This is the resource bundle for nods1

#Texts for manifest.json

#XTIT: Application name
appTitle=App Title

#YDES: Application description
appDescription=A Fiori application.
#XTIT: Main view title
title=App Title",
    "state": "modified",
  },
  "webapp/index.html": Object {
    "contents": "<!DOCTYPE html>
<html>
<head>
    <meta charset=\\"UTF-8\\">
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
    <meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\">
    <title>App Title</title>
    <style>
        html, body, body > div, #container, #container-uiarea {
            height: 100%;
        }
    </style>
    <script
        id=\\"sap-ui-bootstrap\\"
        src=\\"resources/sap-ui-core.js\\"
        data-sap-ui-theme=\\"sap_fiori_3\\"
        data-sap-ui-resourceroots='{
            \\"nods1\\": \\"./\\"
        }'
        data-sap-ui-oninit=\\"module:sap/ui/core/ComponentSupport\\"
        data-sap-ui-compatVersion=\\"edge\\"
        data-sap-ui-async=\\"true\\"
        data-sap-ui-frameOptions=\\"trusted\\"
    ></script>
</head>
<body class=\\"sapUiBody sapUiSizeCompact\\" id=\\"content\\">
    <div
        data-sap-ui-component
        data-name=\\"nods1\\"
        data-id=\\"container\\"
        data-settings='{\\"id\\" : \\"nods1\\"}'
        data-handle-validation=\\"true\\"
    ></div>
</body>
</html>",
    "state": "modified",
  },
  "webapp/manifest.json": Object {
    "contents": "{
  \\"_version\\": \\"1.22.0\\",
  \\"sap.app\\": {
    \\"id\\": \\"nods1\\",
    \\"type\\": \\"application\\",
    \\"i18n\\": \\"i18n/i18n.properties\\",
    \\"applicationVersion\\": {
      \\"version\\": \\"0.0.1\\"
    },
    \\"title\\": \\"{{appTitle}}\\",
    \\"description\\": \\"{{appDescription}}\\",
    \\"dataSources\\": {
      \\"mainService\\": {
        \\"uri\\": \\"/sap/opu/odata/\\",
        \\"type\\": \\"OData\\",
        \\"settings\\": {
          \\"annotations\\": [],
          \\"localUri\\": \\"localService/metadata.xml\\"
        }
      }
    }
  },
  \\"sap.ui\\": {
    \\"technology\\": \\"UI5\\",
    \\"icons\\": {
      \\"icon\\": \\"\\",
      \\"favIcon\\": \\"\\",
      \\"phone\\": \\"\\",
      \\"phone@2\\": \\"\\",
      \\"tablet\\": \\"\\",
      \\"tablet@2\\": \\"\\"
    },
    \\"deviceTypes\\": {
      \\"desktop\\": true,
      \\"tablet\\": true,
      \\"phone\\": true
    }
  },
  \\"sap.ui5\\": {
    \\"flexEnabled\\": true,
    \\"dependencies\\": {
      \\"minUI5Version\\": \\"1.60\\",
      \\"libs\\": {
        \\"sap.ui.core\\": {}
      }
    },
    \\"contentDensities\\": {
      \\"compact\\": true,
      \\"cozy\\": true
    },
    \\"models\\": {
      \\"i18n\\": {
        \\"type\\": \\"sap.ui.model.resource.ResourceModel\\",
        \\"settings\\": {
          \\"bundleName\\": \\"nods1.i18n.i18n\\"
        }
      },
      \\"\\": {
        \\"dataSource\\": \\"mainService\\",
        \\"preload\\": true,
        \\"settings\\": {}
      }
    },
    \\"resources\\": {
      \\"css\\": [
        {
          \\"uri\\": \\"css/style.css\\"
        }
      ]
    },
    \\"routing\\": {
      \\"config\\": {
        \\"routerClass\\": \\"sap.m.routing.Router\\",
        \\"viewType\\": \\"XML\\",
        \\"async\\": true,
        \\"viewPath\\": \\"nods1.view\\",
        \\"controlAggregation\\": \\"pages\\",
        \\"controlId\\": \\"app\\",
        \\"clearControlAggregation\\": false
      },
      \\"routes\\": [
        {
          \\"name\\": \\"RouteView1\\",
          \\"pattern\\": \\"RouteView1\\",
          \\"target\\": [
            \\"TargetView1\\"
          ]
        }
      ],
      \\"targets\\": {
        \\"TargetView1\\": {
          \\"viewType\\": \\"XML\\",
          \\"transition\\": \\"slide\\",
          \\"clearControlAggregation\\": false,
          \\"viewId\\": \\"View1\\",
          \\"viewName\\": \\"View1\\"
        }
      }
    },
    \\"rootView\\": {
      \\"viewName\\": \\"nods1.view.View1\\",
      \\"type\\": \\"XML\\",
      \\"async\\": true,
      \\"id\\": \\"View1\\"
    }
  }
}
",
    "state": "modified",
  },
  "webapp/model/models.js": Object {
    "contents": "sap.ui.define([
	\\"sap/ui/model/json/JSONModel\\",
	\\"sap/ui/Device\\"
], function (JSONModel, Device) {
	\\"use strict\\";

	return {

		createDeviceModel: function () {
			var oModel = new JSONModel(Device);
			oModel.setDefaultBindingMode(\\"OneWay\\");
			return oModel;
		}

	};
});",
    "state": "modified",
  },
  "webapp/test/changes_loader.js": Object {
    "contents": "//This file used only for loading the changes in the preview and not required to be checked in.
//Loads and extends the openui5 FileListBaseConnector

//For UI5 version >= 1.80, the location of the FileListBaseConnector is different
const connectorPath =
    parseFloat(sap.ui.version) >= 1.8
        ? 'sap/ui/fl/write/api/connectors/FileListBaseConnector'
        : 'sap/ui/fl/initial/api/connectors/FileListBaseConnector';

sap.ui.define(['sap/base/util/merge', connectorPath], function(merge, FileListBaseConnector) {
    var aPromises = [];
    var trustedHosts = [/^localhost$/, /^.*.applicationstudio.cloud.sap$/];
    var url = new URL(window.location.toString());
    var isValidHost = trustedHosts.some((host) => {
        return host.test(url.hostname);
    });
    return merge({}, FileListBaseConnector, {
        getFileList: function() {
            return new Promise(function(resolve, reject) {
                // If no changes found, maybe because the app was executed without doing a build.
                // Check for changes folder and load the changes, if any.
                if (!isValidHost) reject(console.log('cannot load flex changes: invalid host'));
                $.ajax({
                    url: url.origin + '/changes/',
                    type: 'GET',
                    cache: false
                })
                    .then(function(sChangesFolderContent) {
                        var regex = /(\\\\/changes\\\\/[^\\"]*\\\\.[a-zA-Z]*)/g;
                        var result = regex.exec(sChangesFolderContent);
                        var aChanges = [];
                        while (result !== null) {
                            aChanges.push(result[1]);
                            result = regex.exec(sChangesFolderContent);
                        }
                        resolve(aChanges);
                    })
                    .fail(function(obj) {
                        // No changes folder, then just resolve
                        resolve();
                    });
            });
        }
    });
});
",
    "state": "modified",
  },
  "webapp/test/changes_preview.js": Object {
    "contents": "//This file used only for loading the changes in the preview and not required to be checked in.
//Load the fake lrep connector only if ui5 version < 1.78
var version = sap.ui.version.split('.');
if (parseInt(version[0]) <= 1 && parseInt(version[1]) < 78) {
    sap.ui.getCore().loadLibraries(['sap/ui/fl']);
    sap.ui.require(['sap/ui/fl/FakeLrepConnector'], function (FakeLrepConnector) {
        jQuery.extend(FakeLrepConnector.prototype, {
            create: function (oChange) {
                return Promise.resolve();
            },
            stringToAscii: function (sCodeAsString) {
                if (!sCodeAsString || sCodeAsString.length === 0) {
                    return '';
                }
                var sAsciiString = '';
                for (var i = 0; i < sCodeAsString.length; i++) {
                    sAsciiString += sCodeAsString.charCodeAt(i) + ',';
                }
                if (
                    sAsciiString !== null &&
                    sAsciiString.length > 0 &&
                    sAsciiString.charAt(sAsciiString.length - 1) === ','
                ) {
                    sAsciiString = sAsciiString.substring(0, sAsciiString.length - 1);
                }
                return sAsciiString;
            },
            /*
             * Get the content of the sap-ui-cachebuster-info.json file
             * to get the paths to the changes files
             * and get their content
             */
            loadChanges: function () {
                var oResult = {
                    changes: [],
                    settings: {
                        isKeyUser: true,
                        isAtoAvailable: false,
                        isProductiveSystem: false
                    }
                };

                //Get the content of the changes folder.
                var aPromises = [];
                var sCacheBusterFilePath = '/sap-ui-cachebuster-info.json';
                var trustedHosts = [/^localhost$/, /^.*.applicationstudio.cloud.sap$/];
                var url = new URL(window.location.toString());
                var isValidHost = trustedHosts.some((host) => {
                    return host.test(url.hostname);
                });
                /*eslint-disable promise/avoid-new*/
                /*eslint-disable promise/catch-or-return*/
                /*eslint-disable promise/always-return*/
                /*eslint-disable promise/no-nesting*/
                /*eslint-disable consistent-return*/
                /*eslint-disable xss/no-mixed-html*/
                return new Promise(function (resolve, reject) {
                    if (!isValidHost) reject(console.log('cannot load flex changes: invalid host'));
                    $.ajax({
                        url: url.origin + sCacheBusterFilePath,
                        type: 'GET',
                        cache: false
                    })
                        .then(function (oCachebusterContent) {
                            //we are looking for only change files
                            var aChangeFilesPaths = Object.keys(oCachebusterContent).filter(function (sPath) {
                                return sPath.endsWith('.change');
                            });
                            $.each(aChangeFilesPaths, function (index, sFilePath) {
                                //now as we support MTA projects we need to take only changes which are relevant for
                                //the current HTML5 module
                                //sap-ui-cachebuster-info.json for MTA doesn't start with \\"webapp/changes\\" but from <MTA-HTML5-MODULE-NAME>
                                //possible change file path patterns
                                //webapp/changes/<change-file>
                                //<MTA-HTML5-MODULE-NAME>/webapp/changes/<change-file>
                                if (sFilePath.indexOf('changes') === 0) {
                                    /*eslint-disable no-param-reassign*/
                                    if (!isValidHost) reject(console.log('cannot load flex changes: invalid host'));
                                    aPromises.push(
                                        $.ajax({
                                            url: url.origin + '/' + sFilePath,
                                            type: 'GET',
                                            cache: false
                                        }).then(function (sChangeContent) {
                                            return JSON.parse(sChangeContent);
                                        })
                                    );
                                }
                            });
                        })
                        .always(function () {
                            return Promise.all(aPromises).then(function (aChanges) {
                                return new Promise(function (resolve, reject) {
                                    // If no changes found, maybe because the app was executed without doing a build.
                                    // Check for changes folder and load the changes, if any.
                                    if (aChanges.length === 0) {
                                        if (!isValidHost) reject(console.log('cannot load flex changes: invalid host'));
                                        $.ajax({
                                            url: url.origin + '/changes/',
                                            type: 'GET',
                                            cache: false
                                        })
                                            .then(function (sChangesFolderContent) {
                                                var regex = /(\\\\/changes\\\\/[^\\"]*\\\\.[a-zA-Z]*)/g;
                                                var result = regex.exec(sChangesFolderContent);

                                                while (result !== null) {
                                                    if (!isValidHost)
                                                        reject(console.log('cannot load flex changes: invalid host'));
                                                    aPromises.push(
                                                        $.ajax({
                                                            url: url.origin + result[1],
                                                            type: 'GET',
                                                            cache: false
                                                        }).then(function (sChangeContent) {
                                                            return JSON.parse(sChangeContent);
                                                        })
                                                    );
                                                    result = regex.exec(sChangesFolderContent);
                                                }
                                                resolve(Promise.all(aPromises));
                                            })
                                            .fail(function (obj) {
                                                // No changes folder, then just resolve
                                                resolve(aChanges);
                                            });
                                    } else {
                                        resolve(aChanges);
                                    }
                                }).then(function (aChanges) {
                                    var aChangePromises = [],
                                        aProcessedChanges = [];
                                    aChanges.forEach(function (oChange) {
                                        var sChangeType = oChange.changeType;
                                        if (sChangeType === 'addXML' || sChangeType === 'codeExt') {
                                            /*eslint-disable no-nested-ternary*/
                                            var sPath =
                                                sChangeType === 'addXML'
                                                    ? oChange.content.fragmentPath
                                                    : sChangeType === 'codeExt'
                                                        ? oChange.content.codeRef
                                                        : '';
                                            var sWebappPath = sPath.match(/webapp(.*)/);
                                            var sUrl = '/' + sWebappPath[0];
                                            aChangePromises.push(
                                                $.ajax({
                                                    url: sUrl,
                                                    type: 'GET',
                                                    cache: false
                                                }).then(function (oFileDocument) {
                                                    if (sChangeType === 'addXML') {
                                                        oChange.content.fragment = FakeLrepConnector.prototype.stringToAscii(
                                                            oFileDocument.documentElement.outerHTML
                                                        );
                                                        oChange.content.selectedFragmentContent =
                                                            oFileDocument.documentElement.outerHTML;
                                                    } else if (sChangeType === 'codeExt') {
                                                        oChange.content.code = FakeLrepConnector.prototype.stringToAscii(
                                                            oFileDocument
                                                        );
                                                        oChange.content.extensionControllerContent = oFileDocument;
                                                    }
                                                    return oChange;
                                                })
                                            );
                                        } else {
                                            aProcessedChanges.push(oChange);
                                        }
                                    });
                                    // aChanges holds the content of all change files from the project (empty array if no such files)
                                    // sort the array by the creation timestamp of the changes
                                    if (aChangePromises.length > 0) {
                                        return Promise.all(aChangePromises).then(function (aUpdatedChanges) {
                                            aUpdatedChanges.forEach(function (oChange) {
                                                aProcessedChanges.push(oChange);
                                            });
                                            aProcessedChanges.sort(function (change1, change2) {
                                                return new Date(change1.creation) - new Date(change2.creation);
                                            });
                                            oResult.changes = aProcessedChanges;
                                            var oLrepChange = {
                                                changes: oResult,
                                                componentClassName: 'nods1'
                                            };
                                            resolve(oLrepChange);
                                        });
                                    } else {
                                        aProcessedChanges.sort(function (change1, change2) {
                                            return new Date(change1.creation) - new Date(change2.creation);
                                        });
                                        oResult.changes = aProcessedChanges;
                                        var oLrepChange = {
                                            changes: oResult,
                                            componentClassName: 'nods1'
                                        };
                                        resolve(oLrepChange);
                                    }
                                });
                            });
                        });
                });
            }
        });
        FakeLrepConnector.enableFakeConnector();
    });
}
",
    "state": "modified",
  },
  "webapp/test/flpSandbox.html": Object {
    "contents": "<!DOCTYPE HTML>
<html>
<!-- Copyright (c) 2015 SAP AG, All Rights Reserved -->
<head>
	<meta http-equiv=\\"X-UA-Compatible\\" content=\\"IE=edge\\">
    <meta charset=\\"UTF-8\\">
    <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1.0\\">
	<title>{{appTitle}}</title>

	<!-- Bootstrap the unified shell in sandbox mode for standalone usage.

		 The renderer is specified in the global Unified Shell configuration object \\"sap-ushell-config\\".

		 The fiori2 renderer will render the shell header allowing, for instance,
		 testing of additional application setting buttons.

		 The navigation target resolution service is configured in a way that the empty URL hash is
		 resolved to our own application.

		 This example uses relative path references for the SAPUI5 resources and test-resources;
		 it might be necessary to adapt them depending on the target runtime platform.
		 The sandbox platform is restricted to development or demo use cases and must NOT be used
		 for productive scenarios.
	-->
	<script type=\\"text/javascript\\">
		window[\\"sap-ushell-config\\"] = {
			defaultRenderer: \\"fiori2\\",
			bootstrapPlugins: {
				\\"RuntimeAuthoringPlugin\\": {
					component: \\"sap.ushell.plugins.rta\\",
					config: {
						validateAppVersion: false
					}
				}
			},
			renderers: {
				fiori2: {
					componentData: {
						config: {
							search: \\"hidden\\"
						}
					}
				}
			},
			applications: {
				\\"nods1-tile\\": {
					title: \\"App Title\\",
					description: \\"A Fiori application.\\",
					additionalInformation: \\"SAPUI5.Component=nods1\\",
					applicationType: \\"URL\\",
					url: \\"../\\"
				}
			}
		};
	</script>

	<script src=\\"/test-resources/sap/ushell/bootstrap/sandbox.js\\" id=\\"sap-ushell-bootstrap\\"></script>
	<!-- Bootstrap the UI5 core library -->
	<script id=\\"sap-ui-bootstrap\\"
		src=\\"/resources/sap-ui-core.js\\"
		data-sap-ui-libs=\\"sap.f,sap.m,sap.suite.ui.generic.template,sap.ui.comp,sap.ui.core,sap.ui.generic.app,sap.ui.table,sap.ushell\\"
		data-sap-ui-async=\\"true\\"
		data-sap-ui-preload=\\"async\\"
		data-sap-ui-theme=\\"sap_belize\\"
		data-sap-ui-compatVersion=\\"edge\\"
		data-sap-ui-flexibilityServices='[{\\"applyConnector\\":\\"nods1/test/changes_loader\\", \\"custom\\":true}]'
		data-sap-ui-language=\\"en\\"
		data-sap-ui-resourceroots='{\\"nods1\\": \\"../\\"}'
		data-sap-ui-frameOptions=\\"allow\\"> // NON-SECURE setting for testing environment
		</script>
		<script src=\\"../utils/locate-reuse-libs.js\\" data-sap-ui-manifest-uri=\\"../manifest.json\\">
		</script>
	<!-- relevant for version < 1.78.0 only -->
	<script src=\\"changes_preview.js\\"></script>
</head>

<!-- UI Content -->

<body class=\\"sapUiBody\\" id=\\"content\\">
</body>

</html>
",
    "state": "modified",
  },
  "webapp/utils/locate-reuse-libs.js": Object {
    "contents": "/*eslint-disable semi, no-console*/
(function (sap) {
    var fioriToolsGetManifestLibs = function (manifestPath) {
        var url = manifestPath;
        var result = \\"\\";
        // SAPUI5 delivered namespaces from https://ui5.sap.com/#/api/sap
        var ui5Libs = [
            \\"sap.apf\\",
            \\"sap.base\\",
            \\"sap.chart\\",
            \\"sap.collaboration\\",
            \\"sap.f\\",
            \\"sap.fe\\",
            \\"sap.fileviewer\\",
            \\"sap.gantt\\",
            \\"sap.landvisz\\",
            \\"sap.m\\",
            \\"sap.ndc\\",
            \\"sap.ovp\\",
            \\"sap.rules\\",
            \\"sap.suite\\",
            \\"sap.tnt\\",
            \\"sap.ui\\",
            \\"sap.uiext\\",
            \\"sap.ushell\\",
            \\"sap.uxap\\",
            \\"sap.viz\\",
            \\"sap.webanalytics\\",
            \\"sap.zen\\"
        ];
        return new Promise(function (resolve, reject) {
            $.ajax(url)
                .done(function (manifest) {
                    if (manifest) {
                        if (
                            manifest[\\"sap.ui5\\"] &&
                            manifest[\\"sap.ui5\\"].dependencies &&
                            manifest[\\"sap.ui5\\"].dependencies.libs
                        ) {
                            Object.keys(manifest[\\"sap.ui5\\"].dependencies.libs).forEach(function (manifestLibKey) {
                                // ignore libs that start with SAPUI5 delivered namespaces
                                if (!ui5Libs.some(function (substring) { return manifestLibKey === substring || manifestLibKey.startsWith(substring + \\".\\"); })) {
                                    if (result.length > 0) {
                                        result = result + \\",\\" + manifestLibKey;
                                    } else {
                                        result = manifestLibKey;
                                    }
                                }
                            });
                        }
                    }
                    resolve(result);
                })
                .fail(function (error) {
                    reject(new Error(\\"Could not fetch manifest at '\\" + manifestPath));
                });
        });
    };
    /**
     * Registers the module paths for dependencies of the given component.
     * @param {string} manifestPath The the path to the app manifest path
     * for which the dependencies should be registered.
     * @returns {Promise} A promise which is resolved when the ajax request for
     * the app-index was successful and the module paths were registered.
     */
    sap.registerComponentDependencyPaths = function (manifestPath) {
        /*eslint-disable semi, consistent-return*/
        return fioriToolsGetManifestLibs(manifestPath).then(function (libs) {
            if (libs && libs.length > 0) {
                var url = \\"/sap/bc/ui2/app_index/ui5_app_info?id=\\" + libs;
                var sapClient = jQuery.sap.getUriParameters().get(\\"sap-client\\");
                if (sapClient && sapClient.length === 3) {
                    url = url + \\"&sap-client=\\" + sapClient;
                }
                return $.ajax(url).done(function (data) {
                    if (data) {
                        Object.keys(data).forEach(function (moduleDefinitionKey) {
                            var moduleDefinition = data[moduleDefinitionKey];
                            if (moduleDefinition && moduleDefinition.dependencies) {
                                moduleDefinition.dependencies.forEach(function (dependency) {
                                    if (dependency.url && dependency.url.length > 0 && dependency.type === \\"UI5LIB\\") {
                                        jQuery.sap.log.info(
                                            \\"Registering Library \\" +
                                            dependency.componentId +
                                            \\" from server \\" +
                                            dependency.url
                                        );
                                        jQuery.sap.registerModulePath(dependency.componentId, dependency.url);
                                    }
                                });
                            }
                        });
                    }
                });
            }
        });
    };
})(sap);

/*eslint-disable sap-browser-api-warning, sap-no-dom-access*/
var scripts = document.getElementsByTagName(\\"script\\");
var currentScript = scripts[scripts.length - 1];
var manifestUri = currentScript.getAttribute(\\"data-sap-ui-manifest-uri\\");
var componentName = currentScript.getAttribute(\\"data-sap-ui-componentName\\");
var useMockserver = currentScript.getAttribute(\\"data-sap-ui-use-mockserver\\");
sap.registerComponentDependencyPaths(manifestUri)
    .catch(function (error) {
        jQuery.sap.log.error(error);
    })
    .finally(function () {

        // setting the app title with internationalization 
        sap.ui.getCore().attachInit(function () {
            jQuery.sap.require(\\"jquery.sap.resources\\");
            var sLocale = sap.ui.getCore().getConfiguration().getLanguage();
            var oBundle = jQuery.sap.resources({
                url: \\"i18n/i18n.properties\\",
                locale: sLocale
            });
            document.title = oBundle.getText(\\"appTitle\\");
        });

        if (componentName && componentName.length > 0) {
            if (useMockserver && useMockserver === \\"true\\") {
                sap.ui.getCore().attachInit(function () {
                    sap.ui.require([componentName.replace(/\\\\./g, \\"/\\") + \\"/localService/mockserver\\"], function (server) {
                        // set up test service for local testing
                        server.init();
                        // initialize the ushell sandbox component
                        sap.ushell.Container.createRenderer().placeAt(\\"content\\");
                    });
                });
            } else {
                // Requiring the ComponentSupport module automatically executes the component initialisation for all declaratively defined components
                sap.ui.require([\\"sap/ui/core/ComponentSupport\\"]);

                // setting the app title with the i18n text 
                sap.ui.getCore().attachInit(function () {
                    jQuery.sap.require(\\"jquery.sap.resources\\");
                    var sLocale = sap.ui.getCore().getConfiguration().getLanguage();
                    var oBundle = jQuery.sap.resources({
                        url: \\"i18n/i18n.properties\\",
                        locale: sLocale
                    });
                    document.title = oBundle.getText(\\"appTitle\\");
                });
            }
        } else {
            sap.ui.getCore().attachInit(function () {
                // initialize the ushell sandbox component
                sap.ushell.Container.createRenderer().placeAt(\\"content\\");
            });
        }
    });

sap.registerComponentDependencyPaths(manifestUri);
",
    "state": "modified",
  },
  "webapp/view/View1.view.xml": Object {
    "contents": "<mvc:View
    controllerName=\\"nods1.controller.View1\\"
    xmlns:mvc=\\"sap.ui.core.mvc\\"
    displayBlock=\\"true\\"
    xmlns=\\"sap.m\\"
>
	<Shell id=\\"shell\\">
		<App id=\\"app\\">
			<pages>
				<Page id=\\"page\\" title=\\"{i18n>title}\\">
					<content />
				</Page>
			</pages>
		</App>
	</Shell>
</mvc:View>
",
    "state": "modified",
  },
}
`;
