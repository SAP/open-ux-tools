{
  "id": "fiori-showcase-readme-md",
  "title": "SAP Fiori elements for OData V4 Feature Showcase",
  "category": "features",
  "path": "README.md",
  "lastModified": "2025-09-01T18:17:10.731Z",
  "tags": [
    "features",
    "md",
    "SAP",
    "Fiori",
    "elements",
    "for",
    "OData",
    "Feature",
    "Showcase"
  ],
  "headers": [
    "SAP Fiori elements for OData V4 Feature Showcase",
    "Content",
    "[List Report](https://experience.sap.com/fiori-design-web/list-report-floorplan-sap-fiori-element/)",
    "General Features",
    "Flexible Column Layout",
    "Configure Draft",
    "Replacing Standard UI Texts",
    "Custom Actions",
    "Invoking CAP actions out of a Custom Action",
    "Header Area List Report",
    "Enabling Variant Management",
    "Define Filters",
    "Default Values",
    "Hide filters",
    "Filter facets",
    "Selection Fields",
    "Mandatory filter fields",
    "Enable semantic dates for filter fields of type Date",
    "Case insensitive filtering",
    "Value Help",
    "Value help as a dropdown",
    "Value help as radio buttons",
    "Dependent Filtering (Value Help)",
    "Dependent filtering (Multi-Input Value Help)",
    "Adding navigation properties",
    "Custom Filter",
    "Custom Actions (Global List Report)",
    "Content Area List Report",
    "Configuring Tables",
    "Actions",
    "Side Effects of actions",
    "Value Help for action parameter",
    "Default Value for action parameter",
    "Action Drop down menu",
    "Dynamic CRUD Restrictions",
    "Navigation Button",
    "Critical Actions",
    "Message Toasts",
    "Custom Actions (Table List Report)",
    "Setting the Table Type",
    "Multiple Views",
    "Single table mode",
    "Multiple table mode",
    "Selection Variant",
    "Selection Presentation Variant",
    "Creation Dialog",
    "Defining the Default Sort Order",
    "Enabling Multiple Selection in Tables",
    "Handling Semantic Key Fields",
    "Highlighting Line Items Based on Criticality",
    "Adding a Rating Indicator to a Table",
    "Adding a Progress Indicator to a Table",
    "Adding a field with a tooltip to a Table",
    "Adding a Smart Micro Chart to a Table",
    "Adding a Contact Quick View to a Table",
    "Adding a Quick View Facet to a Table",
    "Links to the apps of the entity",
    "Adding Multiple Fields to one Column in Responsive Tables",
    "Adding Images to a table",
    "Adding Currency or UoM Fields to a table",
    "Adding a link to a table",
    "Add custom column (Extensibility)",
    "[Object Page](https://experience.sap.com/fiori-design-web/object-page/)",
    "General Features Object Page",
    "Annotations for data fields",
    "Communication properties",
    "Time and Date",
    "Multi line text",
    "Placeholder values",
    "Header Area Object Page",
    "Title and Subtitle",
    "Dynamic title or subtitle",
    "Header Facets",
    "Plain Text",
    "Header Field Group Facet",
    "Custom Field",
    "Address Facet",
    "Data Points",
    "Rating",
    "Progress",
    "Key value",
    "Micro chart Facet",
    "Area Micro Chart",
    "Bullet Micro Chart",
    "Radial Micro Chart",
    "Line Micro Chart",
    "Column Micro Chart",
    "Harvey Micro Chart",
    "Stacked Bar Micro Chart",
    "Comparison Micro Chart",
    "Header Custom Facet",
    "Object Page Actions",
    "Custom Actions (Object Page Header)",
    "Navigation from Header Facets",
    "In-page Navigation",
    "External Navigation",
    "Toggling the Editability of Header Fields",
    "Adding Subpages",
    "Enabling the Related Apps Button",
    "Content Area Object Page",
    "General features Content Area Object Page",
    "Displaying Text and ID for Value help Input fields",
    "Hiding features",
    "Preview",
    "Side Content",
    "Forms",
    "Connected Fields",
    "Custom Content",
    "Form Actions and Navigation",
    "Custom Actions (Object Page Section Form)",
    "Table",
    "Enable Variant Management Object Page",
    "Enable Personalization",
    "Enable Full Screen Mode",
    "Adding Titles to Object Page Tables",
    "Adding Segmented Buttons to a Table Toolbar",
    "Enabling Inline Creation of Table Entries on Object Page",
    "Using the 'Export to Spreadsheet' Feature",
    "Custom Actions (Object Page Section Table)",
    "Chart",
    "Custom Section and Subsection",
    "Custom Subsection",
    "Footer bar",
    "Determining actions",
    "Custom Actions (Object Page Footer)",
    "Custom Object Page",
    "How to obtain support",
    "License"
  ],
  "content": "# SAP Fiori elements for OData V4 Feature Showcase \n[![REUSE status](https://api.reuse.software/badge/github.com/SAP-samples/fiori-elements-feature-showcase)](https://api.reuse.software/info/github.com/SAP-samples/fiori-elements-feature-showcase)\n\n![Screenshot](readmeImages/app-screenshot.png)\n<br/>\nThe main focus of this project is to present features from the List Report & Object Page floorplan. Please note, some feature combinations might not be intended by the [SAP Fiori UX Guidelines](https://experience.sap.com/fiori-design/) but are shown here for the sake of demonstration.\n<br/><br/>\nStart the app and search for features you might want to use or search through the content overview. When you find something you can look for the corresponding topic for more information regarding the implementation.\n<br/><br/>\nSome topics have a hint, that the implementation is possible using SAP Fiori tools, which we recommend to use.\n<br/><br/>\nIf you use CAP for the first time, please follow the instructions from the [CAP Getting started](https://cap.cloud.sap/docs/get-started/) <br/> <br/>\nTo run the featue showcase locally install the dependencies in the [root folder](https://github.tools.sap/fiori-elements/feature-showcase) with `npm install`. <br/>\nThen start the app with `cds watch`. <br/>\nOpen `http://localhost:4008/$launchpad` in the Browser to get to the SAP Fiori launchpad sandbox from where you can navigate to the feature showcases.\n<br/>\n\n<b>Finding code: </b>Each of the following topics has search terms, to find the related code snippets in the repository.\n\n## Content\n- [List Report](#list-report)\n    - [General Features](#general-features)\n        - [Configure Draft](#configure-draft)\n        - [Replacing Standard UI Texts](#replacing-standard-ui-texts)\n        - [Custom Actions](#custom-actions)\n            - [Invoking CAP actions out of a Custom Action](#invoking-cap-actions-out-of-a-custom-action)\n    - [Header Area](#header-area-list-report)\n        - [Enabling Variant Management](#enabling-variant-management)\n        - [Define Filters](#define-filters)\n            - [Default Values](#default-values)\n            - [Hide filters](#hide-filters)\n            - [Filter facets](#filter-facets)\n            - [Selection Fields](#selection-fields)\n            - [Mandatory filter fields](#mandatory-filter-fields)\n            - [Enable semantic dates for filter fields of type Date](#enable-semantic-dates-for-filter-fields-of-type-date)\n            - [Case insensitive filtering](#case-insensitive-filtering)\n            - [Value Help](#value-help)\n            - [Dependent Filtering (Value Help)](#dependent-filtering-value-help)\n            - [Dependent Filtering from parent (Value Help)](#dependent-filtering-multi-input-value-help)\n            - [Custom Filter](#custom-filter)\n        - [Custom Actions](#custom-actions-global-list-report)\n    - [Content Area](#content-area-list-report)\n        - [Configuring Tables](#configuring-tables)\n            - [Actions](#actions)\n                - [Side Effects of actions](#side-effects-of-actions)\n                - [Value Help for action parameter](#value-help-for-action-parameter)\n                - [Default Value for action parameter](#default-value-for-action-parameter)\n                - [Action Drop down menu](#action-drop-down-menu)\n                - [Dynamic CRUD Restrictions](#dynamic-crud-restrictions)\n                - [Navigation Button](#navigation-button)\n                - [Critical Actions](#critical-actions)\n                - [Message Toasts](#message-toasts)\n                - [Custom Actions](#custom-actions-table-list-report)\n            - [Setting the Table Type](#setting-the-table-type)\n            - [Multiple Views](#multiple-views)\n                - [Single table mode](#single-table-mode)\n                - [Multiple table mode](#multiple-table-mode)\n                - [Selection Variant](#selection-variant)\n                - [Selection Presentation Variant](#selection-presentation-variant)\n            - [Creation Dialog](#creation-dialog)\n            - [Defining the Default Sort Order](#defining-the-default-sort-order)\n            - [Enabling Multiple Selection in Tables](#enabling-multiple-selection-in-tables)\n            - [Handling Semantic Key Fields](#handling-semantic-key-fields)\n            - [Highlighting Line Items Based on Criticality](#highlighting-line-items-based-on-criticality)\n            - [Adding a Rating Indicator to a Table](#adding-a-rating-indicator-to-a-table)\n            - [Adding a Progress Indicator to a Table](#adding-a-progress-indicator-to-a-table)\n            - [Adding a field with a tooltip to a Table](#adding-a-field-with-a-tooltip-to-a-table)\n            - [Adding a Smart Micro Chart to a Table](#adding-a-smart-micro-chart-to-a-table)\n            - [Adding a Contact Quick View to a Table](#adding-a-contact-quick-view-to-a-table)\n            - [Adding a Quick View Facet to a Table](#adding-a-quick-view-facet-to-a-table)\n                - [Links to the apps of the entity](#links-to-the-apps-of-the-entity)\n            - [Adding Multiple Fields to one Column in Responsive Tables](#adding-multiple-fields-to-one-column-in-responsive-tables)\n            - [Adding Images to a table](#adding-images-to-a-table)\n            - [Adding Currency or UoM Fields to a table](#adding-currency-or-uom-fields-to-a-table)\n            - [Adding a link to a table](#adding-a-link-to-a-table)\n            - [Add custom column (Extensibility)](#add-custom-column-extensibility)\n- [Object Page](#object-page)\n    - [General Features](#general-features-object-page)\n        - [Annotations for data fields](#annotations-for-data-fields)\n            - [Communication properties](#communication-properties)\n            - [Time and Date](#time-and-date)\n            - [Multi line text](#multi-line-text)\n            - [Placeholder values](#placeholder-values)\n        - [Replacing Standard UI Texts](#replacing-standard-ui-texts)\n        - [Custom Actions](#custom-actions)\n            - [Invoking CAP actions out of a Custom Action](#invoking-cap-actions-out-of-a-custom-action)\n    - [Header Area](#header-area-object-page)\n        - [Title and Subtitle](#title-and-subtitle)\n        - [Actions](#object-page-actions)\n            - [Custom Actions](#custom-actions-object-page-header)\n        - [Header Facets](#header-facets)\n            - [Plain Text](#plain-text)\n            - [Header Field Group Facet](#header-field-group-facet)\n                - [Custom Field](#custom-field)\n            - [Address facet](#address-facet)\n            - [Data Points](#data-points)\n                - [Rating](#rating)\n                - [Progress](#progress)\n                - [Key value](#key-value)\n            - [Micro chart facet](#micro-chart-facet)\n                - [Area Micro Chart](#area-micro-chart)\n                - [Bullet Micro Chart](#bullet-micro-chart)\n                - [Radial Micro Chart](#radial-micro-chart)\n                - [Line Micro Chart](#line-micro-chart)\n                - [Column Micro Chart](#column-micro-chart)\n                - [Harvey Micro Chart](#harvey-micro-chart)\n                - [Stacked Bar Micro Chart](#stacked-bar-micro-chart)\n                - [Comparison Micro Chart](#comparison-micro-chart)\n            - [Header Custom Facet](#Header-custom-facet)\n    - [Content Area](#content-area-object-page)\n        - [General features](#general-features-content-area-object-page)\n            - [Displaying Text and ID for Value help Input fields](#displaying-text-and-id-for-value-help-input-fields)\n            - [Hiding features](#hiding-features)\n            - [Preview](#preview)\n            - [Side Content](#side-content)\n        - [Forms](#forms)\n            - [Connected Fields](#connected-fields)\n            - [Custom Content](#custom-content)\n            - [Form Actions and Navigation](#form-actions-and-navigation)\n                - [Custom Actions](#custom-actions-object-page-section-form)\n        - [Table](#table)\n            - [Enable Variant Management](#enable-variant-management-object-page)\n            - [Enable Personalization (Filter, Sort, Columns)](#enable-personalization)\n            - [Enable Full Screen Mode](#enable-full-screen-mode)\n            - [Adding Titles to Object Page Tables](#adding-titles-to-object-page-tables)\n            - [Adding Segmented Buttons to a Table Toolbar](#adding-segmented-buttons-to-a-table-toolbar)\n            - [Enabling Inline Creation of Table Entries on Object Page](#enabling-inline-creation-of-table-entries-on-object-page)\n            - [Using the 'Export to Spreadsheet' Feature](#using-the-export-to-spreadsheet-feature)\n            - [Custom Actions](#custom-actions-object-page-section-table)\n        - [Chart](#chart)\n        - [Custom Section and Subsection](#custom-section-and-subsection)\n            - [Custom Subsection](#custom-subsection)\n    - [Footer Bar](#footer-bar)\n        - [Determining actions](#determining-actions)\n        - [Custom Actions](#custom-actions-object-page-footer)\n    - [Custom Object Page](#custom-object-page)\n\n<br/>\n\n# [List Report](https://experience.sap.com/fiori-design-web/list-report-floorplan-sap-fiori-element/)\n\n## General Features\n\n### Flexible Column Layout\nThe Flexible Column Layout (FCL) enables the app, to display the Object Page and possibly a further Object Page next to the List Report on the same page instead of navigating to the next page.\nTo enable the Flexible Column Layout please use the Application Modeler from the SAP Fiori tools. The setting can be found in the Global Page Settings, which are part of the Page Map.\n<!---### Configuring Navigation --->\n\n### Configure Draft\n\n<i>Search term:</i> [`#Draft`](../../search?q=Draft)\n\nThe annotation `@odata.draft.enabled` adds the draft mode to an entity.\n\n```\nannotate service1.RootEntities with @odata.draft.enabled;\n```\n\n### Replacing Standard UI Texts\n\n<i>Search term:</i> [`\"enhanceI18n\"`](../../search?q=enhanceI18n)\n\nIf wanted, the replacement of standard UI texts is possible.\nFor this a new i18n file is needed, for example \"customI18N.properties\" which is then referenced in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"enhanceI18n\": \"i18n/customI18N.properties\",\n            ...\n        }\n    }\n},\n```\nThe replacement can be for all entities, for specific entities or for specific actions of specific entities. <br/>\n- `C_COMMON_DIALOG_OK` is the key for all entities.\n- `C_TRANSACTION_HELPER_OBJECT_PAGE_CONFIRM_DELETE_WITH_OBJECTTITLE_SINGULAR|RootEntities` is the key for the \"RootEntities\" entity\n- `C_OPERATIONS_ACTION_CONFIRM_MESSAGE|RootEntities|criticalAction` is the key for the \"criticalAction\" action of the \"RootEntities\" entity\n\n```\nC_COMMON_ACTION_PARAMETER_DIALOG_CANCEL|RootEntities = Custom cancel text\n```\n\nMore information about replacing standard UI texts and what can be overridden is available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/b8cb649973534f08a6047692f8c6830d).\n\n### Custom Actions\n\n<i>Search term:</i> [`CustomActions`](../../search?q=CustomActions)\n\nWith extensions points it is possible to add custom front-end actions to the UI at different places. Custom actions are added to the [manifest.json](app/featureShowcase/webapp/manifest.json) file. The location depends on where the action shall be visible on the UI.\nIn general a custom action consists of a unique qualifier for the action. The property \"press\" is the path to the event handler in a JavaScript file. Both the \"enabled\" and \"visible\" property accept either static values (true/false), a binding path, like in the example, or another path to a JavaScript function which returns true or false. The \"text\" property is the label of the button.\n\n```\n\"CustomActionSection\" : {\n    \"press\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.messageBox\",\n    \"enabled\": \"{= ${ui>/editMode} !== 'Editable'}\",\n    \"visible\" : true,\n    \"text\": \"{i18n>CustomActionSection}\"\n}\n```\n\nThe following code snippet is the [CustomActions.js](app/featureShowcase/webapp/ext/CustomActions.js) file from the example. \"enabled\" and \"enabledForSingleSelect\" are possible functions for the \"enabled\" property.\n```\nsap.ui.define([\n\t\"sap/m/MessageBox\",\n\t\"sap/ui/core/library\"\n], function(MessageBox, coreLibrary) {\n    \"use strict\";\n\n    return {\n        messageBox: function() {\n            MessageBox.alert(\"Button pressed\");\n        },\n        enabled : function() {\n            return true;\n        },\n        enabledForSingleSelect: function(oBindingContext, aSelectedContexts) {\n            if (aSelectedContexts && aSelectedContexts.length === 1) {\n               return true;\n            }\n            return false;\n         }\n    };\n});\n```\n\n#### Invoking CAP actions out of a Custom Action\n\n<i>Search term:</i> [`#EditFlowAPI`](../../search?q=EditFlowAPI)\n\nIt is also possible to invoke CAP actions out of a JavaScript function using the \"invokeAction\" function of the SAP Fiori elements Edit flow API.\n```\nsap.ui.define([\n\t\"sap/m/MessageBox\",\n\t\"sap/ui/core/library\"\n], function(MessageBox, coreLibrary) {\n    \"use strict\";\n    return {\n\t\tonChangeCriticality: function(oEvent) {\n\t\t\tlet sActionName = \"service1.changeCriticality\";\n\t\t\tlet mParameters = {\n\t\t\t\tcontexts: oEvent.getSource().getBindingContext(),\n\t\t\t\tmodel: oEvent.getSource().getModel(),\n\t\t\t\tlabel: 'Confirm',\t\n\t\t\t\tinvocationGrouping: true \t\n\t\t\t};\n\t\t\tthis.editFlow.invokeAction(sActionName, mParameters); //SAP Fiori elements EditFlow API\n\t\t},\n        ...\n    };\n});\n```\n\n## Header Area List Report\n\n### Enabling Variant Management\n\n<i>Search term:</i> [`\"variantManagement\"`](../../search?q=variantManagement)\n\nVariant Management (saving the filter settings and the personalization of tables) is by default enabled. However with the annotation `\"variantManagement\": \"None\"` it can be disabled in the [manifest.json](app/featureShowcase/webapp/manifest.json).\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            \"entitySet\": \"RootEntities\",\n            \"variantManagement\": \"None\",\n            ...\n        }\n    }\n}\n```\nWhen the Variant Management is disabled, the App title will be shown instead at this place. With the `subTitle` annotation in the [manifest.json](app/featureShowcase/webapp/manifest.json) file, you can change that to a custom name. The corresponding name for the property `appSubTitle` has to be in the [i18n.properties](app/featureShowcase/webapp/i18n/i18n.properties) file within the webapp folder of the app.\n```\n\"sap.app\": {\n    ...\n    \"subTitle\": \"{{appSubTitle}}\",\n    ...\n}\n```\n\n### Define Filters\n<i>Search term:</i> [`#FilterDefault`](../../search?q=FilterDefault), [`#HideFilter`](../../search?q=HideFilter),[`#FilterGrouping`](../../search?q=FilterGrouping), [`#VisibleFilters`](../../search?q=VisibleFilters), `#ValueHelps`, [`#DependentFilter`](../../search?q=DependentFilter)\n\n#### Default Values\n<i>Search term:</i> [`#FilterDefault`](../../search?q=FilterDefault)\n\nWith the annotation `@Common.FilterDefaultValue` default values can be defined, like in [field-control.cds](app/featureShowcase/field-control.cds). This Annotation does not allow complex values and when switching variants, the annotation is no longer considered. For complex values the [UI.SelectionVariant](#selection-variant) annotation is a better solution.\nMore information are available in the [SAP UI5 Dokumentation](https://sapui5.hana.ondemand.com/#/topic/f27ad7bc1f9c4b0d947b1fb18c37e94c)\n#### Hide filters\n<i>Search term:</i> [`#HideFilter`](../../search?q=HideFilter)\n\nTo reduce the amount of available filters in a List Report, properties can be annotated with `@UI.HiddenFilter` to hide them. An example is in the file [field-control.cds](app/featureShowcase/field-control.cds).\n```\nannotate service1.RootEntities {\n    ...\n    fieldWithURLtext @UI.HiddenFilter;\n    ...\n};\n```\n\n#### Filter facets\n<i>Search term:</i> [`#FilterGrouping`](../../search?q=FilterGrouping)\n\nAnother nice feature are `@UI.FilterFacets`, which allow one to structure the available properties of the entity into groups, so that filter adaptation is easier.\n```\nannotate service.RootEntities with @(\n    UI.FilterFacets : [\n        {\n            Target : '@UI.FieldGroup#chartData',\n            Label : '{i18n>chartData}',\n        },\n        {\n            Target : '@UI.FieldGroup#location',\n            Label : '{i18n>location}',\n        },\n    ],\n);\nannotate service.RootEntities with @(\n    UI.FieldGroup #chartData : {\n        Data  : [\n            {Value : integerValue},\n            {Value : targetValue},\n            {Value : forecastValue},\n            {Value : dimensions},\n            {Value : integerValue},\n        ]\n    },\n);\n```\nThe implementation is in the [layout.cds](app/featureShowcase/layout.cds) file.\n#### Selection Fields\n<i>Search term:</i> [`#VisibleFilters`](../../search?q=VisibleFilters)\n\n`@UI.SelectionFields` is the annotation, which allows to specify an array of fields, which should by default be shown in the List Report filter bar as a filter, so that the user does not need to adapt the filters. The annotation is used in the [layout.cds](app/featureShowcase/layout.cds) file.\n```\nannotate service.RootEntities with @(\n    UI.SelectionFields : [\n        field,\n        fieldWithPrice,\n        criticality_code,\n    ],\n);\n```\nFurther information are available in the [UI5 Dokumentation](https://sapui5.hana.ondemand.com/#/topic/4de40b31324e4876a8421f6f642e0140).\n\n#### Mandatory filter fields\n<i>Search term:</i> [`#RequiredFilter`](../../search?q=\"#RequiredFilter\")\n\nWith the annotation `@Capabilities.FilterRestrictions.RequiredProperties` an array of mandatory filter fields can be defined. In the Feature showcase only the property 'stringProperty' is required for demonstration purposes. The annotation can be found in the [capabilities.cds](app/featureShowcase/capabilities.cds) file.\n\n```\nannotate service1.RootEntities with @(\n    ...\n    Capabilities.FilterRestrictions : {\n        ...\n        RequiredProperties : [\n            stringProperty \n        ],\n\n    },\n);\n```\n\n#### Enable semantic dates for filter fields of type Date\n\n<i>since UI5 Version: 1.99.0</i>\n<i>Search term:</i> [`#SemanticDateFilter`](../../search?q=\"#SemanticDateFilter\"), [`useSemanticDateRange`](../../search?q=useSemanticDateRange)\n\nFor filter fields of type Date, semantic dates can be activated with the annotation `@Capabilities.FilterRestrictions.FilterExpressionRestrictions`. The annotation expects an array. Each object is for one field. The \"Property\" value has to be the name of the date field and the \"AllowedExpressions\" value is either 'SingleValue' or 'SingleRange'. \nSingleValue currently gives the options to select a date or select 'Today', 'Yesterday' or 'Tomorrow'.\nSingleRange additionally adds the options 'From/To', 'From', 'To' and 'Year To Date'.\n\n```\nannotate service1.RootEntities with @(\n    Capabilities.FilterRestrictions : {\n        FilterExpressionRestrictions : [\n            {\n                Property : 'validFrom',\n                AllowedExpressions : 'SingleRange'\n            }\n        ],\n        ...\n    },\n);\n```\n\nIf you want to disable semantic dates entirely you can do so, by setting the `useSemanticDateRange` property to false in the manifest.json file. The default value is true. In addition you can specify the default value for semantic date ranges in the manifest. The documentation link below lists all options. Please note, that they have to be fully in uppercase.\n\n```json\n\"RootEntityListReport\": {\n    \"options\": {\n        \"settings\": {\n            \"controlConfiguration\": {\n                \"@com.sap.vocabularies.UI.v1.SelectionFields\": {\n                    \"useSemanticDateRange\":  true,\n                    \"filterFields\": {\n                        \"validFrom\": { \n                            \"settings\": {\n                                \"defaultValues\": [{\"operator\": \"LASTYEARS\", \"values\": [10]}]\n                            }\n                        }\n                    }\n                }\n            },\n        }\n    }\n},\n```\n\nMore information are available in the [SAP UI5 Documentation](https://sapui5.hana.ondemand.com/#/topic/fef65d03d01a4b2baca28983a5449cf7.html).\n\n#### Case insensitive filtering\n\n<i>Search term:</i> [`#CaseInsensitiveFiltering`](../../search?q=\"#CaseInsensitiveFiltering\")\n\nCase insensitive filtering can be activated with the annotation `@Capabilities.FilterFunctions` and the string 'tolower' as part of the array.\nIt can only be applied to the whole service and is then valid for filtering with the filter bar, with table personalization filters and within value helps.\n\n```\nannotate service1 with @(\n    Capabilities.FilterFunctions : [\n        'tolower'\n    ],\n);\n```\n\nIf the annotation does not exists, case sensitive filtering is active and the backend decides on the default behavior.\nThe example is in the [capabilities.cds](app/featureShowcase/capabilities.cds) file.\n\nMore information are available in the [SAP UI5 Documentation](https://sapui5.hana.ondemand.com/sdk/#/topic/609c39a7498541559dbef503c1ffd194.html).\n\n#### Value Help\n<i>Search terms:</i> [](../../search?q=)`#ValueHelps`, [](../../search?q=)`#RadioButtons`\n\nWhile CAP delivers the value help for Code Lists out of the box. For other associations this is not the case. To get a value help for a filter (and for the corresponding field on the Object Page), the entity has to be annotated with `@Common.ValueList`. \n```cds\nannotate schema.RootEntities with{\n    contact @(Common : {\n        Text            : contact.name,\n        TextArrangement : #TextOnly,\n        ValueList       : {\n            Label          : '{i18n>customer}',\n            CollectionPath : 'Contacts',\n            Parameters     : [\n                {\n                    $Type             : 'Common.ValueListParameterInOut',\n                    ValueListProperty : 'ID',\n                    LocalDataProperty : contact_ID\n                },\n                {\n                    $Type: 'Common.ValueListParameterDisplayOnly',\n                    ValueListProperty: 'country_code',\n                },\n                {\n                    $Type: 'Common.ValueListParameterDisplayOnly',\n                    ValueListProperty: 'city',\n                }\n                \n            ]\n        }\n    });\n};\n```\nThe `Label` property will be shown as the title of the value help dialog und the `CollectionPath` property refers to the entity set of the service, which provides the values for the value help. If the value help is more complex and property names do not match or you want to configure, which fields should be visible in the value help, you can provide parameters to the `Parameters` property.\n\n##### Value help as a dropdown\nFor smaller collections of possible values in the value help, it might be a good idea to have a dropdown instead of a dialog to choose the value. This can be achieved with the `@Common.ValueListWithFixedValues` annotation.\n\n##### Value help as radio buttons\nIf you, in addition, annotate the property with `@Common.ValueListWithFixedValues.@Common.ValueListShowValuesImmediately` the value help will not render as a dropdown, but instead with radio buttons. \n```cds\nannotate schema.RootEntities with{\n    criticality_code @(Common : {\n        ValueListWithFixedValues,\n        ValueListWithFixedValues.@Common.ValueListShowValuesImmediately,\n    });\n};\n```\n\nBy default the rendering is vertical and with a [manifest.json](app/featureShowcase/webapp/manifest.json) setting it can be adjusted to horizontal. \n```json\n\"RootEntityListReport\": {\n    \"options\": {\n        \"settings\": {\n            \"controlConfiguration\": {\n                \"@com.sap.vocabularies.UI.v1.FieldGroup#ShowWhenInEdit\": {\n                    \"fields\": {\n                        \"DataField::criticality_code\": {\n                            \"formatOptions\": {\n                                \"radioButtonsHorizontalLayout\": false\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\nRendering as radio buttons is currently only supported for fields on pages and not for fields in action dialogs.\n\nAll value help annotations are in the [value-helps.cds](app/featureShowcase/value-helps.cds) file.\n\n#### Dependent Filtering (Value Help)\n<i>Search term:</i> [`#DependentFilter`](../../search?q=DependentFilter)\n\nDependent filtering can be achieved with an input parameter for the value help. An example would be with countries and regions. The value help for the region should only show regions of the selected country, which is another property of the entity.\n```\nannotate schema.RootEntities with{\n    ...\n    region @(Common : {\n        Text            : region.name,\n        TextArrangement : #TextFirst,\n        ValueListWithFixedValues: true,\n        ValueList       : {\n            Label          : '{i18n>Region}',\n            CollectionPath : 'Regions',\n            Parameters     : [\n                {\n                    $Type             : 'Common.ValueListParameterInOut',\n                    ValueListProperty : 'code',\n                    LocalDataProperty : region_code\n                },\n                {\n                    $Type: 'Common.ValueListParameterOut',\n                    ValueListProperty: 'name',\n                    LocalDataProperty : region.name,\n                },\n                //To only show the connected values\n                {\n                    $Type : 'Common.ValueListParameterFilterOnly',\n                    ValueListProperty : 'country_code',\n                },\n                {\n                    $Type : 'Common.ValueListParameterIn', //Input parameter used for filtering\n                    LocalDataProperty : country_code,\n                    ValueListProperty : 'country_code',\n                },\n                \n            ]\n        }\n    });\n};\n```\nHere the region property (which is an Association to a Code List) is annotated with the `ValueList` annotation. To achieve the filtering, the country_code property from the header is mapped against the country_code property of the region via the `Common.ValueListParameterIn` parameter. The implementation can be found in the [value-helps.cds](app/featureShowcase/value-helps.cds#L71).\n\n#### Dependent filtering (Multi-Input Value Help)\n<i>Search term:</i> [`#MultiValueWithDependentFilter`](../../search?q=MultiValueWithDependentFilter)\n\nDependent filters can also use properties from the parent entity. This is especially useful for multi-input fields, which have a value help. In the example the root entity has a country assigned and multiple regions shall be assigned to the root entity. For that an assignment entity is being used. To only show regions of the selected country a reference to the root entity can be used.\n\n```cds\nannotate schema.AssignedRegions with {\n    region @(Common : {\n        Text            : region.name,\n        TextArrangement : #TextFirst,\n        ValueListWithFixedValues: true,\n        ValueList       : {\n            Label          : '{i18n>Region}',\n            CollectionPath : 'Regions',\n            Parameters     : [\n                {\n                    $Type               : 'Common.ValueListParameterInOut',\n                    ValueListProperty   : 'code',\n                    LocalDataProperty   : region_code\n                },\n                {\n                    $Type               : 'Common.ValueListParameterIn',\n                    LocalDataProperty   : root.country_code,\n                    ValueListProperty   : 'country_code',\n                },\n                \n            ]\n        }\n    });\n}\n```\n\nIn the code snippet the 'LocalDataProperty' refers to the country reference and maps it to the 'country_code' property of the 'Regions' entity, which is the target of the value help.\n\nThe value help itself is annotated on the property within the assignment entity. This is also the target property of the DataField value path.\n\n```cds\nannotate service.RootEntities with @(\n    ...\n    UI.FieldGroup #location             : {\n        Data : [\n            ...\n            {\n                Value : regions.region_code,\n                Label : '{i18n>MultiInputFieldWithVH}'\n            }\n        ]\n    },\n    ...\n)\n```\n\n#### Adding navigation properties\n\n<i>Search term:</i> [`navigationProperties`](../../search?q=navigationProperties), [`#NavigationProperties`](../../search?q=\"#NavigationProperties\")\n\nNavigation properties can be as well added to the filter bar. For this the navigation path has to be added to the `@UI.SelectionFields` annotation.\n```\nannotate service.RootEntities with @(\n    UI.SelectionFields : [\n        ...\n        childEntities1.criticalityValue_code\n    ],\n);\n```\nIf you want to add navigation properties to the \"Adapt Filters\" dialog as filter facets, they have to be referenced in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                ...\n                \"@com.sap.vocabularies.UI.v1.SelectionFields\": {\n                    \"navigationProperties\":  [ \"childEntities1\", \"childEntity2/decimalProperty\" ],\n                    ...\n                }\n            },\n            ...\n        }\n    }\n},\n```\nWhen only the association is referenced, all fields of it will be available in a separate filter facet for the specified association. Defining a path to a specific property of the association, will only add the specified property to the \"Adapt Filters\" dialog.\n\nMore information regarding navigation properties as filter fields are in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/609c39a7498541559dbef503c1ffd194).\n\n#### Custom Filter\n\n<i>Search term:</i> [`customFilter`](../../search?q=customFilter)\n\nCustom filter are useful, when the data value is in a special format, for example a rating. The implementation consists of multiple parts.\nFirst List Report in the [manifest.json](app/featureShowcase/webapp/manifest.json) is extended with the following lines.\nUnder \"controlConfiguration\" the selection fields (\"@com.sap.vocabularies.UI.v1.SelectionFields\") are extended.\nThe \"property\" property is the property of the entity set, which is filtered. The \"template\" property leads to a XML fragment, which is the filter.\nA \"position\" property with \"placement\" and \"anchor\" is also possible. When not given, the custom filter is placed at the end.\nThe name of the custom filter has to be the property name, else it would cause errors.\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                ...\n                \"@com.sap.vocabularies.UI.v1.SelectionFields\": {\n                    \"filterFields\": {\n                        \"starsValue\": {\n                            \"label\": \"{i18n>customFilter}\",\n                            \"property\": \"starsValue\",\n                            \"template\": \"sap.fe.featureShowcase.mainApp.ext.CustomFilter-Rating\"\n                        }\n                    }\n                }\n            },\n            ...\n        }\n    }\n},\n```\n\nThe recommended way is to bind the filter value directly with `value=\"{path: 'filterValues>', type: 'sap.fe.macros.filter.type.Value'}\"` and using a filter value type (Value or Range for example).\nAdditionally format options are possible to use another operator instead of the default 'EQ'.\n```\n<core:FragmentDefinition xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\" xmlns:l=\"sap.ui.layout\">\n\t<!-- Search-Term: \"customFilter\" -->\n\t<HBox alignItems=\"Center\" core:require=\"{handler: 'sap/fe/featureShowcase/mainApp/ext/CustomFilter-Rating'}\" width=\"100%\" >\n\t\t\t<!--     Example for adapting the used operator, using GT (greater than) instead of default EQ -->\n\t\t\t<RatingIndicator\n\t\t\t\tid=\"MyCustomRatingIndicatorId\" maxValue=\"4\" class=\"sapUiTinyMarginBegin\"\n\t\t\t\tvalue=\"{path: 'filterValues>', type: 'sap.fe.macros.filter.type.Value', formatOptions: { operator: 'GE' }}\"\n\t\t\t/>\n\t\t\t<core:Icon src=\"sap-icon://reset\" press=\"handler.onReset\" class=\"sapUiSmallMarginBegin\" />\n\t</HBox>\n</core:FragmentDefinition>\n```\n\nThe following code is an example for a reset function. \"starsValue\" is the property name of the entity set which is filtered.\n```\nsap.ui.define([\"sap/ui/model/Filter\", \"sap/ui/model/FilterOperator\"], function(Filter, FilterOperator) {\n\t\"use strict\";\n\treturn {\n\t\tonReset: function(oEvent) {\n\t\t\tthis.setFilterValues(\"starsValue\");\n\t\t}\n\t};\n});\n```\n\nMore information regarding custom filter are in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/5fb9f57fcf12401bbe39a635e9a32a4e).\n\n### Custom Actions (Global List Report)\n<i>Search term:</i> [`\"CustomActionLRGlobal\"`](../../search?q=CustomActionLRGlobal)\n\nWith extension points custom actions can be added in the header area of the List Report.\n\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"content\" : {\n                \"header\" : {\n                    \"actions\" : {\n                        \"CustomActionLRGlobal\" : {\n                            \"press\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.messageBox\",\n                            \"enabled\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.enabled\",\n                            \"visible\" : true,\n                            \"text\": \"{i18n>CustomActionLRGlobal}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n},\n```\n\nThe custom action itself is described here: [Custom Actions](#custom-actions)\n\n## Content Area List Report\n### Configuring Tables\n#### Actions\n<i>Search term:</i> [`#UnboundAction`](../../search?q=UnboundAction), [`#BoundAction`](../../search?q=BoundAction), [`#SideEffect`](../../search?q=SideEffect), [`#ValueHelpParameter`](../../search?q=ValueHelpParameter), [`\"MenuActions\"`](../../search?q=MenuActions), [`#DynamicCRUD`](../../search?q=DynamicCRUD)\n\nIn CAP, actions can be bound to a specific entity or unbound and just be a part of the service. Bound actions can only be executed, when at least one entity is selected. Unbound actions can be executed anytime.\nIf an action shall be visible, the `UI.DataFieldForAction` has to be added to the `UI.LineItem` annotation of the table. The action is called through the service.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAction',\n            Action : 'service1.changeCriticality',\n            Label : '{i18n>changeCriticality}',\n        },\n        ...\n    ],\n);\n``` \n[layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds)\nWith this default annotation, the action is displayed above the table on the right, with other possible actions. If you want to display the action inline, the property `Inline : true` has to be added. Additionally instead of the action name, an icon can be displayed, if the action is in line.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAction',\n            Action : 'service1.changeProgress',\n            Label : '{i18n>changeProgess}',\n            IconUrl : 'sap-icon://status-critical',\n            Inline : true,\n        },\n        ...\n    ],\n);\n```\nWhile you can add the property `Determining : true`, determining actions are not supported and the action will just disappear from the UI. <br/> The action annotations so far were for bound actions. If you want to add unbound actions, you have to change the action annotation slightly. Instead of referring to `service1.unboundAction` you have to refer to `service1.EntityContainer/unboundAction` in order to have a working unbound action. The other path will display an action on the UI, but it would not work, if you click it.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAction',\n            Action : 'service1.EntityContainer/unboundAction',\n            Label : '{i18n>unboundAction}',\n        },\n        ...\n    ],\n);\n```\n\nWith `@Core.OperationAvailable` actions can by enabled or disabled. This can be done dynamically by using $edmJson for its value, like:\n```\n@Core.OperationAvailable: {$edmJson: {$Path: '/Singleton/enabled'}}\naction unboundAction(@(title : '{i18n>inputValue}')input : String);\n```\n\nThe path can be absolute like in the example pointing to a singleton or also for bound actions relative to the bound context, like:\n\n```\n@(\n    ...\n    Core.OperationAvailable: {$edmJson: {$If: [{$Ge: [{$Path: 'in/integerValue'}, 0]}, true, false]}}\n)\naction changeProgress (\n    ...\n);\n```\n'in' refers to the bound context. Without 'in' the path would refer to an action parameter.\n\n##### Side Effects of actions\n<i>Search term:</i> [`#SideEffect`](../../search?q=SideEffect)\n\nIf your action triggers changes on the entities, you need side effects so that the UI updates automatically. These side effect annotations have to be added to the action.\n```\nentity RootEntities as select from persistence.RootEntities actions {\n    ...\n    @(\n        cds.odata.bindingparameter.name : 'in',\n        Common.SideEffects              : {\n            TargetProperties : ['in/integerValue']\n        }\n    )\n    action changeProgress (@(title : '{i18n>newProgress}', UI.ParameterDefaultValue : 50)newProgress : Integer);\n};\n```\nThe OData binding parameter is needed, in order to refer to the fields of the entity, which need to be updated. These fields are then listed in the array of the `TargetProperties` property of `@Common.SideEffects`.\n##### Value Help for action parameter\n<i>Search term:</i> [`#ValueHelpParameter`](../../search?q=ValueHelpParameter)\n\nOften properties of an entity have value helps, so that creating a new entity is easier and wrong inputs are reduced. Value helps for action parameters are also possible.\n```\nentity RootEntities as select from persistence.RootEntities actions {\n    ...\n    action changeCriticality (\n        @(\n            title         : '{i18n>newCriticality}',\n            UI.ParameterDefaultValue : 0,\n            Common        : {\n                ValueListWithFixedValues : true,\n                ValueList : {\n                    Label          : '{i18n>Criticality}',\n                    CollectionPath : 'Criticality',\n                    Parameters     : [\n                    {\n                        $Type             : 'Common.ValueListParameterInOut',\n                        ValueListProperty : 'code',\n                        LocalDataProperty : newCriticality\n                    },\n                    {\n                        $Type             : 'Common.ValueListParameterDisplayOnly',\n                        ValueListProperty : 'name'\n                    },\n                    ]\n                }\n            }\n        )\n        newCriticality : Integer);\n    ...\n};\n```\nThis can be achieved, by just annotating the parameter with a common valueList. The annotation has to be inline with the parameter.\n\n##### Default Value for action parameter\n<i>Search term:</i> [`#ParameterDefaultValue`](../../search?q=ParameterDefaultValue)\n\nWith the annotation `@UI.ParameterDefaultValue` a default value for the parameter is set.\n```\nentity RootEntities as select from persistence.RootEntities actions {\n    ...\n    action changeProgress (@(title : '{i18n>newProgress}', UI.ParameterDefaultValue : 50)newProgress : Integer);\n};\n```\n\n##### Action Drop down menu\n<i>Search term:</i> [`\"MenuActions\"`](../../search?q=MenuActions)\n\nA dropdown menu to group actions is possible with an annotation in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"@com.sap.vocabularies.UI.v1.LineItem\": {\n                    \"actions\": {\n                        \"MenuActions\": {\n                            \"text\": \"{i18n>MenuButton}\",\n                            \"menu\": [\n                                \"DataFieldForAction::service1.changeCriticality\",\n                                \"DataFieldForAction::service1.EntityContainer::unboundAction\"\n                            ]\n                        }\n                    },\n                    ...\n                },\n                ...\n            }\n        }\n    }\n},\n```\nIn the control configuration of the List Report, the line item annotation of the table (it does not affect other line item definitions which may be used in other table views) has a property `\"actions\"` under which the menu button needs to be added. `\"MenuActions\"` is in this case just the identifier of this specific menu button. The text property is the actual label of the menu button and the `\"menu\"` property contains all actions, which should be included. \"changeCriticality\" is a bound action and can be directly accessed through the service. The unbound action on the other side, needs to be accessed through the EntityContainer. The slash is replaced with two colons in the identifier for the action.\n##### Dynamic CRUD Restrictions\n<i>Search term:</i> [`#DynamicCRUD`](../../search?q=\"#DynamicCRUD\")\n\nThe visibility of the \"Edit\", \"Create\" and \"Delete\" actions can be dynamically adjusted. For example the delete operation can be dependent on a field of the entity, through the annotation `@Capabilities.DeleteRestrictions`. Fixed values are also possible.\n\nSince UI5 Version 1.100 also Singleton are supported as values. \nThe Syntax for Singletons is special, as it can be seen in the code snippet. The path value starts with a '/' followed by the service name, defined in the cds service file, and a '.EntityContainer/'. Afterwards the name of the singleton follows, in the Feature Showcase it is 'Singleton', and the last part is the property path. \n\n```\nannotate service1.RootEntityVariants with @(\n    Capabilities.DeleteRestrictions : {\n        Deletable : deletePossible,\n    },\n    UI.UpdateHidden : updateHidden,\n    UI.CreateHidden: { $edmJson: { $Path: '/service1.EntityContainer/Singleton/createHidden' } },\n);\n```\n[capabilities.cds](app/featureShowcase/capabilities.cds)\n\nWhile `@Capabilities.UpdateRestrictions` would restrict the update possibilities of the entity in the edit mode, e.g. all fields are read only, the \"Edit\" button would not disappear. Instead the `@UI.UpdateHidden` annotation should be used, which when true, hides the \"Edit\" button as intended.\n\n##### Navigation Button\n<i>Search term:</i> [`#NavAction`](../../search?q=NavAction)\n\nA navigation action navigating to an associated entity can be added, through adding the `UI.DataFieldForIntentBasedNavigation` as a line item.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForIntentBasedNavigation',\n            Label : '{i18n>inboundNavigation}',\n            SemanticObject : 'FeatureShowcaseChildEntity2',\n            Action : 'manage',\n            RequiresContext : true,\n            Inline : true,\n            IconUrl : 'sap-icon://cart',\n            Mapping : [\n                {\n                    $Type : 'Common.SemanticObjectMappingType',\n                    LocalProperty : integerValue,\n                    SemanticObjectProperty : 'integerProperty',\n                },\n            ],\n            ![@UI.Importance] : #High,\n        },\n        ...\n    ],\n);\n```\n[layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds) <br/>\n\nThe semantic object and the action are in the [fiori.html](app/fiori.html) file. The application property in this contains the following code snippet:\n```\n\"FeatureShowcaseChildEntity2-manage\": {\n    title: \"ChildEntities2\",\n    description:\"Manage\",\n    additionalInformation: \"SAPUI5.Component=sap.fe.featureShowcase.childEntities2ui\",\n    applicationType: \"URL\",\n    url: \"/featureShowcaseNavigationTarget/webapp\",\n    navigationMode: \"embedded\",\n},\n```\nHere \"FeatureShowcaseChildEntity2\" is the semantic object to be referenced. The second part of the name is the action of the app. As an example you may have the apps \"SalesOrder-manage\", \"SalesOrder-view\" and so on. Semantic object and action have to be divided by a dash.\nThe property `RequiresContext` determines, whether an entry needs to be selected to enable the navigation button or not. If it is set to true, it may be needed, to add the `Mapping` property. This property is an array of mappings between local and semantic object properties and it is needed if local properties should be used to filter in the app of the semantic object, but the property names differ. In this example, the local property 'integerValue' is mapped to the semantic object property 'integerProperty', so when selecting an entity where integerValue equals 22, the navigation would filter for entries where the 'integerProperty' property equals 22 in the semantic object app.  \nIcons can be displayed as the label of the button instead of text, but only if the button is inline. When Icons are displayed, the criticality is being ignored.\n\n##### Critical Actions\n<i>Search term:</i> [`#CriticalAction`](../../search?q=CriticalAction)\n\nWhen an action is annotated with `@Common.IsActionCritical : true`, a popover will appear before invoking the action, asking the user if he/she is sure about invoking the selected action.\n\n```\nannotate service1.criticalAction with @(\n    Common.IsActionCritical : true\n);\n```\n\n##### Message Toasts\n<i>Search term:</i> `#MessageToast`\n\nMessage toasts are shown on the UI when the Backend sends a message with the severity equaling 1. If the severity is higher, a dialog will be shown.\nFor more information regarding the sending of messages from a CAP Backend, please have a look at the [SAP CAP Documentation for messaging](https://cap.cloud.sap/docs/node.js/events#req-msg).\n\n```\nreq.notify(`Critical action pressed`);\n```\n`notify` is the method to send a message with the severity of 1 and `req` is the request received by CAP.\n\n##### Custom Actions (Table List Report)\n<i>Search term:</i> [`\"CustomActionLR\"`](../../search?q=CustomActionLR)\n\nWith extension points custom actions can be added in the table toolbar of the List Report.\n\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"@com.sap.vocabularies.UI.v1.LineItem\": {\n                    \"actions\": {\n                        ...\n                        \"CustomActionLR\" : {\n                            \"press\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.messageBox\",\n                            \"enabled\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.enabledForSingleSelect\",\n                            \"visible\" : true,\n                            \"text\": \"{i18n>CustomActionLR}\"\n                        }\n                    },\n                    ...\n                }\n            },\n            ...\n        }\n    }\n},\n```\n\nThe custom action itself is described here: [Custom Actions](#custom-actions-list-report)\n\n#### Setting the Table Type\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"tableSettings\"`](../../search?q=tableSettings), [`\"ResponsiveTable\"`](../../search?q=ResponsiveTable), [`\"GridTable\"`](../../search?q=GridTable)\n\nSupported table types are the <i>ResponsiveTable</i> and the <i>GridTable</i>. The table type of the List Report can be adjusted in the [manifest.json](app/featureShowcase/webapp/manifest.json) file (Line 146).\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"@com.sap.vocabularies.UI.v1.LineItem\": {\n                    ...\n                    \"tableSettings\": {\n                        \"type\": \"ResponsiveTable\",\n                        ...\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n\n#### Multiple Views\n<i>Search term:</i> [`#multipleViews`](../../search?q=`#multipleViews`), [`\"views\"`](../../search?q=views), `[`#multipleViews`](../../search?q=`#multipleViews`), [\"quickVariantSelection\"`](../../search?q=quickVariantSelection)\n\nWith multiple views, you can display different selections and/or presentations of the entity set, without the need to set the filter manually. \n##### Single table mode\n<i>Search term:</i> [`\"quickVariantSelection\"`](../../search?q=quickVariantSelection)\n\nIn the single table mode all views are displayed in the same table. You can switch between the views through a segmented button next to the table title. If you define more than three views, a drop down menu will be displayed instead. A restriction of the single table mode is, that you can change the selected entities (`@UI.SelectionVariant`), but not the presentation (`@UI.SelectionPresentationVariant`) of the entities, nor the entity set itself.\nTo implement the single table mode, you need to define a selection variant and refer to it in the manifest.json file, through using its qualifier (e.g. #variant1).\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"@com.sap.vocabularies.UI.v1.LineItem\": {\n                    ...\n                    \"tableSettings\": {\n                        ...\n                        \"quickVariantSelection\": {\n                            \"paths\": [\n                                {\n                                    \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant1\"\n                                },\n                                {\n                                    \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant2\"\n                                }\n                            ],\n                            \"hideTableTitle\": false,\n                            \"showCounts\": true\n                        }\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n}\n```\nFurther you can define, if each view should show the amount of rows it displays and if the table title should be hidden for all views. By default the `\"showCounts\"` property is false, as additional $count requests impact the performance.\n\n##### Multiple table mode\n<i>Search term:</i> [`\"views\"`](../../search?q=views)\n\nIn multiple table mode, a icon tab bar will be rendered above the table to switch between the views. Each view has its own table with its own table tool bar and variant management (if activated), but only the table of the selected tab will be shown. Here you have the possibility to use the `@UI.SelectionPresentationVariant` annotation and there is the possibility to define another entity set to be displayed in a tab.\nThe single and multiple table mode do not exclude each other completely. When using a SelectionVariant as the annotation for a view of the multiple table mode, the different views of the single table mode can be additionally applied. When using a `UI.SelectionPresentationVarian` in the multiple table mode for the view, you cannot apply the view from the single table mode.\nTo implement the multiple table mode, you need to refer to the Selection- or SelectionPresentationVariants via the qualifier in the [manifest.json](app/featureShowcase/webapp/manifest.json) file. Each view has to have a unique `\"key\"` property for the tab. The `\"annotationPath\"` property refers to the qualifier. There is again the option to display the counts of each view, but it affects the performance.\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"views\": {\n                \"paths\": [\n                    {\n                        \"key\": \"tab1\",\n                        \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant1\"\n                    },\n                    {\n                        \"key\": \"tab2\",\n                        \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant2\"\n                    },\n                    {\n                        \"key\": \"tab3\",\n                        \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionPresentationVariant#SelectionPresentationVariant\"\n                    },\n                    {\n                        \"key\": \"tab4\",\n                        \"entitySet\": \"RootEntityVariants\",\n                        \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant3\"\n                    }\n                ],\n                \"showCounts\": false\n            },\n            ...\n        }\n    }\n}\n```\nWhen you want to have a view with a different entity set, you just need to add the `\"entitySet\"` property to a path entry in the [manifest.json](app/featureShowcase/webapp/manifest.json). The referenced entity name equals the entity name in the CAP Service. The Selection- or SelectionPresentationVariant has to be annotated to the different entity set. When displaying a different entity set, the counts of each view will be automatically shown, ignoring the `showCounts` annotation. Filters from the main entity set will be applied, when the property exist in the other entity set, else they will be ignored. There is no option to add filters for unique properties of the other entity set. \nMore information are available in the [SAP UI5 Documentation](https://sapui5.hana.ondemand.com/#/topic/b6b59e4a4c3548cf83ff9c3b955d3ba3).\n\n##### Selection Variant\n<i>Search term:</i> [`#SVariant`](../../search?q=SVariant)\n\nWith a selection variant, you can define how the fields of an entity set should be sorted. The \"Text\" property is the title of the view and the property \"SelectOptions\" contains all sorting parameters.\n```\nannotate service.RootEntities with @(\n    UI.SelectionVariant #variant1 : {\n        Text : '{i18n>SVariant1}',\n        SelectOptions : [\n            {\n                PropertyName : criticality_code,\n                Ranges : [\n                    {\n                        Sign : #I,\n                        High : 2,\n                        Option : #BT,\n                        Low : 0,\n                    },\n                ],\n            },\n        ],\n    },\n    ...\n);\n```\nThe \"Option\" property supports the following options: Equal To (EQ), Between (BT), Less than or equal to (LE), Greater than or equal to (GE), Not equal to (NE), Greater than (GT) and Less than (LT).\nThe annotations are in the [layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds) file.\n\n##### Selection Presentation Variant\n<i>Search term:</i> [`#SPVariant`](../../search?q=SPVariant)\n\nWith a selection presentation variant a selection of entities and a presentation can be defined. The `PresentationVariant` currently supports the properties `SortOrder` and `Visualizations`. The selection and presentation variants are basically identical to their stand-alone counterparts, only the selection variant here does not include the text property.\n```\nannotate service.RootEntities with @(\n    UI.SelectionPresentationVariant #SelectionPresentationVariant : {\n        Text : '{i18n>SelectionPresentationVariant}',\n        SelectionVariant : {\n            $Type : 'UI.SelectionVariantType',\n            SelectOptions : [\n                {\n                    PropertyName : criticality_code,\n                    Ranges : [\n                        {\n                            Sign : #I,\n                            Option : #GT,\n                            Low : 0,\n                        },\n                    ],\n                },\n            ],\n        },\n        PresentationVariant :{\n            SortOrder : [\n                {\n                    Property : fieldWithPrice,\n                    Descending : false,\n                },\n            ],\n            Visualizations : [\n                '@UI.LineItem#simplified',\n            ],\n        },\n    },\n);\n```\nYou can refer to a specialised `UI.LineItem` collection, when you define one with a qualifier. The view with this `UI.SelectionPresentationVariant` will then have other columns.\nMore information are available in the [SAP UI5 Documentation](https://sapui5.hana.ondemand.com/#/topic/37aeed74e17a42caa2cba3123f0c15fc).\n\n#### Creation Dialog\n<i>Search term:</i> [`#CreationDialog`](../../search?q=CreationDialog)\n\nWhen creating a new entity, a creation dialog will pop up for all fields, which are annotated with `@Core.Immutable`, because fields with this annotation cannot be updated and the value has to be provided during creation.\n\n```\nannotate service1.RootEntities {\n    ...\n    stringProperty @Core.Immutable;\n    ...\n};\n```\n\n#### Defining the Default Sort Order\n<i>Search term:</i> [`#DefaultSort`](../../search?q=DefaultSort)\n\nUse the `UI.PresentationVariant` annotation to define a default sort order. The attribute `Visualizations` defines, on which line items the sort order should be applied.\n```\nannotate service.RootEntities with @(\n    UI.PresentationVariant :{\n        SortOrder : [\n            {\n                Property : field,\n                Descending : false,\n            },\n        ],\n        Visualizations : [\n            '@UI.LineItem',\n        ],\n    },\n);\n```\nWithout a sort order defined, the values are ascending. The implementation is in the File: [layout.cds](app/featureShowcase/layout.cds)\n\n#### Enabling Multiple Selection in Tables\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"selectionMode\"`](../../search?q=selectionMode)\n\nMultiple Selection can be enabled in the List Report with the property `\"selectionMode\": \"Multi\"` in the table Settings. Other possible values are: Auto, Single or None. More Information about these are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/116b5d82e8c545e2a56e1b51b8b0a9bd).\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"@com.sap.vocabularies.UI.v1.LineItem\": {\n                    ...\n                    \"tableSettings\": {\n                        \"type\": \"ResponsiveTable\",\n                        \"selectionMode\": \"Multi\",\n                        ...\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n#### Handling Semantic Key Fields\n<i>Search term:</i> [`#SemanticKey`](../../search?q=SemanticKey)\n\nSemantic Key fields can be defined, with the annotation `Common.SemanticKey`, which consists of an Array of fields from the entity. The given fields will be displayed in bold, and when possible the editing status will be displayed. Currently this is only possible for the default DataField.\n```\nannotate service.RootEntities with @(\n    Common.SemanticKey : [ field ],\n);\n```\n[layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds)\n\n#### Highlighting Line Items Based on Criticality\n<i>Search term:</i> [`#LineItemHighlight`](../../search?q=LineItemHighlight)\n\nLine items can be highlighted based on there criticality with the annotation `@UI.Criticality`. The annotation has to be a part of the `@UI.LineItem` annotation.\n```\nannotate service.RootEntities with @(\n    UI.LineItem.@UI.Criticality : criticality_code,\n);\n```\n#### Adding a Rating Indicator to a Table\n<i>Search term:</i> [`#RatingIndicator`](../../search?q=RatingIndicator)\n\nTo add a rating indicator (stars) to the table, the entity needs to be annotated with `@UI.DataPoint`. The Value Property of the annotation defines, how many stars are visible. Values between x.25 and x.74 are displaced as a half star. The target property defines, how many stars are possible.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.DataPoint #ratingIndicator : {\n        Value : starsValue,\n        TargetValue : 4,\n        Visualization : #Rating,\n        Title : '{i18n>ratingIndicator}',\n        ![@Common.QuickInfo] : 'Tooltip via Common.QuickInfo',\n    },\n    ...\n);\n```\nAfter creating the data point, it has to be added to the `@UI.LineItem` annotation. For that the UI.DataFieldForAnnotation type is used and the target is the data point.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAnnotation',\n            Label : '{i18n>ratingIndicator}',\n            Target : '@UI.DataPoint#ratingIndicator',\n            ![@UI.Importance] : #Low,\n        },\n        ...\n    ],\n);\n```\nThe annotations are in the [layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds) file.\n#### Adding a Progress Indicator to a Table\n<i>Search term:</i> [`#ProgressIndicator`](../../search?q=ProgressIndicator)\n\nTo add a progress indicator to a table, the entity needs to be annotated with `@UI.DataPoint`. The value property defines the current progress and the target property the maximum progress. Additionally a criticality can be given, if wanted.\n```\nannotate service.RootEntities with @(\n    UI.DataPoint #progressIndicator : {\n        Value : integerValue,\n        TargetValue : 100,\n        Visualization : #Progress,\n        Title : '{i18n>progressIndicator}',\n        //Criticality: criticality,\n    },\n    ...\n);\n```\nAfter creating the data point, it has to be added to the `@UI.LineItem` annotation. For that the UI.DataFieldForAnnotation type is used and the target is the data point.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAnnotation',\n            Label : '{i18n>progressIndicator}',\n            Target : '@UI.DataPoint#progressIndicator',\n            ![@UI.Importance] : #Low,\n        },\n        ...\n    ],\n);\n```\nThe annotations are in the [layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds) file.\n\n#### Adding a field with a tooltip to a Table\n<i>Search term:</i> [`#ToolTip`](../../search?q=ToolTip)\n\nFields can have a tooltip in the List Report through a work around.\nFirst a data point is created, only with the property 'Value' and the annotation '@Common.QuickInfo', which defines the displayed tool tip.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.DataPoint #fieldWithTooltip : {\n        Value : dimensions,\n        ![@Common.QuickInfo] : '{i18n>Tooltip}',\n    },\n);\n```\nSecondly the data point is added as a line item with the '@UI.DataFieldForAnnotation' type to the table.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAnnotation',\n            Target : '@UI.DataPoint#fieldWithTooltip',\n            Label : '{i18n>fieldWithToolTip}',\n        },\n        ...\n    ],\n);\n```\n\n#### Adding a Smart Micro Chart to a Table\n<i>Search term:</i> [`#MicroChart`](../../search?q=MicroChart)\n\nTo add a smart micro chart to a table you have again to define a `@UI.DataPoint`. In the case of a radial chart, the properties value and target value are mandatory and the criticality is optional.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.DataPoint #radialChart : { \n        Value : integerValue,\n        TargetValue : targetValue,\n        Criticality : criticality_code,\n    },\n    ...\n);\n```\nThe data point needs to be referenced in an `@UI.Chart` annotation in the measure attributes. The chart type has to be \"#Donut\" for a radial chart and Measures and MeasureAttributes are mandatory.\n```\nUI.Chart #radialChart : {\n    Title : '{i18n>radialChart}',\n    Description : '{i18n>ThisIsAMicroChart}',\n    ChartType : #Donut,\n    Measures : [integerValue],\n    MeasureAttributes : [{\n            $Type : 'UI.ChartMeasureAttributeType',\n            Measure : integerValue,\n            Role : #Axis1,\n            DataPoint : '@UI.DataPoint#radialChart',\n    }]\n},\n```\nThe chart is then the target of a `DataFieldForAnnotation` in the `@UI.LineItem` annotation, to be shown in the table.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAnnotation',\n            Target : '@UI.Chart#radialChart',\n            Label   : '{i18n>radialChart}',\n        },\n        ...\n    ],\n);\n```\nThe annotations of the example are in the [layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds) file.\n#### Adding a Contact Quick View to a Table\n<i>Search term:</i> [`#Contact`](../../search?q=Contact)\n\nTo have a data field which shows a contact with a contact quick view, the contact quick view needs to be implemented first. An Example would be:\n```\nannotate service1.Contacts with @(\n    Communication.Contact : {\n        fn   : name, //full name\n        kind : #org,\n        tel  : [{\n            uri  : phone,\n            type : #preferred\n        }],\n        adr  : [{\n            building : building,\n            country  : country.name,\n            street   : street,\n            locality : city,\n            code     : postCode,\n            type     : #preferred\n        }],\n    }\n);\n```\nThere are more supported properties for the Contact, which are listed in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/a6a8c0c4849b483eb10e87f6fdf9383c.html).\nThis contact card then needs to be a target of a DataFieldForAnnotation, which itself is a port of the `@UI.LineItem` annotation, to be shown in the table.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAnnotation',\n            Target : 'contact/@Communication.Contact',\n            Label : '{i18n>contactQuickView}'\n        },\n        ...\n    ],\n);\n```\nThe contact card is referenced through the contact attribute of the entity.\nThe annotations of the example are in the [layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds) file. The contact card starts in Line 761.\n#### Adding a Quick View Facet to a Table\n<i>Search term:</i> [`#QuickView`](../../search?q=QuickView)\n\nA quick view facet is a pop up, when you click on an entry in a column and get more information. Typically it is used in combination with associations to one, where the association name is displayed in the column and with a click on it, more information about the association entity can be consumed. To enable a quick view facet, the association entity needs to be annotated with `@UI.QuickViewFacet`. It is an array of reference facets, where you can reference field groups (a group of properties) to be shown in the quick view. For a better looking header of the quick view, the association entity gets typically also annotated with `@UI.HeaderInfo`.\n```\nannotate service1.ChildEntities2 with @(\n    UI.FieldGroup #data : {\n        Label : '{i18n>ChildEntity2}',\n        Data : [\n            {Value : field2},\n            {Value : integerProperty},\n            {Value : field4},\n        ],\n    },\n);\n```\n```\nannotate service1.ChildEntities2 with @(\n    UI.HeaderInfo :{\n        TypeName : '{i18n>ChildEntity2}',\n        TypeNamePlural : '{i18n>ChildEntity2.typeNamePlural}',\n        Title          : {\n            $Type : 'UI.DataField',\n            Value : '{i18n>ChildEntity2}',\n        },\n        Description    : {\n            $Type : 'UI.DataField',\n            Value : field,\n        },\n        ImageUrl : '',\n        TypeImageUrl : 'sap-icon://blank-tag',\n    },\n);\n```\n```\nannotate service1.ChildEntities2 with @(\n    UI.QuickViewFacets : [\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : '@UI.FieldGroup#data',\n        }\n    ],\n);\n```\nThe last step is, that a `UI.DataField` has to be added to the `@UI.LineItem` annotation. The value of the data field is the key attribute and then the quick view facet will be automatically visible.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataField',\n            Value : association2one_ID,\n            Label : '{i18n>ChildEntity2}',\n            ![@UI.Importance] : #High,\n        },\n        ...\n    ],\n);\n```\nThe annotations of the example are in the [layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds) file.\nAdditionally the `@Common.Text` and `@Common.TextArrangement` might be used, to replace the ID value with a name property, so that the column is easier to understand.\n```\nassociation2one @title : '{i18n>ChildEntity2}' @Common.Text : association2one.field @Common.TextArrangement : #TextOnly;\n```\nThe annotations are in the [labels.cds](app/featureShowcase/labels.cds) file.\n##### Links to the apps of the entity\n<i>Search term:</i> [`FeatureShowcaseChildEntity2`](../../search?q=FeatureShowcaseChildEntity2), [`#Navigation`](../../search?q=Navigation)\n\nThe quick view facet also shows links to the apps of the entity, when the entity is annotated with `@Common.SemanticObject`.\n```\nassociation2one @Common.SemanticObject : 'FeatureShowcaseChildEntity2';\n```\nThe semantic object is the application name in the [html file](app/fiori.html). The application property in this contains the following code snippet:\n```\n\"FeatureShowcaseChildEntity2-manage\": {\n    title: \"ChildEntities2\",\n    description:\"Manage\",\n    additionalInformation: \"SAPUI5.Component=sap.fe.featureShowcase.childEntities2ui\",\n    applicationType: \"URL\",\n    url: \"/featureShowcaseNavigationTarget/webapp\",\n    navigationMode: \"embedded\",\n},\n```\nHere \"FeatureShowcaseChildEntity2\" is the semantic object to be referenced. The second part of the name is the action of the app. As an example you may have the apps \"SalesOrder-Manage\", \"SalesOrder-View\" and so on. Semantic object and action have to be divided by a dash.\nThe description of the app in the html file is the name of the app in the quick view facet. In the deployed version with a SAP WorkZone the subtitle of the app is used.\n\n#### Adding Multiple Fields to one Column in Responsive Tables\n<i>Search term:</i> [`#MultiFieldsCol`](../../search?q=MultiFieldsCol)\n\nMultiple fields can be in one column, if a field group is added to table with the UI.DataFieldForAnnotation.\nFirst you have to define the field group.\n```\nannotate service.RootEntities with @(\n    UI.FieldGroup #AdminData       : {\n        Data  : [\n            {Value : createdAt},\n            {Value : createdBy},\n            {Value : modifiedAt},\n            {Value : modifiedBy},\n        ]\n    },\n    ...\n);\n```\nSecondly you have to add a DataField For Annotation to the `@UI.LineItem` annotation.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAnnotation',\n            Target : '@UI.FieldGroup#AdminData', \n            Label : '{i18n>adminData}',\n            ![@UI.Importance] : #High,\n        },\n        ...\n    ],\n);\n```\n#### Adding Images to a table\n<i>Search term:</i> [`#Image`](../../search?q=Image)\n\nImages are typically the first column in a table and help to visually guide the user. An image can be added to a table by just adding a normal data field to the line items.\n```\nannotate service.RootEntities with @(\n    UI.LineItem : [\n        {\n            $Type : 'UI.DataField',\n            Value : imageUrl,\n            @UI.Importance : #High,\n        },\n        ...\n    ],\n);\n```\nThe special thing is just, that the property, which contains the image url has to be annotated with `@UI.IsImageURL`. The example is annotated in the [labels.cds](app/featureShowcase/labels.cds) file.\n#### Adding Currency or UoM Fields to a table\n<i>Search term:</i> [`#Units`](../../search?q=Units)\n\nThe special thing about currency or unit of measure fields is, that they have an additional field with the unit. In order to not have to add both properties to the table, and may risk, that through personalisation one might be not visible, the property with the value can be annotated with the unit.\nFor units of measure the annotation is ` @Measures.Unit`. For currencies the annotation is `@Measures.ISOCurrency` and for percentage value the annotation is `@Measures.Unit : '%'` .\nThe examples from the feature showcase are in the [labels.cds](app/featureShowcase/labels.cds) file.\n\n#### Adding a link to a table\n\n<i>Search term:</i> [`#Link`](../../search?q=Link)\n\nWith a `UI.DataFieldWithUrl` a link can be added to the table. The 'Value' property is the visible text and the 'Url' is the target.\n\n```cds\n@UI.LineItem : [\n    {\n        $Type               : 'UI.DataFieldWithUrl',\n        Url                 : fieldWithURL, //Target, when pressing the text\n        Value               : fieldWithURLtext, //Visible text\n        Label               : '{i18n>dataFieldWithURL}',\n        ![@UI.Importance]   : #Medium,\n    },\n]\n```\nSince UI5 1.129.0 the 'Value' property can also be annotated to determine how the link opens.\n\n```cds\nannotate service.RootEntities with {\n    fieldWithURLtext @HTML5.LinkTarget : '_blank';\n}\n```\n\nThe annotation is documented [here](https://sap.github.io/odata-vocabularies/vocabularies/HTML5.html#LinkTarget).\n\n#### Add custom column (Extensibility)\n<i>Search term:</i> [`#CustomColumn`](../../search?q=CustomColumn)\n\nTo fulfill business requirements, there might be the need, to add custom columns to a table. With the SAP Fiori elements extension points this is possible.\nFirst the additional column needs to be created als a xml fragment. This fragment should be in a separate folder of the webapp. In this example, the fragment contains a label which consists of the validFrom and validTo property of the entity.\n```\n<core:FragmentDefinition xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\">\n        <Label text=\"{validFrom} - {validTo}\"/>\n</core:FragmentDefinition>\n```\nThis label shall be visible as an additional column. For this the manifest.json file needs to be adjusted.\n```\n\"RootEntityListReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"@com.sap.vocabularies.UI.v1.LineItem\": {\n                    ...\n                    \"columns\": {\n                        \"CustomColumn\": {\n                            \"key\": \"customColumnLR\",\n                            \"header\": \"{i18n>validityPeriodLR}\",\n                            \"template\": \"sap.fe.featureShowcase.mainApp.ext.CustomColumn-DateRangeLR\",\n                            \"availability\": \"Adaptation\",\n                            \"horizontalAlign\": \"Center\",\n                            \"width\": \"auto\",\n                            \"properties\": [\n                                \"validFrom\",\n                                \"validTo\"\n                            ],\n                            \"position\": {\n                                \"placement\": \"After\",\n                                \"anchor\": \"DataField::fieldWithCriticality\"\n                            }\n                        }\n                    }\n                },\n                ...\n            },\n            ...\n        }\n    }\n}\n```\nThe columns of the line item property need to be extended with the additional field. The key property needs to be unique and the template refers to the xml fragment. The path consists of two parts. The first one is the namespace of the application (sap.fe.featureShowcase.mainApp), the second one is the navigation to the fragment within the webapp folder of the app (.ext.CustomColumn-DateRangeLR). The `\"availability\"` property defines, whether the column is visible or not. Possible values are \"Default\", \"Adaption\" or \"Hidden\". The `\"properties` property defines, which properties should be used, when sorting is available, to sort. The given properties have to be part of the entity and cannot be navigation properties.\nLastly `\"position\"` defines, were the column should be added in the table. For \"position\" there are the options \"Before\" or \"After\" and the \"anchor\" has to ba an existing data field of the table, for example \"DataField::fieldWithCriticality\".\nAdditional information are available in the [SAP UI5 Documentation](https://sapui5.hana.ondemand.com/#/topic/d525522c1bf54672ae4e02d66b38e60c).\n\n<br/>\n\n# [Object Page](https://experience.sap.com/fiori-design-web/object-page/)\n\n## General Features Object Page\n\n### Annotations for data fields\n#### Communication properties\n<i>Search term:</i> [`#CommunicationFields`](../../search?q=CommunicationFields)\n\nTo display emails and phone numbers as a link, they are annotated with `@Communication.IsEmailAddress` or `@Communication.IsPhoneNumber`\n\n```\nannotate schema.RootEntities with{\n    ...\n    email                   @title : '{i18n>email}'                          @Communication.IsEmailAddress;\n    telephone               @title : '{i18n>telephone}'                      @Communication.IsPhoneNumber;\n    ...\n```\n\n#### Time and Date\n<i>Search term:</i> [`#TimeAndDate`](../../search?q=TimeAndDate)\n\nSAP Fiori elements provides out of the box support for displaying and editing dates and times, as well as time stamps. No annotations are needed, the properties just need to have the corresponding data type.\n```\naspect rootBasis : {\n    ...\n    validFrom   : Date;\n    validTo     : DateTime;\n    time        : Time;\n    timeStamp   : Timestamp;\n    ...\n};\n```\n\nSince UI5 1.129.0 you can use `@UI.DateTimeStyle` to modify how the date is displayed.\n\n```cds\nannotate service.RootEntities with {\n    validTo @UI.DateTimeStyle : 'short'\n}\n```\n\nAllowed values are 'short', 'medium', 'long' and 'full'.\n\n#### Multi line text\n<i>Search terms:</i> `#MultiLineText`, `\"formatOptions\"`\n\nWith the annotation `@UI.MultiLineText` longer Strings are displayed in multiple lines.\n```\nannotate schema.RootEntities with{\n    ...\n    description             @title : '{i18n>description}'                    @UI.MultiLineText;\n    ...\n};\n```\n\nAdditionally the maximum number of lines can be defined in the [manifest.json](app/featureShowcase/webapp/manifest.json). The data field which is annotated with the `@UI.MultiLineText` annotation is the qualifier. The format option \"textLinesDisplay\" defines how many lines are displayed in the read only mode and \"textLinesEdit\" defines it correspondingly for the edit mode. \"textMaxLines\" defines how many lines are maximal possible, if lesser are used, lesser are displayed.\nAnother option for \"textMaxCharactersDisplay\" is \"Infinity\", to display the text completely and for \"textExpandBehaviorDisplay\" \"InPlace\", to expand the text on the page. \"InPlace\" is the default option.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                ...\n                \"@com.sap.vocabularies.UI.v1.FieldGroup#Section\": {\n                    \"fields\": {\n                        \"DataField::description\": {\n                            \"formatOptions\": {\n                                \"textLinesDisplay\": 1,\n                                \"textLinesEdit\": 3\n                            }\n                        },\n                        \"DataField::description_customGrowing\": {\n                            \"formatOptions\": {\n                                \"textMaxLines\": \"5\",\n                                \"textMaxCharactersDisplay\": 400,\n                                \"textExpandBehaviorDisplay\" : \"Popover\"\n                            }\n                        }\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n\nMore information are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/1.94.1/#/topic/c18ada4bc56e427a9a2df2d1898f28a5.html).\n\n#### Placeholder values\n<i>Search term:</i> [`#Placeholder`](../../search?q=Placeholder)\n\nWith `@UI.Placeholder` a placeholder value can be defined, for when the field is in edit mode.\n```\nannotate schema.RootEntities with {\n    ...\n    region @title : '{i18n>region}' @UI.Placeholder : 'Select a region';\n    ...\n};\n```\nThe value can also be a property path.\n\n## Header Area Object Page\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"anchorBarVisible\"`](../../search?q=anchorBarVisible)\n\nBy default, the header of an Object Page  and the anchor bar are enabled. Both can be disabled with the SAP Fiori tools or in the manifest.json.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"content\": {\n                \"header\": {\n                    \"anchorBarVisible\": true,\n                    \"visible\": true,\n                    ...\n                },\n                ...\n            }\n        }\n    }\n},\n```\n\n### Title and Subtitle\n\n<i>Search term:</i> [`#HeaderInfo`](../../search?q=HeaderInfo)\n\nThe title and subtitle of an Object Page are defined with the annotation `@UI.HeaderInfo`.\n```\nannotate service.RootEntities with @(\n    UI.HeaderInfo :{\n        TypeName : '{i18n>RootEntities}',\n        TypeNamePlural : '{i18n>RootEntities.typeNamePlural}',\n        Title          : {\n            $Type : 'UI.DataField',\n            Value : field,\n        },\n        Description    : {\n            $Type : 'UI.DataField',\n            Value : '{i18n>RootEntities}',\n        },\n        ImageUrl : imageUrl,\n        TypeImageUrl : 'sap-icon://sales-order',\n    },\n);\n```\n[layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds).\nThe \"TypeName\" is the Title and it is displayed next to the SAP Logo in header bar on the Object Page.\nThe \"TypeNamePlural\" will be shown, if all entities are shown in a table on the parent Object Page (this is not the case in the example).\nThe \"Title\" of the Object Page, displayed in the actual header on the left side in bold. It should display a language-dependent product text in SAP back-end systems.\nThe \"Description\" is beneath the \"Title\" and displays normally the product title in SAP back-end systems.\nIf the optional \"ImageUrl\" property is given, then the picture will be visible on the left side of the \"Title\" and \"Description\". If no url is given for the \"ImageUrl\", but \"TypeImageUrl\" is defined, it will be displayed instead.\n\n#### Dynamic title or subtitle \n\n<i>Search term:</i> [`#ODataConcat`](../../search?q=ODataConcat)\n\nIt is possible to use the edmJson function `odata.concat` in the `@UI.HeaderInfo` annotation for the \"Title\" and \"Description\" values to concat multiple references together.\n\n```cds\nannotate service.ChildEntities1 with @(\n    UI.HeaderInfo : {\n        ...\n        Description     : {\n            Value : {$edmJson: {\n                $Apply : [\n                    'Using odata.concat - Field: ',\n                    {$Path: 'field'}\n                ],\n                $Function : 'odata.concat'\n            }},\n        },\n        ...\n    },\n);\n```\n\nIn this sample a string is concatenated to the value of the 'field' property. More complex scenarios, using the \"$If\" are also possible, like:\n\n```cds\nannotate service.ChildEntities1 with @(\n    UI.HeaderInfo : {\n        ...\n        Description     : {\n            Value : {$edmJson: {\n                $Apply : [\n                    'Using odata.concat - Field: ',\n                    {$If: [\n                        {$Eq: [{$Path: 'field'}, 'child entity 1']},\n                        {$Path: 'field'},\n                        'Other child entities'\n                    ]}\n                ],\n                $Function : 'odata.concat'\n            }},\n        },\n        ...\n    },\n);\n```\n\n### Header Facets\n\n<i>Search term:</i> [`#HeaderFacets`](../../search?q=HeaderFacets)\n\nThe header facets are a collection of facets which are displayed in the header of an Object Page. Both `UI.ReferenceFacet` and `UI.CollectionFacet` are supported. The facets are added to the `@UI.HeaderFacets` annotation. Collection facets need to have an ID, to work properly.\n```\nannotate service.RootEntities with @(\n    UI.HeaderFacets : [\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : '@UI.DataPoint#fieldWithPrice',\n        },\n        {\n            $Type : 'UI.CollectionFacet',\n            Facets : [\n                ...\n            ],\n        },\n        ...\n    ],\n\n```\n#### Plain Text\n\n<i>Search term:</i> [`#PlainText`](../../search?q=PlainText)\n\nPlain text can be displayed, by adding a normal data field to a field group and use this field group as a target of a reference facet.\n```\nannotate service.RootEntities with @(\n    UI.HeaderFacets : [\n        ...\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : '@UI.FieldGroup#plainText',\n            Label : '{i18n>plainText}'\n        },\n    ],\n);\n```\n```\nannotate service.RootEntities with @(\n    UI.FieldGroup #plainText : {\n        Data  : [\n            {Value : description}\n        ]\n    },\n);\n```\n[layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds)\nAdditionally the used property of the entity in the field group has to be annotated with `@UI.MultiLineText`.\n```\ndescription     @UI.MultiLineText;\n```\n[labels.cds](app/featureShowcase/labels.cds)\n\n#### Header Field Group Facet\n\n<i>Search term:</i> [`#HeaderFieldGroup`](../../search?q=HeaderFieldGroup)\n\nField groups can be part of a header.\n```\nannotate service.RootEntities with @(\n    UI.HeaderFacets : [\n        ...\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : '@UI.FieldGroup#HeaderData',\n            Label : '{i18n>HeaderData}'\n        },\n        ...\n    ],\n);\n```\nSupported types for the data property of the field group in a header, are the normal `UI.DataField` and the `UI.DataFieldForAnnotation`. A quick view contact card can be displayed, through the DataFieldForAnnotation. A quick view facet can be display, by just adding the key as a data field. Both implementations are identical, to how they would be added as a line item in a List Report.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.FieldGroup #HeaderData       : {\n        Data  : [\n            {Value : field},\n            {Value : fieldWithCriticality, Criticality : criticality_code},\n            {Value : fieldWithUoM},\n            {Value : association2one_ID},\n            {\n                $Type : 'UI.DataFieldForAnnotation',\n                Target : 'contact/@Communication.Contact',\n                Label   : '{i18n>contact}',\n            },\n        ]\n    },\n    ...\n);\n```\n\n##### Custom Field\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"CustomFieldHeaderOP\"`](../../search?q=CustomFieldHeaderOP)\n\nWith extension points, it is possible to add custom fields to existing field groups. Therefore the manifest.json file needs to be adapted.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                ...\n                \"@com.sap.vocabularies.UI.v1.FieldGroup#HeaderData\": {\n                    \"fields\": {\n                        \"CustomFieldHeaderOP\": {\n                            \"label\": \"{i18n>validityPeriodOP}\",\n                            \"template\": \"sap.fe.featureShowcase.mainApp.ext.CustomField-DateRange\",\n                            \"position\": {\n                                \"placement\": \"After\",\n                                \"anchor\": \"DataField::field\"\n                            }\n                        }\n                    }\n                }\n            },\n            ...\n        }\n    }\n},\n```\nUnder control configuration an existing field group is extended through adding a fields to the \"fields\" property. The template is the path to the xml fragment. For the position.placement the value \"Before\" and \"After\" are possible. Other data fields of the field group can be used as an anchor.\n\n#### Address Facet\n\n<i>Search term:</i> [`#AddressFacet`](../../search?q=AddressFacet)\n\nThe `@Communication.Address` annotation of an entity can be directly displayed. For this the label property of the annotation is used, therefore the label property needs to be fully formatted. Linebreaks can be achieved with '\\n'. \n```\nannotate service.RootEntities with @(\n    UI.HeaderFacets : [\n        ...\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : 'contact/@Communication.Address',\n            Label : '{i18n>Address}'\n        },\n        ...\n    ],\n);\n```\n```\nannotate service1.Contacts with @(\n    ...\n    Communication.Address : {\n        ...\n        label : addressLabel,\n        ...\n    }\n);\n```\nIn this example the label is generated through a CAP function in the [service.js](srv/service.js) file.\n\n#### Data Points\n\n<i>Search term:</i> [`#DataPoint`](../../search?q=DataPoint)\n\nA data point represent a single point of data. Typically it is a number, but it can also be textual, like a status value.\n```\nannotate service.RootEntities with @(\n    UI.HeaderFacets : [\n        ...\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : '@UI.DataPoint#progressIndicator',\n        },\n        ...\n    ],\n);\n```\nIf the data point is a number, the default scale and precision can be overridden. More information are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/c2a389a11a704b00886440031a3d43f9).\nThe following types of data points are supported: Rating, Progress and Key value. Data points support tooltips with the annotation `@Common.QucikInfo`. The tooltip can either be a string or a property path.\n##### Rating\n\n<i>Search term:</i> [`#RatingIndicator`](../../search?q=RatingIndicator)\n\nWith the Visualization property set to \"#Rating\" the data point will be displayed as filled stars. The \"TargetValue\" property sets the maximal amount of stars.\nThe value property is the amount of stars, which are filled. Values between x.25 and x.74 are displaced as a half star.\n```\nannotate service.RootEntities with @(\n    UI.DataPoint #ratingIndicator : {\n        Value : starsValue,\n        TargetValue : 4,\n        Visualization : #Rating,\n        Title : '{i18n>ratingIndicator}',\n    },\n);\n```\n\n##### Progress\n\n<i>Search term:</i> [`#ProgressIndicator`](../../search?q=ProgressIndicator)\n\nWith the Visualization property set to \"#Progress\" the data point will be displayed as a bar surrounded by a container. The \"TargetValue\" property is the maximal value. If the value is higher or equals the target value, the container is filled.\nAdditionally a criticality can be defined, which changes the color of the bar and container.\n```\nannotate service.RootEntities with @(\n    UI.DataPoint #progressIndicator : {\n        Value : integerValue,\n        TargetValue : 100,\n        Visualization : #Progress,\n        Title : '{i18n>progressIndicator}',\n        Criticality: criticality,\n    },\n);\n```\n\n##### Key value\n\n<i>Search term:</i> [`#KeyValue`](../../search?q=KeyValue)\n\nA key value data point is the default data point, when the \"Visualization\" property is not specified.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.DataPoint #fieldWithPrice : {\n        Value : fieldWithPrice,\n        Title : '{i18n>fieldWithPrice}',\n    },\n);\n```\n\n#### Micro chart Facet\n\n<i>Search term:</i> [`#OPMicroChart`](../../search?q=OPMicroChart)\n\nA micro chart facet consists of a title, a subtitle, a Microchart control, and a footer. <br/>The following Microchart controls are supported: Area, Bullet, Radial, Column, Line, Harvey, Stacked bar and Comparison micro chart. <br/>The micro chart is defined with the `@UI.Chart` annotation, which then is the target of a ReferenceFacet in the `@UI.HeaderFacets` annotation.\n```\nannotate service.RootEntities with @(\n    UI.HeaderFacets : [\n        ...\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : '@UI.Chart#radialChart',\n        },\n        ...\n    ],\n);\n```\nThe title of the facet is the \"Title\" property of the `@UI.Chart` annotation and the subtitle is the \"Description\" property of the chart.\nIf the \"Value\" property of the data point is a field with unit of measure, the unit will be displayed in the footer.\nCurrently navigation properties are not supported in the `@UI.Chart` annotation and the \"MeasureAttributes\" property of the chart has to be a data point. The `@UI.DataPoint` supports generally the \"Criticality\" and \"CriticalityCalculation\" property, but the support varies between the micro chart types.\nIf the value of the data point is annotated with a unit of measure, the unit will be shown as the footer of the micro chart facet.\n```\nannotate service1.ChartDataEntities {\n    integerValueWithUoM @Measures.Unit : uom_code;\n}\n```\n```\nUI.DataPoint #lineChartWidth : {\n    Value : integerValueWithUoM,\n    MinimumValue : 0,\n    MaximumValue : 100,\n    Criticality : criticality_code,\n},\n```\nIn the following examples, all used properties are mandatory.\n\n##### Area Micro Chart\n\n<i>Search term:</i> [`#microChartArea`](../../search?q=microChartArea)\n\nThe area micro chart is a trend chart, which provides information for the actual and target value for a specified dimension.\nThe displayed values at the bottom of the chart are the boundary values of the dimension. The values above the chart are the boundary values of the measure attribute.\n```\nannotate service.ChartDataEntities with @(\n    UI.Chart #areaChart : {\n        Title : '{i18n>areaChart}',\n        Description : '{i18n>ThisIsAMicroChart}',\n        ChartType : #Area,\n        Dimensions : [\n            dimensions,\n        ],\n        Measures : [\n            integerValue,\n        ],\n        MeasureAttributes : [\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Measure : integerValue,\n                Role : #Axis1,\n                DataPoint : '@UI.DataPoint#areaChart',\n            },\n        ],\n    },\n    ...\n);\n```\nThe criticality calculation of the data point is mandatory, as each value is shown with its threshold (error, warning, acceptance and good) ranges.\n```\nannotate service.ChartDataEntities with @(\n    UI.DataPoint #areaChart : { \n        Value : integerValue,\n        TargetValue : targetValue,\n        CriticalityCalculation :{\n            ImprovementDirection        : #Target,\n            ToleranceRangeLowValue      : areaChartToleranceLowerBoundValue,\n            ToleranceRangeHighValue     : areaChartDeviationUpperBoundValue,\n            DeviationRangeLowValue      : areaChartDeviationLowerBoundValue,\n            DeviationRangeHighValue     : areaChartDeviationUpperBoundValue,\n        },\n    },\n);\n```\n##### Bullet Micro Chart\n\n<i>Search term:</i> [`#microChartBullet`](../../search?q=microChartBullet)\n\nThe bullet chart features a single measure and compares it to one or more other measures (e.g. value with target comparison). Both \"Criticality\" and \"CriticalityCalculation\" are supported, but if both are given \"Criticality\" overrides \"CriticalityCalculation\". The bullet chart does not support the criticality value of 5 (new item).\nThe measures attribute, while it is mandatory, has no effect on the chart.\n```\nannotate service.RootEntities with @(\n    UI.Chart #bulletChart : {\n        Title : '{i18n>bulletChart}',\n        Description : '{i18n>ThisIsAMicroChart}',\n        ChartType : #Bullet,\n        Dimensions : [\n            dimensions\n        ],\n        Measures : [\n            integerValue,\n        ],\n        MeasureAttributes : [\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Measure : integerValue,\n                Role : #Axis1,\n                DataPoint : '@UI.DataPoint#bulletChart',\n            },\n        ],\n    },\n    ...\n);\n```\nThe \"MinimumValue\" property is needed to render the chart properly. The value is the actual bar. The forecast value is the bar in the background with a lower opacity and the target value is the dark line.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.DataPoint #bulletChart : {\n        Value : integerValue,          \n        TargetValue : targetValue,     \n        ForecastValue : forecastValue, \n        Criticality : criticality_code,\n        MinimumValue : 0,              \n    },\n    ...\n);\n```\n\n##### Radial Micro Chart\n\n<i>Search term:</i> [`#microChartRadial`](../../search?q=microChartRadial)\n\nThe radial micro chart displays a single percentage value.\nThe measures attribute, while it is mandatory, has no effect on the chart.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.Chart #radialChart : {\n        Title : '{i18n>radialChart}',\n        Description : '{i18n>ThisIsAMicroChart}',\n        ChartType : #Donut,\n        Measures : [\n            integerValue,\n        ],\n        MeasureAttributes : [\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Measure : integerValue,\n                Role : #Axis1,\n                DataPoint : '@UI.DataPoint#radialChart',\n            },\n        ],\n    },\n    ...\n);\n```\nThe percentage value is the fraction of the value and the target value.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.DataPoint #radialChart : { \n        Value : integerValue,\n        TargetValue : targetValue,\n        Criticality : criticality_code,\n    },\n    ...\n);\n```\nThe unit of measure label will not be rendered, as the chart displays percentage values. Both \"Criticality\" and \"CriticalityCalculation\" are supported, but if both are given \"Criticality\" overrides \"CriticalityCalculation\".\n\n##### Line Micro Chart\n\n<i>Search term:</i> [`#microChartLine`](../../search?q=microChartLine)\n\nThe line chart displays a series of data points as a line. The bottom values are the border values of the dimension. The upper left value is the smallest value of the first measure property and the upper right value is the largest value of the last measure property. The shown unit of measure is from the first entry.\n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.Chart #lineChart : { \n        Title : '{i18n>lineChart}',\n        Description : '{i18n>ThisIsAMicroChart}',\n        ChartType : #Line,\n        Measures : [\n            integerValueWithUoM,\n            targetValue,\n        ],\n        Dimensions : [\n            dimensions,\n            dimensions\n        ],\n        MeasureAttributes : [\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Measure : integerValueWithUoM,\n                Role : #Axis2,\n                DataPoint : '@UI.DataPoint#lineChartWidth',\n            },\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Measure : targetValue,\n                Role : #Axis2,\n                DataPoint : '@UI.DataPoint#lineChartDepth',\n            },\n        ],\n    },\n    ...\n);\n```\nIt is recommended to only use one measure, and a maximum of three measures, if more a required.\nIf the \"Criticality\" property contains a path, then the value of the last data point's \"Criticality\" property determines the color of the line.\n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.DataPoint #lineChartWidth : { \n        Value : integerValueWithUoM,\n        Criticality : criticality_code,\n    },\n    UI.DataPoint #lineChartDepth : { \n        Value : targetValue,\n        Criticality : criticality_code,\n    },\n    ...\n);\n```\n\n##### Column Micro Chart\n\n<i>Search term:</i> [`#microChartColumn`](../../search?q=microChartColumn)\n\nA column chart uses vertical bars to compare values of a dimension.\nThe displayed values at the bottom of the chart are the boundary values of the dimension. The values above the chart are the boundary values of the measure attribute.\n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.Chart #columnChart : { \n        Title : '{i18n>columnChart}',\n        Description : '{i18n>ThisIsAMicroChart}',\n        ChartType : #Column,\n        Measures : [\n            integerValue\n        ],\n        Dimensions : [\n            dimensions\n        ],\n        MeasureAttributes : [\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Measure : integerValue,\n                Role : #Axis1,\n                DataPoint : '@UI.DataPoint#dataPointForChart',\n            }\n        ]\n    },\n    ...\n);\n```\nBoth \"Criticality\" and \"CriticalityCalculation\" are supported, but if both are given \"Criticality\" overrides \"CriticalityCalculation\".\n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.DataPoint #dataPointForChart : {\n        Value : integerValue,\n        Criticality : criticality_code\n    },\n);\n```\n\n##### Harvey Micro Chart\n\n<i>Search term:</i> [`#microChartHarvey`](../../search?q=microChartHarvey)\n\nA harvey chart plots a single measure value against a maximum value. \n```\nannotate service.RootEntities with @(\n    ...\n    UI.Chart #harveyChart : {\n        Title : '{i18n>harveyChart}',\n        Description : '{i18n>ThisIsAMicroChart}',\n        ChartType : #Pie,\n        Measures : [\n            fieldWithPrice\n        ],\n        MeasureAttributes : [\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Role : #Axis1,\n                Measure: fieldWithPrice,\n                DataPoint : '@UI.DataPoint#harveyChart',\n            }\n        ]\n    },\n);\n```\nFor the semantic coloring, only the \"Criticality\" property is supported.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.DataPoint #harveyChart : {\n        Value : fieldWithPrice,\n        MaximumValue : fieldWithUoM,\n        Criticality : criticality_code\n    },\n    ...\n);\n```\n\n##### Stacked Bar Micro Chart\n\n<i>Search term:</i> [`#microChartStackedBar`](../../search?q=microChartStackedBar)\n\nA stacked bar chart uses vertical bars to compare values of a dimension.\nThe displayed values at the bottom of the chart are the boundary values of the dimension. The values above the chart are the boundary values of the measure attribute.\n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.Chart #stackedBarChart : { \n        Title : '{i18n>stackedBarChart}',\n        Description : '{i18n>ThisIsAMicroChart}',\n        ChartType : #BarStacked,\n        Measures : [\n            integerValue\n        ],\n        Dimensions : [\n            dimensions\n        ],\n        MeasureAttributes : [\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Measure : integerValue,\n                Role : #Axis1,\n                DataPoint : '@UI.DataPoint#dataPointForChart',\n            }\n        ]\n    },\n    ...\n);\n```\nBoth \"Criticality\" and \"CriticalityCalculation\" are supported, but if both are given \"Criticality\" overrides \"CriticalityCalculation\".\n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.DataPoint #dataPointForChart : {\n        Value : integerValue,\n        Criticality : criticality_code\n    },\n);\n```\n\n##### Comparison Micro Chart\n\n<i>Search term:</i> [`#microChartComparision`](../../search?q=microChartComparision)\n\nA comparison chart uses three horizontal bars to compare values of a dimension. If more values are defined in the dimension, they will only show up in the tooltip.\nThe displayed values on the left represent the dimension value of each data point. The values on the right are the actual values. If a unit of measure is shown, then it is from the first data point to be plotted.\n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.Chart #comparisonChart : { \n        Title : '{i18n>comparisonChart}',\n        Description : '{i18n>ThisIsAMicroChart}',\n        ChartType : #Bar,\n        Measures : [\n            integerValue\n        ],\n        Dimensions : [\n            dimensions\n        ],\n        MeasureAttributes : [\n            {\n                $Type : 'UI.ChartMeasureAttributeType',\n                Measure : integerValue,\n                Role : #Axis1,\n                DataPoint : '@UI.DataPoint#dataPointForChart',\n            }\n        ]\n    },\n);\n```\nFor semantic coloring, only the \"Criticality\" property is supported. \n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.DataPoint #dataPointForChart : {\n        Value : integerValue,\n        Criticality : criticality_code\n    },\n);\n```\n\n#### Header Custom Facet \n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"CustomHeaderFacet\"`](../../search?q=CustomHeaderFacet)\n\nThrough extension points custom facets can be added to the header. In the Feature Showcase the Item1 Object Page has a custom header facet. The facet itself is a XML fragment, which then gets added through the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n```\n\"childEntities1ObjectPage\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"content\": {\n                \"header\": {\n                    \"facets\": {\n                        \"CustomHeaderFacet\": {\n                            \"template\": \"sap.fe.featureShowcase.mainApp.ext.CustomHeaderFacet-ProcessFlow\",\n                            \"templateEdit\" : \"sap.fe.featureShowcase.mainApp.ext.CustomHeaderFacet-Edit\",\n                            \"stashed\": false,\n                            \"title\": \"{i18n>customHeaderFacet}\",\n                            \"position\": {\n                                \"placement\": \"After\",\n                                \"anchor\": \"FacetWithPercent\"\n                            },\n                            \"flexSettings\": {\n                                \"designtime\": \"not-adaptable-visibility\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n},\n```\nThe \"template\" property is the path to the XML fragment. The property \"stashed\" specifies, whether the facet is directly visible or if the facet is not visible from the beginning, but can be added through the key user adaptation feature. The \"position.anchor\" property is the ID of the anchor facet. The \"flexSettings\" property specifies, which options key users have, when adapting the UI.\nThe \"templateEdit\" property is the path to a fragment, which is then shown during edit mode. It is important to use the \"sap.ui.layout.FormElement\" for structuring the content, because the FormElements will be displayed inside a FormContainer.\nMore information are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/61cf0ee828824903907464c80dd0d88c)\n\n### Object Page Actions\n\n<i>Search term:</i> [`#OPHeaderAction`](../../search?q=OPHeaderAction)\n\nActions for the Object Page in general are referenced in the `@UI.Identification` annotation, which is an array of data fields. The actions are referenced as `UI.DataFieldForAction`. The criticality only supports the values 0 (normal), 1 (red) and 3 (green). For bound actions the Object Page content is passed and for unbound actions, no context is passed. Navigation actions are also possible.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.Identification : [\n        {\n            $Type : 'UI.DataFieldForAction',\n            Action : 'service1.changeCriticality',\n            Label : '{i18n>changeCriticality}',\n            Criticality : criticality_code,\n        },\n        ...\n    ],\n);\n```\nThe example is in the [layouts_RootEntities.cds](app/featureShowcase/layouts_RootEntities.cds) file.\n\n#### Custom Actions (Object Page Header)\n<i>Search term:</i> [`\"CustomActionOPHeader\"`](../../search?q=CustomActionOPHeader)\n\nCustom actions on the Object Page are added in the [manifest.json](app/featureShowcase/webapp/manifest.json) file under \"options\"->\"settings\"->\"content\"->\"header\"->\"actions\".\n\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"content\": {\n                \"header\": {\n                    ...\n                    \"actions\" : {\n                        \"CustomActionOPHeader\" : {\n                            \"press\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.messageBox\",\n                            \"enabled\": \"{= ${ui>/editMode} === 'Editable'}\",\n                            \"visible\" : true,\n                            \"text\": \"{i18n>CustomActionOPHeader}\"\n                        }\n                    }\n                },\n                ...\n            }\n        }\n    }\n},\n```\n\nThe custom action itself is described here: [Custom Actions](#custom-actions-object-page)\n\n### Navigation from Header Facets\n\n<i>Search term:</i> [`\"targetSections\"`](../../search?q=targetSections), [`#InboundNav`](../../search?q=InboundNav), [`\"ExternalNavigation\"`](../../search?q=ExternalNavigation)\n\nIt is possible to define in-page navigation or external navigation for data points, rating & progress indicators or micro chart facets of the header, so that the facet label will be rendered as a link. \n\n#### In-page Navigation\n\n<i>Search term:</i> [`\"targetSections\"`](../../search?q=targetSections), [`#InboundNav`](../../search?q=InboundNav)\n\nFor the In-page navigation the header facet has the \"navigation\" property. \"sectionId\" defines which section of the Object Page is the target und the \"subsectionId\" defines which subsection of this, if the section has subsections. If no subsection ID is specified, the routing goes to the first subsection.\nThe section ID is composed of the application ID + \"--fe::FacetSection::\" and then the ID of the section.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                ...\n                \"@com.sap.vocabularies.UI.v1.DataPoint#progressIndicator\":{\n                    \"navigation\":{\n                        \"targetSections\":{\n                            \"sectionId\": \"sap.fe.featureShowcase.mainApp::RootEntityObjectReport--fe::FacetSection::chartData\",\n                            \"subSectionId\": \"sap.fe.featureShowcase.mainApp::RootEntityObjectReport--fe::FacetSubSection::advancedChartData\"\n                        }\n                    }\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n```\nannotate service.RootEntities with @(\n    UI.Facets : [\n        ...\n        {\n            $Type : 'UI.CollectionFacet',\n            Label : '{i18n>chartData}',\n            ID  : 'chartDataCollection',\n            Facets : [\n                ...\n                {\n                    $Type : 'UI.ReferenceFacet',\n                    Target : '@UI.FieldGroup#advancedChartData',\n                    ID : 'advancedChartData',\n                    ...\n                },\n            ],\n        },\n        ...\n    ],\n);\n```\n\n#### External Navigation\n\n<i>Search term:</i> [`\"ExternalNavigation\"`](../../search?q=ExternalNavigation)\n\nThe external navigation is implemented at two positions in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\nFirst the targeted app needs to be added to the \"crossNavigation\"->\"outbounds\" property.\nIn the example \"ExternalNavigation\" is the qualifier.\n```\n\"sap.app\": {\n    ...\n    \"crossNavigation\": {\n        \"outbounds\": {   )\n            \"ExternalNavigation\": {           \n                \"semanticObject\": \"FeatureShowcaseChildEntity2\",   \n                \"action\": \"manage\"                     \n            }         \n        }\n    }\n},\n```\nSecondly the header facet, which shall offer external navigation needs the \"navigation\" property. \"outbound\" refers to the qualifier, which is the target of the navigation.\n\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                ...\n                \"@com.sap.vocabularies.UI.v1.DataPoint#ratingIndicator\":{\n                    \"navigation\":{\n                        \"targetOutbound\": {               \n                            \"outbound\": \"ExternalNavigation\"\n                        }\n                    }\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n\n### Toggling the Editability of Header Fields\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"editableHeaderContent\"`](../../search?q=editableHeaderContent)\n\nBy default, the header of an Object Page is editable in edit-mode. However with the annotation `\"editableHeaderContent\": false` in the [manifest.json](app/featureShowcase/webapp/manifest.json) file this can be changed, so that the header is non-editable in edit- and display-mode. \n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            \"editableHeaderContent\": false,\n            ...\n        }\n    }\n},\n```\n\n### Adding Subpages\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"childEntities1ObjectPage\"`](../../search?q=childEntities1ObjectPage)\n\nTo add a subpage, two objects are needed in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\nFirst an additional route needs to be added, which specifies the target.\n```\n\"routing\": {\n    \"routes\": [\n        ...\n        {\n            \"pattern\": \"RootEntities({key})/ChildEntities1({key2}):?query:\",\n            \"name\": \"childEntities1ObjectPage\",\n            \"target\": \"childEntities1ObjectPage\"\n        },\n    ],\n    ...\n},\n```\nSecondly the target needs to be specified.\n```\n\"routing\": {\n    ...\n    \"targets\": {\n        ...\n        \"childEntities1ObjectPage\": {\n            \"type\": \"Component\",\n            \"id\": \"childEntities1ObjectPage\",\n            \"name\": \"sap.fe.templates.ObjectPage\",\n            \"options\": {\n                \"settings\": {\n                    ...\n                    \"entitySet\": \"ChildEntities1\",\n                    ...\n                }\n            }\n        },\n        ...\n    }\n},\n```\nTo remove the subpage, the route and the target need to be removed.\nFor actual navigation the name of the navigation route has to be referenced as the \"route\". 'childEntities1' is the attribute name of a child from the entity set of the Object Page.\n\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"navigation\": {\n                \"childEntities1\": {\n                    \"detail\": {\n                        \"route\": \"childEntities1ObjectPage\"\n                    }\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n\n### Enabling the Related Apps Button \n\n<i>Search term:</i> [`\"showRelatedApps\"`](../../search?q=showRelatedApps)\n\nWith the property `\"showRelatedApps\": true` in the [manifest.json](app/featureShowcase/webapp/manifest.json) file, the header action row on the Object Page will include a button \"Related Apps\", if there are any related apps. This enables the user to quickly navigate to related apps. Related apps are those, with the same semantic object.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"showRelatedApps\": true,\n            ...\n        }\n    }\n},\n```\n\n## Content Area Object Page\n\n<i>Search term:</i> [`#OPContentArea`](../../search?q=OPContentArea)\n\nThe content for the content area is added to the `@UI.Facet` annotation, which is an array of `@UI.ReferenceFacet` and `@UI.CollectionFacet`. A reference facet is a single form, chart or table. A collection facet is a collection of reference facets. The reference facets of a collection facet are displayed in a horizontal way with an automatic line-break. The facets of the `@UI.Facet` annotation are displayed either as different tabs or as different topics beneath each other on a single page. This can be changed in the [manifest.json](app/featureShowcase/webapp/manifest.json) file. The possible options are \"Tabs\" or \"Page\". The title of a subsection will not be displayed, when there is only one type of content in the subsection and the title of the subsection is the same as the title of the content. \n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"sectionLayout\": \"Tabs\",\n            ...\n        }\n    }\n},\n```\nImportant is, that collection facets must have an ID, else the UI will not properly work. Collection facets at 3rd level and beyond are not considered and it is recommended to use the Tab representation, if tables are used.\n\nMore information are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/facfea09018d4376acaceddb7e3f03b6).\n\n### General features Content Area Object Page\n\n<i>Search term:</i> [`#DisplayTextAndID`](../../search?q=DisplayTextAndID), [`#HidingContent`](../../search?q=HidingContent), [`#Preview`](../../search?q=Preview), [`#SideContent`](../../search?q=SideContent)\n\n#### Displaying Text and ID for Value help Input fields\n\n<i>Search term:</i> [`#DisplayTextAndID`](../../search?q=DisplayTextAndID)\n\nInstead of showing unreadable long IDs, there is the option to replace the ID with another property value from the entity, for example a name property.\nThe `@Common.Text` annotation specifies, which value should be displayed instead of the original value. The `@Common.TextArrangement` annotation defines how the new text is displayed. The options are '#TextOnly', '#TextFirst', '#TextLast', '#TextSeperate'.\n```\nannotate schema.RootEntities with {\n    ...\n    criticality @Common.Text : criticality.name @Common.TextArrangement : #TextFirst;\n    ...\n};\n```\nThe feature is not limited to replacing IDs, every property can be annotated with it.\n\n#### Hiding features\n\n<i>Search term:</i> [`#HidingContent`](../../search?q=HidingContent)\n\nAny header facet, section or data field can be hidden with the annotation `@UI.Hidden`. The annotation only supports boolean values. Expression bindings, e.g. a '!' are not possible.\n```\nannotate service.RootEntities with @(\n    UI.Facets : [\n        ...\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : '@UI.FieldGroup#ShowWhenInEdit',\n            Label   : '{i18n>ShowWhenInEdit}',\n            ![@UI.Hidden]: IsActiveEntity,\n        },\n        ...\n        \n    ],\n);\n```\n\n#### Preview\n\n<i>Search term:</i> [`#Preview`](../../search?q=Preview)\n\nA reference facet in a collection facet is not shown after loading the app, when the reference facet has the `![@UI.PartOfPreview]` annotation and it is set to false. The sub section is then hidden beneath a \"Show more\" button on the UI.\n```\nannotate service.RootEntities with @(\n    UI.Facets : [\n        ...\n        {\n            $Type : 'UI.CollectionFacet',\n            ...\n            Facets : [\n                ...\n                {\n                    $Type : 'UI.ReferenceFacet',\n                    Target : '@UI.FieldGroup#advancedChartData',\n                    ID : 'advancedChartData',\n                    Label : '{i18n>advancedChartData}',\n                    ![@UI.PartOfPreview] : false\n                },\n            ],\n        },\n        ...\n    ],\n);\n```\n\n#### Side Content\n\n<i>Search terms:</i> [`#SideContent`](../../search?q=SideContent)\n, [`\"sideContent\"`](../../search?q=sideContent)\n\nSections and subsection on an Object Page can have toggleable side content, which is by default not shown.\nSuch side content is defined by a XML fragment and the toggle is done with a custom action which calls the `this.showSideContent(\"[side-content-key]\");` function.\nThe function does not have to be called through a custom action.\nThe side content itself is referenced in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"content\": {\n                ...\n                \"body\": {\n                    ...\n                    \"sections\": {\n                        \"customSectionQualifier\": {\n                            ...\n                            \"sideContent\": {\n                                \"template\": \"sap.fe.featureShowcase.mainApp.ext.SideContent\",\n                                \"equalSplit\":true\n                            }\n                        },\n                        ...\n                        \"childEntities1Section\" : {\n                            \"sideContent\": {\n                                \"template\": \"sap.fe.featureShowcase.mainApp.ext.SideContent\"\n                            }\n                        }\n                    }\n                },\n                ...\n            }\n        }\n    }\n},\n```\nThe \"template\" property references the XML fragment and when \"equalSplit\" is set to true, the side content and the original content will split the screen 1:1, when \"equalSplit\" is false or not defined, the screen will be split 2:1 in favour of the original content.\n\nThe qualifier is the ID of the facet, where the side content should appear. Which qualifier has to be used depends on the structure of the facets, please look into the [documentation](https://sapui5.hana.ondemand.com/#/topic/8e01a463d3984bfa8b23c2270d40e38c), to find which is the right qualifier for your goal.\n\nThis is how the toggle function may look. It is possible to provide a second boolean parameter to, instead of toggle, set the visibility directly.\n```\nsap.ui.define([], function() {\n   \"use strict\";\n\n   return {\n      toggleSideContent: function(oBindingContext) {\n         this.showSideContent(\"customSectionQualifier\");\n      },\n      toggleSideContentItem1: function(oBindingContext) {\n         this.showSideContent(\"childEntities1Section\");\n      }\n   };\n});\n```\n\nThe implementation of custom actions is described in other chapters.\n\n### Forms\n\n<i>Search term:</i> [`#Form`](../../search?q=Form)\n\nA form is a group of fields. The `@UI.FieldGroup` annotation is used to group the fields. The field group is added to the `@UI.Facets` annotation to be displayed.\nThe data of the field group is added to the \"Data\" property. Normal data fields do not need the \"$Type\" property and the \"Value\" property is enough.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.FieldGroup #ShowWhenInEdit       : {\n        Data  : [\n            {Value : field},\n            {Value : fieldWithCriticality},\n            {Value : fieldWithUoM},\n            {Value : fieldWithPrice},\n            {Value : criticality_code},\n            {Value : contact_ID},\n            {Value : association2one_ID},\n        ]\n    },\n    ...\n);\n```\nWhile the field group also has a \"Label\" property, only the \"Label\" property of the reference facet will be used for the UI. <br/> The UI labels of each field are defined in the [labels.cds](app/featureShowcase/labels.cds) file with the `@title` property. This is the recommended way to define UI labels in CAP, but it is also possible to use the \"Label\" property of the data field.\n\n```\nUI.Facets : [\n    ...\n    {\n        $Type : 'UI.ReferenceFacet',\n        Target : '@UI.FieldGroup#ShowWhenInEdit',\n        Label   : '{i18n>ShowWhenInEdit}',\n        ...\n    },\n    ...\n]\n```\n\n#### Connected Fields\n\n<i>Search term:</i> [`#ConnectedFields`](../../search?q=ConnectedFields)\n\nWhen two fields are semantically connected, they can be displayed next to each other under one label, to show their data relation.\nThe connected field is defined with the annotation `@UI.ConnectedFields`. The \"Template\" property is a string, which defines in which order the fields are displayed and what is displayed between both fields, for example a slash. The field references are the qualifiers of the Data property, not the actual names of the property of the entity. The 'Data' property contains both fields. It is important that the field object has the \"$Type\" property set to \"UI.DataField\", else the connected field will not show up. \n```\nUI.ConnectedFields #ConnectedDates :{\n    Label : '{i18n>ConnectedField}',\n    Template : '{integerValue} / {targetValue}',\n    Data : {\n        integerValue : {\n            $Type : 'UI.DataField',\n            Value : integerValue,\n        },\n        targetValue : {\n            $Type : 'UI.DataField',\n            Value : targetValue,\n        },\n    },\n},\n```\nThe connected field is then referenced as a target of a data field for annotation, to be displayed in a form.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.FieldGroup #Section : {\n        Data  : [\n            ...\n            {\n                $Type : 'UI.DataFieldForAnnotation',\n                Target : '@UI.ConnectedFields#ConnectedDates',\n            },\n            ...\n        ]\n    },\n    ...\n);\n```\nCurrently they cannot be rendered in tables or in header facets.\n\n#### Custom Content\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [](../../search?q=)`\"CustomContentFieldGroup\"`\n\nSAP Fiori elements provides the possibility to add custom data fields to forms. The additional field is created as a XML fragment and referenced in the [manifest.json](app/featureShowcase/webapp/manifest.json) file. \nUnder the property \"controlConfiguration\" the field group has to be referenced with its qualifier (e.g. #ShowWhenInEdit). An ID is defined for the custom field, in the example \"DateRange\". The property \"template\" is the namespace + name of the XML fragment and the \"position\" property defines, where the field is inserted. \"placement\" has the valid options \"After\" and \"Before\" and an anchor is another data field which is a part of the field group. Behind the two colons is the value property name of the data field, in this case \"association2one_ID\". \n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                ...\n                \"@com.sap.vocabularies.UI.v1.FieldGroup#timeAndDate\": {\n                    \"fields\": {\n                        \"CustomContentFieldGroup\": {\n                            \"label\": \"{i18n>validityPeriodOP}\",\n                            \"template\": \"sap.fe.featureShowcase.mainApp.ext.CustomField-DatePicker\",\n                            \"position\": {\n                                \"placement\": \"Before\",\n                                \"anchor\": \"DataField::validTo\"\n                            }\n                        }\n                    }\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\nMore information are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/4e49753530ad4a73a44a5f8efac238d6).\n\n#### Form Actions and Navigation\n<i>Search term:</i> [`#FormActionsAndIBN`](../../search?q=FormActionsAndIBN)\n\nForms can have their own actions, which show up in the upper right corner of the section by default. The actions and navigations are just added by adding the corresponding data field (\"DataFieldForAction\" or \"DataFieldForIntentBasedNavigation\") to the \"Data\" array of the field group from the form. If the action should be a part of the form toolbar instead of the section toolbar, the data field needs the additional property \"Inline : true\".\n```\nannotate service.RootEntities with @(\n    ...\n    UI.FieldGroup #Section : {\n        Data  : [\n            ...\n            {\n                $Type : 'UI.DataFieldForIntentBasedNavigation',\n                Label : '{i18n>inboundNavigation}',\n                SemanticObject : 'FeatureShowcaseChildEntity2',\n                Action : 'manage',\n                RequiresContext : true,\n                IconUrl : 'sap-icon://cart',\n                Mapping : [\n                    {\n                        $Type : 'Common.SemanticObjectMappingType',\n                        LocalProperty : integerValue,\n                        SemanticObjectProperty : 'integerProperty',\n                    },\n                ],\n                ![@UI.Importance] : #High,\n            },\n            {\n                $Type : 'UI.DataFieldForAction',\n                Action : 'service1.EntityContainer/unboundAction',\n                Label : '{i18n>formActionEmphasized}',\n                ![@UI.Emphasized]   : true,\n            },\n            {\n                $Type   : 'UI.DataFieldForAction',\n                Action  : 'service1.changeProgress',\n                Label   : '{i18n>formAction}',\n                Inline  : true,\n            },\n        ]\n    },\n    ...\n);\n```\n\n##### Custom Actions (Object Page Section Form)\n<i>Search term:</i> [`\"CustomActionSectionForm\"`](../../search?q=CustomActionSectionForm)\n\nCustom actions can also be added to the section of a form on the Object Page. The qualifier for the section is the annotated ID.\n\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            ...\n            \"content\": {\n                ...\n                \"body\": {\n                    ...\n                    \"sections\": {\n                        \"customSectionQualifier\": {\n                            ...\n                            \"actions\" : {\n                                \"CustomActionSectionForm\" : {\n                                    \"press\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.messageBox\",\n                                    \"enabled\": \"{= ${ui>/editMode} !== 'Editable'}\",\n                                    \"visible\" : true,\n                                    \"text\": \"{i18n>CustomActionSection}\"\n                                },\n                                ...\n                            }\n                        },\n                        ...\n                    }\n                },\n                ...\n            }\n        }\n    }\n},\n```\n\nThe custom action itself is described here: [Custom Actions](#custom-actions-object-page).\n\nIf the action should be part of the form toolbar instead of the section toolbar, the action has to be defined for the fieldgroup and the property \"inline\" has to be true.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                ...\n                \"@com.sap.vocabularies.UI.v1.FieldGroup#Section\": {\n                    ...\n                    \"actions\" : {\n                        \"CustomActionForm\" : {\n                            \"press\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.messageBox\",\n                            \"enabled\": true,\n                            \"visible\" : true,\n                            \"inline\" : true,\n                            \"text\": \"{i18n>CustomActionOPFooter}\"\n                        }\n                    }\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n\n### Table\n\n<i>Search terms:</i> `\"Control\"`, `\"personalization\"`, `\"enableFullScreen\"`, `#OPTableTitle`, `\"quickVariantSelection\"`, `\"creationMode\"`, `\"enableExport\"`\n\nTable sections are most commonly for a child entities or other associated entities. There implementation consists of two parts.\nFirst the associated or child entity needs the `@UI.LineItem` annotation. This defines which fields are displayed.\n```\nannotate service1.ChildEntities3 with @(\n    UI.LineItem :[\n        {\n            $Type : 'UI.DataField',\n            Value : field,\n        },\n    ],\n);\n``` \n\nSecondly the `@UI.LineItem` annotation needs to be a reference facet.\n\n```\nannotate service.RootEntities with @(\n    UI.Facets : [\n        ...\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : 'childEntities3/@UI.LineItem',\n            Label : '{i18n>childEntities3}',\n        },\n        ...\n    ],\n);\n```\n\n#### Enable Variant Management Object Page\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"Control\"`](../../search?q=Control)\n\nTo enable Variant Management for a table on an Object Page, the property \"variantManagement\" needs to be set to \"Control\"` in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"variantManagement\": \"Control\",\n            ...\n        }\n    }\n}\n```\n\n#### Enable Personalization\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"personalization\"`](../../search?q=personalization)\n\nAdditionally you can turn on or off, if the personalization of columns or the sort order of the table should be possible or whether the user can filter the table. \n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"childEntities1/@com.sap.vocabularies.UI.v1.LineItem\": {\n                    \"tableSettings\": {\n                        ...\n                        \"personalization\": {\n                            \"column\": true,\n                            \"sort\": false,\n                            \"filter\": true\n                        },\n                        ...\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n}\n```\nThe annotation is in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n\n#### Enable Full Screen Mode\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"enableFullScreen\"`](../../search?q=enableFullScreen)\n\nWith the annotation `\"enableFullScreen\": true` in the [manifest.json](app/featureShowcase/webapp/manifest.json) file, you get an additional button on the top right of the table, to view the table in a full screen mode.\n\n```\n\"RootEntityObjectReport\": {\n    \"...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"childEntities1/@com.sap.vocabularies.UI.v1.LineItem\": {\n                    \"tableSettings\": {\n                        ...\n                        \"enableFullScreen\": true,\n                        ...\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n\n#### Adding Titles to Object Page Tables\n\n<i>Search term:</i> [`#OPTableTitle`](../../search?q=OPTableTitle)\n\nThe title of an Object Page table is the \"TypeNamePlural\" property of the `@UI.HeaderInfo` annotation.\n```\nannotate service.ChildEntities1 with @(\n    UI.HeaderInfo :{\n        ...\n        TypeNamePlural : '{i18n>childEntities1.typeNamePlural}',\n        ...\n    },\n);\n```\nIf the section title and the table title are identical or the `@UI.HeaderInfo` annotation is not given, the table title will not be displayed. Also if the table is the only content in a subsection and has a title, the subsections title will not be displayed. \n\n#### Adding Segmented Buttons to a Table Toolbar\n\n<i>Search term:</i> [`\"quickVariantSelection\"`](../../search?q=quickVariantSelection)\n\nThe segmented button in the table toolbar is used to switch between different views. If more then 3 views are specified for the table, then the segmented button will be replaced by a dropdown button. The view variants are specified in the [manifest.json](app/featureShowcase/webapp/manifest.json) file in the \"tableSettings\" property of the line item, which is the data source for the table.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"childEntities1/@com.sap.vocabularies.UI.v1.LineItem\": {\n                    \"tableSettings\": {\n                        ...\n                        \"quickVariantSelection\": {\n                            \"paths\": [\n                                {\n                                    \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant1\"\n                                },\n                                {\n                                    \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant2\"\n                                },\n                                {\n                                    \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant3\"\n                                },\n                                {\n                                    \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionVariant#variant4\"\n                                }\n                            ],\n                            \"hideTableTitle\": false,\n                            \"showCounts\": true\n                        },\n                        ...\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\nFurther information on [multiple views](#multiple-views) are in the List Report part.\n\n#### Enabling Inline Creation of Table Entries on Object Page\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"creationMode\"`](../../search?q=creationMode)\n\nThe inline creation mode can be enabled in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\nUnder the table settings the name of the creation mode has to be \"Inline\". The other option is \"NewPage\".\nWith the \"createAtEnd\" property, it can be defined, whether the new row in \"Inline\" mode should be created at the end of the table or at the beginning (first row) of the table.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"childEntities1/@com.sap.vocabularies.UI.v1.LineItem\": {\n                    \"tableSettings\": {\n                        ...\n                        \"creationMode\": {\n                            \"name\": \"Inline\",\n                            \"createAtEnd\": true\n                        },\n                        ...\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n\n#### Using the 'Export to Spreadsheet' Feature\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"enableExport\"`](../../search?q=enableExport)\n\nThe \"Export to Spreadsheet\" feature is enabled on the Object Page, if the copy/paste feature is enabled. Else it is disabled by default. It can be enabled in the [manifest.json](app/featureShowacse/webapp/manifest.json) file for the wanted tables.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"childEntities1/@com.sap.vocabularies.UI.v1.LineItem\": {\n                    \"tableSettings\": {\n                        ...\n                        \"enableExport\": true\n                    },\n                    ...\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\nMore information regarding the functionality and restrictions are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/4bab6f2043814257974b52d4dafe1dcd).\n\n#### Custom Actions (Object Page Section Table)\n\n<i>Search term:</i> [`\"CustomActionOPTableToolbar\"`](../../search?q=CustomActionOPTableToolbar)\n\nCustom actions can also be added to a table toolbar which is part of a section on the Object Page.\n\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"controlConfiguration\": {\n                \"childEntities1/@com.sap.vocabularies.UI.v1.LineItem\": {\n                    ...\n                    \"actions\" : {\n                        \"CustomActionOPTableToolbar\" : {\n                            \"press\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.messageBox\",\n                            \"enabled\": \"{= %{deletePossible} === true}\",\n                            \"visible\" : true,\n                            \"text\": \"{i18n>CustomActionOPTableToolbar (enabled when delete enabled)}\"\n                        }\n                    }\n                },\n                ...\n            },\n            ...\n        }\n    }\n},\n```\n\nThe custom action itself is described here: [Custom Actions](#custom-actions-object-page)\n\n### Chart\n\n<i>Search term:</i> [`#ChartSection`](../../search?q=ChartSection)\n\nAs an alternative to micro charts in the header, charts are also possible as sections. However the implementation is more complex.\n\nFirst the entity, which should be the data source for the chart needs to be prepared by annotating it with `@Aggregation.ApplySupported`\n```\nannotate service1.ChartDataEntities with @(\n    Aggregation.ApplySupported : {\n        Transformations          : [\n            'aggregate',\n            'topcount',\n            'bottomcount',\n            'identity',\n            'concat',\n            'groupby',\n            'filter',\n            'expand',\n            'top',\n            'skip',\n            'orderby',\n            'search'\n        ],\n        Rollup                   : #None,\n        PropertyRestrictions     : true,\n        GroupableProperties : [\n            dimensions,\n            criticality_code\n        ],\n        AggregatableProperties : [\n            {\n                $Type : 'Aggregation.AggregatablePropertyType',\n                Property : integerValue,\n                RecommendedAggregationMethod : 'average',\n                SupportedAggregationMethods : [\n                    'min',\n                    'max',\n                    'average'\n                ],\n            },\n        ],\n    }\n);\n```\n\nSecondly the entity needs the `@Analytics.AggregatedProperties` annotation, which defines which aggregation methods are supported. These should match the aggregation methods defined as supported methods for the aggregatable property.\n\n```\nannotate service.ChartDataEntities with @(\n    Analytics.AggregatedProperties : [\n    {\n        Name                 : 'minAmount',\n        AggregationMethod    : 'min',\n        AggregatableProperty : 'integerValue',\n        ![@Common.Label]     : 'Minimal Net Amount'\n    },\n    {\n        Name                 : 'maxAmount',\n        AggregationMethod    : 'max',\n        AggregatableProperty : 'integerValue',\n        ![@Common.Label]     : 'Maximal Net Amount'\n    },\n    {\n        Name                 : 'avgAmount',\n        AggregationMethod    : 'average',\n        AggregatableProperty : 'integerValue',\n        ![@Common.Label]     : 'Average Net Amount'\n    }\n    ],\n);\n```\n\nAfter that the `@UI.Chart` can be defined. Please note, that the \"Measures\" property is a name of the aggregation methods. If it is just a property of the entity, like \"integerValue\", the chart won't be displayed.\nThe \"Dimensions\" property has the default dimension. The second chart dimension attribute is is the category into which a drill down is possible. <br/>\nThe added actions to the \"Actions\" property are shown in the chart toolbar.\n\n```\nannotate service.ChartDataEntities with @(\n    ...\n    UI.Chart : {\n        Title : '{i18n>chart}',\n        ChartType : #Column,\n        Measures :  [maxAmount],\n        Dimensions : [dimensions],\n        MeasureAttributes   : [{\n                $Type   : 'UI.ChartMeasureAttributeType',\n                Measure : maxAmount,\n                Role    : #Axis1\n        }],\n        DimensionAttributes : [\n            {\n                $Type     : 'UI.ChartDimensionAttributeType',\n                Dimension : dimensions,\n                Role      : #Category\n            },\n            {\n                $Type     : 'UI.ChartDimensionAttributeType',\n                Dimension : criticality_code,\n                Role      : #Category\n            },\n        ],\n        Actions : [\n            {\n                $Type : 'UI.DataFieldForAction',\n                Action : 'service1.EntityContainer/unboundAction',\n                Label : '{i18n>unboundAction}',\n            },\n        ]\n    },\n    ...\n);\n```\n\nLastly the `@UI.Chart` annotation needs to be added as a reference facet to the `@UI.Facets` annotation.\n```\nannotate service.RootEntities with @(\n    UI.Facets : [\n        ...\n        {\n            $Type : 'UI.ReferenceFacet',\n            Target : 'chartEntities/@UI.Chart',\n            Label : '{i18n>chart}'\n        },\n        ...\n    ],\n);\n```\n<br/>\nFor semantic coloring of a dimension, the dimension property is annotated with `@UI.ValueCriticality`, where possible values of the property are matched against a criticality.\n\n```\nannotate service1.ChartDataEntities with {\n    criticality @(\n        UI.ValueCriticality   : [\n            {\n                Value       : 0,\n                Criticality : #Neutral\n            },\n            {\n                Value       : 1,\n                Criticality : #Negative\n            },\n            {\n                Value       : 2,\n                Criticality : #Critical\n            },\n            {\n                Value       : 3,\n                Criticality : #Positive\n            }\n        ]\n    );\n};\n```\n<br/>\nMore information about the chart section are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/653ed0f4f0d743dbb33ace4f68886c4e).\n\n### Custom Section and Subsection\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"customSectionQualifier\"`](../../search?q=customSectionQualifier)\n\nCustom sections and subsections can be also be implemented by adding the wanted XML fragment as a section to the \"body\" property of the \"content\" property in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"content\": {\n                ...\n                \"body\": {\n                    ...\n                    \"sections\": {\n                        \"customSectionQualifier\": {\n                            \"template\": \"sap.fe.featureShowcase.mainApp.ext.CustomSection\",\n                            \"position\": {\n                                \"anchor\": \"Section\",\n                                \"placement\": \"After\"\n                            },\n                            \"title\": \"{i18n>CustomSection}\",\n                            ...\n                        },\n                        ...\n                    }\n                },\n                ...\n            }\n        }\n    }\n},\n```\nThe ID of the custom section has to be unique. The \"template\" property is the path to the XML fragment and the \"position\" property defines where the section is placed. The \"anchor\" of it is an ID of another section and the placement can either be \"Before\" or \"After\".\n\n#### Custom Subsection\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"customSubSectionQualifier\"`](../../search?q=customSubSectionQualifier)\n\nCustom subsections are implemented in a similar way to custom sections. The qualifier for the section is the ID of the collection facet. The subsection is part of the property \"subSections\" and \"template\" is the path to the XML fragment. The string is a combination of the ID from the manifest (\"sap.fe.featureShowcase.mainApp\") and then the path to the fragment in the webapp folder (\"ext\" is the folder, \"CustomSubSection\" is the name of the fragment). The \"visible\" property also accepts binding expressions like `\"enabled=\"{= ${ui>/editMode} === 'Editable'}\"`. When no \"position\" property is given, the fragment is placed at the end.\n\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"content\": {\n                ...\n                \"body\": {\n                    ...\n                    \"sections\": {\n                        ...\n                        \"collectionFacetSection\": {\n                            \"subSections\": {\n                                \"customSubSectionQualifier\": {\n                                    \"template\": \"sap.fe.featureShowcase.mainApp.ext.CustomSubSection\",\n                                    \"title\": \"{i18n>customSubSection}\",\n                                    \"visible\": true\n                                }\n                            }\n                        },\n                        ...\n                    }\n                },\n                ...\n            }\n        }\n    }\n},\n```\n\n## Footer bar\n\n### Determining actions\n\n<i>Search term:</i> [`#DeterminingAction`](../../search?q=DeterminingAction)\n\nDetermining actions are shown in the footer bar of the Object Page. These actions are part of the `@UI.Identification` array. The only difference to actions shown in the header is the additional property `Determining : true`.\n```\nannotate service.RootEntities with @(\n    ...\n    UI.Identification : [\n        ...\n        {\n            $Type : 'UI.DataFieldForAction',\n            Action : 'service1.changeCriticality',\n            Label : '{i18n>changeCriticality}',\n            Determining : true,\n            Criticality : criticality_code,\n        },\n    ],\n);\n```\n\n### Custom Actions (Object Page Footer)\n<i>Search term:</i> [`\"CustomActionOPFooter\"`](../../search?q=CustomActionOPFooter)\n\nOf course, custom actions can also be added to the footer bar of the Object Page.\n\n```\n\"RootEntityObjectReport\": {\n    ...\n    \"options\": {\n        \"settings\": {\n            ...\n            \"content\": {\n                ...\n                \"footer\": {\n                    \"actions\" : {\n                        \"CustomActionOPFooter\" : {\n                            \"press\": \"sap.fe.featureShowcase.mainApp.ext.CustomActions.messageBox\",\n                            \"enabled\": \"{= ${ui>/editMode} !== 'Editable'}\",\n                            \"visible\" : true,\n                            \"text\": \"{i18n>CustomActionOPFooter}\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n},\n```\n\nThe custom action itself is described here: [Custom Actions](#custom-actions-object-page)\n\n## Custom Object Page\n\n<i style=\"color:orange;\">INFO: </i>We recommend that you use [SAP Fiori tools](http://help.sap.com/disclaimer?site=https://help.sap.com/viewer/product/SAP_FIORI_tools/Latest/en-US), which is a set of extensions for SAP Business Application Studio and Visual Studio Code, to configure the app using the Application Modeler tool. <br/>\n<i>Search term:</i> [`\"CustomObjectPage_childEntities3\"`](../../search?q=CustomObjectPage_childEntities3)\n\nWhen navigating from a table to a sub entity, the Object Page for the sub entity can be replaced with a custom one. Two steps are necessary to add a custom Object Page.\nAfter creating a XML fragment as the new Object Page for the sub entity, add a new target in the [manifest.json](app/featureShowcase/webapp/manifest.json) file.\n```\n\"CustomObjectPage_childEntities3\": {\n    \"type\": \"Component\",\n    \"Id\": \"CustomObjectPageView\",\n    \"name\" : \"sap.fe.core.fpm\",\n    \"options\": {\n        \"settings\": {\n            \"viewName\": \"sap.fe.featureShowcase.mainApp.ext.view.CustomObjectPage\",\n            \"entitySet\": \"ChildEntities3\"\n        }\n    }\n}\n```\nThe \"Id\" property should be unique and the \"viewName\" property is the namespace + name of the XML view, which shall be the Object Page.\nThe \"entitySet\" property should be the sub entity, to access the data of it in the XML view.\nIt is very important the the \"type\" is \"Component\" and that the \"name\" is \"sap.fe.core.fpm\", in order to use the Building Blocks and Flexible programming model from SAP Fiori elements.\n<br/>\n\nThe second step is to add the route in the [manifest.json](app/featureShowacse/webapp/manifest.json) to the sub Object Page.\n```\n{\n    \"pattern\": \"RootEntities({key})/childEntities3({key2}):?query:\",\n    \"name\": \"CustomObjectPage_childEntities3\",\n    \"target\": \"CustomObjectPage_childEntities3\"\n}\n```\nThe pattern is the url to the sub Object Page and the target is the qualifier for the Object Page from the targets. The name property should be the same as the target qualifier.\n<br/>\n\nWhen creating a custom Object Page, the Building Blocks from SAP Fiori elements can be used, to speed up the development of custom content and ensures higher consistency. More information about the Building Blocks are available in the [SAP Fiori elements Documentation](https://sapui5.hana.ondemand.com/#/topic/24c1304739dd4f19af0ce2482c4d9bbe).\n\n\n\nHow to obtain support\nCreate an issue in this repository if you find a bug or have questions about the content.\n\nFor additional support, ask a question in SAP Community.\n\n<br/>\n<br/>\n\n# How to obtain support\n\n[Create an issue](https://github.com/SAP-samples/fiori-elements-feature-showcase/issues) in this repository if you find a bug or have questions about the content.\n \nFor additional support, [ask a question in SAP Community](https://answers.sap.com/questions/ask.html).\n\n# License\nCopyright (c) 2021 SAP SE or an SAP affiliate company. All rights reserved. This project is licensed under the Apache Software License, version 2.0 except as noted otherwise in the [LICENSE](LICENSES/Apache-2.0.txt) file.\n",
  "excerpt": "SAP Fiori elements for OData V4 Feature Showcase  [!REUSE status](https://api.reuse.software/info/github.com/SAP-samples/fiori-elements-feature-showcase) !Screenshot <br/> The main focus of this proje...",
  "wordCount": 16259,
  "version": "1.0.0",
  "source": "fiori-showcase",
  "sourceType": "github"
}