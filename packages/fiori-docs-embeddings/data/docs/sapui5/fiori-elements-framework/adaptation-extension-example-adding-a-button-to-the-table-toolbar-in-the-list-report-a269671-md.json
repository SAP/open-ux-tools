{
  "id": "sapui5-adaptation-extension-example-adding-a-button-to-the-table-toolbar-in-the-list-report-a269671-md",
  "title": "Adaptation Extension Example: Adding a Button to the Table Toolbar in the List Report",
  "category": "fiori-elements-framework",
  "path": "adaptation-extension-example-adding-a-button-to-the-table-toolbar-in-the-list-report-a269671.md",
  "lastModified": "2025-09-29T10:06:38.761Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "adaptation",
    "extension",
    "example",
    "adding",
    "button",
    "the",
    "table",
    "toolbar",
    "list",
    "report",
    "a269671"
  ],
  "headers": [
    "Adaptation Extension Example: Adding a Button to the Table Toolbar in the List Report",
    "Prerequisites",
    "Procedure"
  ],
  "content": "<!-- loioa269671fc49e4c75920c108961bf31f2 -->\n\n# Adaptation Extension Example: Adding a Button to the Table Toolbar in the List Report\n\nIn this example, you add a button to the table toolbar in the list report and extend it to filter only the records which have a price that is greater than or equal to 1000.\n\n\n\n<a name=\"loioa269671fc49e4c75920c108961bf31f2__prereq_u32_mjk_kfb\"/>\n\n## Prerequisites\n\n> ### Note:  \n> This topic is currently only applicable to SAP Fiori elements for OData V2.\n\nYou have performed the steps described in [Extending Delivered Apps Using Adaptation Extensions](extending-delivered-apps-using-adaptation-extensions-52fc48b.md).\n\n\n\n## Procedure\n\n1.  Select the table tool bar and choose *Add Fragment*.\n\n    ![](images/Add_Fragment_e13933b.png)\n\n2.  Under *Target Aggregation*, select *content* and choose your preferred index value. Choose *Create New* to create the fragment. If the fragment is already there, you can search for it.\n\n    ![](images/Searchfragment_978b253.png)\n\n3.  Enter a fragment name, for example, `FilterPriceButton`, and choose *Create*.\n\n4.  Write the following code in the auto-generated `FilterPriceButton.fragment.xml` file. Note that the bold code needs a supporting function in the extension controller. This is described in the next step.\n\n    > ### Sample Code:  \n    > ```\n    > <core:FragmentDefinition xmlns:core='sap.ui.core' xmlns='sap.m'>\n    > <Button id=\"PriceBtnID\" text=\"Filter Price\" press=\".extension.ProdMan.AdaptProject.ListReportExtension.handleFilterPricePress\"></Button>\n    > </core:FragmentDefinition>\n    > ```\n\n    > ### Note:  \n    > `\".extension.ProdMan.AdaptProject.ListReportExtension.handleFilterPricePress\"` consists of the following elements that are connected with a dot \\(.\\).\n    > \n    > `.extension`: Required according to the UI adaptation tool guidelines\n    > \n    > `ProdMan.AdaptProject`: Name of the project\n    > \n    > `ListReportExtension`: Controller extension file name\n    > \n    > `handleFilterPricePress`: Function in the controller extension file\n\n5.  Create a controller extension. Select the table toolbar as described under step 1 and choose *Extend with Controller*.\n\n    ![](images/Extend_with_controller_0328780.png)\n\n6.  Enter the controller name, for example, `ListReportExtension`, and choose *Extend*.\n\n    The system generates the controller extension file `ListReportExtension.js`.\n\n    This auto-generated file contains predefined life-cycle functions under the *Override* block. All extensibility functions provided by SAP Fiori elements should be consumed inside *Override*. The custom-defined functions should be consumed outside the *Override* block.\n\n    To complete the example, copy and paste the code shown below to `ListReportExtension.js`.\n\n    > ### Note:  \n    > `handleFilterPricePress` is a custom-defined function and `addFilters` is the extensibility function provided by SAP Fiori elements.\n\n    > ### Sample Code:  \n    > In this example, there is a property named *Price* in your list report entity type.\n    > \n    > ```\n    > /**\n    > *@controller Name: sap.suite.ui.generic.template.ListReport.view.ListReport,\n    > *@viewId:STTA_MP::sap.suite.ui.generic.template.ListReport.view.ListReport::STTA_C_MP_Product\n    > */\n    > sap.ui.define([\"sap/ui/core/mvc/Controller\", \"sap/ui/core/mvc/ControllerExtension\"], function (Controller, ControllerExtension) {\n    > return ControllerExtension.extend(\"ProdMan.AdaptProject.ListReportExtension\", {\n    >  \n    > \n    > handleFilterPricePress : function() {\n    >      this.iPriceRestriction = \"1000\";\n    >      var oExtensionAPI = this.base.templateBaseExtension.getExtensionAPI();\n    >      oExtensionAPI.rebindTable(); \n    > },\n    > //override an existing method of the Main.controller\n    > override: {\n    > //adding a life cycle method\n    > /**\n    > * Called when a controller is instantiated and its View controls (if available) are already created.\n    > * Can be used to modify the View before it is displayed, to bind event handlers and do other one-time initialization.\n    > * @memberOf src.client.uiadaptation\n    > */\n    > onInit: function () {\n    > },\n    > /**\n    > * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered\n    > * (NOT before the first rendering! onInit() is used for that one!).\n    > * @memberOf src.client.uiadaptation\n    > */\n    > onBeforeRendering: function () {\n    > },\n    > /**\n    > * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.\n    > * This hook is the same one that SAPUI5 controls get after being rendered.\n    > * @memberOf src.client.uiadaptation\n    > */\n    > onAfterRendering: function () {\n    > },\n    > /**\n    > * Called when the Controller is destroyed. Use this one to free resources and finalize activities.\n    > * @memberOf src.client.uiadaptation\n    > */\n    > onExit: function () {\n    > },\n    > \"templateBaseExtension\": {\n    > addFilters : function(fnAddFilter, sControlId){\n    > if(this.iPriceRestriction){\n    > fnAddFilter(this, new sap.ui.model.Filter(\"Price\", \"GE\", this.iPriceRestriction));\n    > }\n    > }\n    > }\n    > }\n    > });\n    > });\n    > ```\n\n7.  In the adaptation editor, choose the *Preview* tab page and choose *Go*. Check the value in the *Price* field for all records.\n\n8.  Choose *Filter Price* and check the value in the *Price* field for the filtered records.\n\n    ![](images/Customextension_preview_8c525dd.png)\n\n\n",
  "excerpt": "<!-- loioa269671fc49e4c75920c108961bf31f2 --> Adaptation Extension Example: Adding a Button to the Table Toolbar in the List Report In this example, you add a button to the table toolbar in the list r...",
  "wordCount": 687,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}