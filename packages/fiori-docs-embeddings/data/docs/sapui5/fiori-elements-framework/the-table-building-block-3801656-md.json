{
  "id": "sapui5-the-table-building-block-3801656-md",
  "title": "The `Table` Building Block",
  "category": "fiori-elements-framework",
  "path": "the-table-building-block-3801656.md",
  "lastModified": "2025-09-29T10:06:38.867Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "the",
    "table",
    "building",
    "block",
    "3801656"
  ],
  "headers": [
    "The `Table` Building Block",
    "API",
    "Influencing the Table Request Dynamically",
    "Triggering the Creation of a New Document Within a Table"
  ],
  "content": "<!-- loio3801656db27b4b7a9099b6ed5fa1d769 -->\n\n# The `Table` Building Block\n\nThe `Table` building block provides an easy way to instantiate a table based on an `entitySet` or a specific navigation property.\n\n\n\nYou can instantiate the building block by referencing the building block namespace within a fragment enabled for building block usage.\n\n> ### Sample Code:  \n> ```\n> <macros:Table xmlns:macro=\"sap.fe.macros\" metaPath=\"/MyEntitySet\"/>\n> <macros:Table xmlns:macro=\"sap.fe.macros\" metaPath=\"MyNavProperty\"/>\n> <macros:Table xmlns:macro=\"sap.fe.macros\" metaPath=\"MyNavProperty/@com.sap.vocabularies.UI.v1.LineItem\"/>\n> ```\n\nThis instantiates the actual control tree that corresponds to this building block.\n\nYou can use the `Table` building block inside custom sections, custom subsections, and custom pages.\n\nYou can use the `Table` building block to add bound and unbound actions, to group actions as menu buttons, to add custom columns, and to specify the create options for the table. For example, you have the following options:\n\n-   Define the placement of the action relative to an anchor.\n\n    You can explore and work with the coding yourself. Check out our live example in the flexible programming model explorer at [Table Customization](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tableCustoms).\n\n-   Specify a bound action by using the `requiresSelection` property.\n\n    By default, the action is unbound.\n\n-   Define menu actions and contained actions using the `ActionGroup` building block.\n\n-   Specify the create options and the related parameters for the table using the `creationMode` parameter. For more information about `TableCreationOptions`, see the [API Reference](https://ui5.sap.com//#/api/sap.fe.macros.table.TableCreationOptions).\n\n    Check out our live example in the flexible programming model explorer at [Table - Edit Mode](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tableEdit).\n\n\n> ### Sample Code:  \n> XML annotation\n> \n> ```xml\n> <macros:Table metaPath=\"@com.sap.vocabularies.UI.v1.LineItem\" readOnly=\"true\" id=\"LineItemTablePageCustomActions\"> <creationMode name=\"InlineCreationRows\" inlineCreationRowsHiddenInEditMode=\"true\" />  </macros:Table>\n>      <macros:actions>\n>           <macros:Action\n>                key=\"customAction\"\n>                text=\"My Custom Action\"\n>                press=\".onPressAction\"\n>                placement=\"After\"\n>                anchor=\"DataFieldForAction::Service.toggleBoolean\"\n>                requiresSelection=\"true\"\n>           />\n>           <macros:ActionGroup text=\"Grouped Actions\" placement=\"After\" anchor=\"customAction\">\n>                <macros:Action text=\"Menu Action 1\" press=\".onPressMenuAction\" />\n>                <macros:Action text=\"Menu Action 2\" press=\".onPressMenuAction\" />\n>           </macros:ActionGroup>\n>      </macros:actions>\n> </macros:Table>\n> ```\n\nFor a complete list of the available properties and aggregations, see the [API Reference](https://ui5.sap.com/#/api/sap.fe.macros.Table).\n\n> ### Note:  \n> The properties or aggregations defined at the manifest level aren't supported with the `Table` building block. They must be defined at the building-block level.\n\nYou can link the `Table` building block to a `FilterBar` that is defined in the same view or to a different one by referencing the ID of the `FilterBar`. This ID can be a local or a global one.\n\n```\n<Panel headerText=\"Table in Display Mode with FilterBar\">\n     <macros:FilterBar metaPath=\"@com.sap.vocabularies.UI.v1.SelectionFields#SF1\" id=\"FilterBar\" />\n     <macros:Table metaPath=\"@com.sap.vocabularies.UI.v1.LineItem\" displayMode=\"true\" id=\"LineItemTable\" filterBar=\"FilterBar\" />\n</Panel>\n```\n\nCheck out our live example in the flexible programming model explorer at [Table - FilterBar](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tableFilterBar) and [Custom View with BuildingBlock Table](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/customElements/customElementsOverview/customViewWithMacroTableContent).\n\nYou can use the `getPresentationVariant()` and `setPresentationVariant()` methods to programmatically get and set the presentation variants corresponding to the `Table` building block. Similarly, the `getSelectionVariant()` and `setSelectionVariant()` methods allows you to programmatically get and set the selection variants associated with the `Table` building block. The `getSelectionVariant()` method considers the variants that are applied directly to the table and excludes the variants that are applied to a bound model.\n\nCheck out our live example in the flexible programming model explorer at [Table - Interacting via APIs](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tablePublicAPIs).\n\n> ### Note:  \n> The `getSelectionVariant()` and `setSelectionVariant()` methods only work if table personalization is enabled. For more information, see [Enabling Table Personalization](enabling-table-personalization-3e2b4d2.md).\n\nYou can use the `setCurrentVariantID` and `getCurrentVariantID` methods to programmatically set and get the current variant ID corresponding to the `Table` building block. Check out our live example in the flexible programming model explorer at [Table Extensibility](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/controllerExtensions/tableExtensibility).\n\nYou can send and remove messages related to the table by using the `sendMessage` and `removeMessage` methods. Check out our live example in the flexible programming model explorer at [Table Messages](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tableMessages).\n\nIf the entity linked to the table is searchable, the *Search* field is displayed in the toolbar of the table. You can disable the *Search* field using the `isSearchable` parameter. Check out our live example in the flexible programming model explorer at [Table - Settings](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tableCustoms).\n\n\n\n<a name=\"loio3801656db27b4b7a9099b6ed5fa1d769__section_x2c_4vr_j5b\"/>\n\n## API\n\nFor information about the `Table` API, see the [API Reference](https://ui5.sap.com/#/api/sap.fe.macros.Table).\n\n\n\n<a name=\"loio3801656db27b4b7a9099b6ed5fa1d769__section_fg2_qjw_11c\"/>\n\n## Influencing the Table Request Dynamically\n\nBefore a table rebind, you can retrieve the sorting and filters applied to the table as well as the complete binding information. You can also add sorting, filters, and additional properties using the methods on the [`CollectionBindingInfo`](https://ui5.sap.com/#/api/sap.fe.macros.CollectionBindingInfo%23overview) object.\n\nTo do so, first add the `beforeRebindTable` key to the table definition.\n\n> ### Sample Code:  \n> ```\n> <macros:Table\n>     metaPath=\"@com.sap.vocabularies.UI.v1.LineItem\"\n>     readOnly=\"true\"\n>     id=\"LineItemTablePageCustomActions\"\n>     isSearchable=\"false\"\n>     beforeRebindTable=\".tableRefreshed\"\n> >\n> \n> ```\n\nThen, implement the `beforeRebindTable` extension point in the controller extension of the page.\n\n> ### Sample Code:  \n> ```\n> sap.ui.define(\n>     [\"sap/fe/core/PageController\", \"sap/m/MessageBox\", \"sap/ui/model/Filter\", \"sap/ui/model/FilterOperator\", \"sap/ui/model/Sorter\"],\n>     function (PageController, MessageBox, Filter, FilterOperator, Sorter) {\n>         \"use strict\";\n> \n>         return PageController.extend(\"sap.fe.core.fpmExplorer.tableCustoms.Page\", {\n>             tableRefreshed(event) {\n>                 var collectionBindingInfoAPI = event.getParameters(\"collectionBindingInfo\");\n> \n>                 //Add a filter\n>                 var filter = new Filter({\n>                     path: \"BooleanProperty\",\n>                     operator: FilterOperator.EQ,\n>                     value1: false\n>                 });\n>                 collectionBindingInfoAPI.addFilter(filter);\n> \n>                 //Add a sorter\n>                 var sorter = new Sorter(\"ID\", true);\n>                 collectionBindingInfoAPI.addSorter(sorter);\n> \n>                 //Request an additional property to the request\n>                 collectionBindingInfoAPI.addSelect([\"TagStatus\"]);\n>             }\n>         });\n>     }\n> );\n> \n> ```\n\nCheck out our live example in the flexible programming model explorer at [Table - Custom Columns / Actions](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tableCustoms).\n\n\n\n<a name=\"loio3801656db27b4b7a9099b6ed5fa1d769__section_qmg_vvy_bdc\"/>\n\n## Triggering the Creation of a New Document Within a Table\n\nYou can trigger the creation of a document within a table by calling the `createDocument` function with the table reference within the `editFlow` controller extension:\n\n> ### Sample Code:  \n> ```\n> //Get the table API\n> var table = this.getView().byId(\"fe::table::_Child::LineItem::Table\");\n> \n> //Create document \n> this.base.editFlow\n>     .createDocument(table, {\n>         creationMode: coreLibrary.CreationMode.Inline,\n>         createAtEnd: true,\n>         data: {\n>             ChildTitleProperty: \"Child Object Custom Title\",\n>             ChildDescriptionProperty: \"Child Custom Description\"\n>         }\n>     })\n>     .then(function () {\n>         MessageToast.show(\"Custom create action successfully invoked\");\n>     });\n> ```\n\nCheck out our live example in the flexible programming model explorer at [Controller Extensions - Edit Flow](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/controllerExtensions/basicExtensibility).\n\n",
  "excerpt": "<!-- loio3801656db27b4b7a9099b6ed5fa1d769 --> The Table Building Block The Table building block provides an easy way to instantiate a table based on an entitySet or a specific navigation property. You...",
  "wordCount": 992,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}