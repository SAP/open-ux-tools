{
  "id": "sapui5-adapting-the-filter-bar-609c39a-md",
  "title": "Adapting the Filter Bar",
  "category": "fiori-elements-framework",
  "path": "adapting-the-filter-bar-609c39a.md",
  "lastModified": "2025-09-29T10:06:38.763Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "adapting",
    "the",
    "filter",
    "bar",
    "609c39a"
  ],
  "headers": [
    "Adapting the Filter Bar",
    "Additional Features in SAP Fiori Elements for OData V2",
    "Including Navigation Properties",
    "Additional Features in SAP Fiori Elements for OData V4",
    "Including Navigation Properties",
    "Using Case Insensitive Filtering",
    "Adding a *Clear* Button",
    "Moving Filter Fields to the *Adapt Filters* Dialog"
  ],
  "content": "<!-- loio609c39a7498541559dbef503c1ffd194 -->\n\n# Adapting the Filter Bar\n\nYou can adapt the filter bar using additional annotations or configuring the `manifest.json` file.\n\n\n\n<a name=\"loio609c39a7498541559dbef503c1ffd194__section_spb_4vm_kmb\"/>\n\n## Additional Features in SAP Fiori Elements for OData V2\n\nFor information about setting the default filter value, see [Configuring Default Filter Values](configuring-default-filter-values-f27ad7b.md).\n\nFor more information about the smart filter bar API, see [SmartFilterBar](https://ui5.sap.com/#/api/sap.ui.comp.smartfilterbar.SmartFilterBar).\n\n\n\n### Including Navigation Properties\n\nFrom SAPUI5 version 1.126.0 onwards, the filters in the *Adapt Filters* dialog include properties only from the main entity set. The filterable fields from the navigation entities are not added as filters by default. You can add them by configuring the `manifest.json` file. You can choose to add either all properties or a specific property of the navigation entities as filters.\n\nIn the following sample code, you can see that only the `EmailAddress` property from the `Supplier` entity and all filterable properties of the navigation type `DeliveryStatus` \\(except the properties annotated with `Hidden` or `HiddenFilter`\\) are included as filters in the *Adapt Filters* dialog.\n\n> ### Sample Code:  \n> manifest.json\n> \n> ```\n> \"ListReport|C_STTA_SalesOrder_WD_20\": {\n>     \"entitySet\": \"C_STTA_SalesOrder_WD_20\",\n>     \"component\": {\n>         \"name\": \"sap.suite.ui.generic.template.ListReport\",\n>         \"list\": true,\n>         \"settings\": {\n>             \"tableSettings\": {\n> â€¦\n>             },\n>  \n>             \"filterSettings\": {\n>                 \"navigationProperties\": [\n>                     \"to_Supplier/EmailAddress \",\n>                     \"to_DeliveryStatus\"\n>                 ]\n>             }\n>         }\n> ```\n\n\n\n<a name=\"loio609c39a7498541559dbef503c1ffd194__section_q5m_cnn_d4b\"/>\n\n## Additional Features in SAP Fiori Elements for OData V4\n\nThe filter bar only shows filter fields defined using the `@com.sap.vocabularies.UI.v1.SelectionFields` annotation. Additional fields available for adaptation are all direct simple properties of the current entity type.\n\n\n\n### Including Navigation Properties\n\nTo include navigation properties as filters, you can directly define them within the same `UI.SelectionFields` annotation. For more information about the annotation, see the [Annotation for UI.SelectionFields](configuring-filter-bars-4bd7590.md#loio4bd7590569c74c61a0124c6e370030f6__section_rym_zkz_jqb) section in [Configuring Filter Bars](configuring-filter-bars-4bd7590.md).\n\nHowever, if you want to add the navigation properties only within the *Adapt Filters* dialog, use the `navigationProperties` setting in the `manifest.json` file.\n\nThe `navigationProperties` setting is an array of \\(navigation\\) property paths relative to the current entity type. If the path points to a navigation property or a complex property, all simple properties of that type are added to the *Adapt Filters* dialog. If the path points to a simple property, then only this field is available as a filter field within the*Adapt Filters* dialog.\n\n> ### Sample Code:  \n> manifest.json\n> \n> ```\n> \"ListReport\": {\n>     ...\n>     \"options\": {\n>         \"settings\": {\n>             ...\n>             \"controlConfiguration\": {\n>                 ...\n>                 \"@com.sap.vocabularies.UI.v1.SelectionFields\": {\n>                     \"navigationProperties\":  [ \"_DistributionChannel\", \"_Partner/FullName\" ],\n>                     ...\n>                 }\n>             },\n>             ...\n>         }\n>     }\n> },\n> ```\n\n-   All properties of the navigation type `_DistributionChannel` are added to the filter adaptation \\(unless they are marked as `Hidden` or `HiddenFilter`\\)\n\n-   The single property `FullName` of the `Partner` association is added to the filter adaptation \\(unless it is marked as `Hidden` or `HiddenFilter`\\)\n\n\n> ### Note:  \n> You can only define navigation properties with one level. Nested navigation properties aren't supported.\n\n\n\n### Using Case Insensitive Filtering\n\nCase sensitivity in filtering depends on the back end that is consumed by the app:\n\n-   RAP supports case insensitive filtering at DB level.\n\n-   CAP Node.js and CAP Java support case sensitive filtering at DB level by default.\n\n\nTo override this behavior, use the `\"@Org.OData.Capabilities.V1.FilterFunctions\"` annotation defined in the `EntityContainer`. This annotation defines all the filter functions supported by the OData service. An example is shown in the following sample code:\n\n> ### Sample Code:  \n> `FilterFunctions` annotation\n> \n> ```\n> <Annotations Target=\"namespace.EntityContainer\">\n>     <Annotation Term=\"Org.OData.Capabilities.V1.FilterFunctions\">\n>       <Collection>\n>         ....\n>         <String>tolower</String>\n>         ...\n>       </Collection>\n>     </Annotation>\n> </Annotations>\n> ```\n\nSAP Fiori elements for OData V4 checks for the existence of the `tolower` filter function in the service metadata and sets the case sensitivity for filtering as shown in the following table:\n\n**Case Sensitivity for FilterFunction**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\n`FilterFunction`\n\n</th>\n<th valign=\"top\">\n\n`caseSensitive`\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`tolower` exists\n\n</td>\n<td valign=\"top\">\n\nfalse \\(back end is expected to convert all values, both the back-end values and the text provided in the filter fields, to lowercase before comparing for filtering\\)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`tolower` does not exist\n\n</td>\n<td valign=\"top\">\n\ntrue \\(back end decides the default behavior\\)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nNo annotation is configured\n\n</td>\n<td valign=\"top\">\n\nfalse \\(back end is expected to convert all values, both the back-end values and the text provided in the filter fields, to lowercase before comparing for filtering\\)\n\n</td>\n</tr>\n</table>\n\nThis logic is valid for filtering on the following use cases:\n\n-   Filter bar\n\n-   Table personalization filters\n\n-   Filters created from semantic keys\n\n-   Value help dialogs\n\n\n\n\n### Adding a *Clear* Button\n\nYou can add a *Clear* button to the filter bar in the list report by making the following setting for the `showClearButton` in the `manifest.json` file:\n\n> ### Sample Code:  \n> `showClearButton`\n> \n> ```\n> \"SalesOrderManageList\": {\n>     \"options\": {\n>         \"settings\": {\n>             \"controlConfiguration\": {\n>                 \"@com.sap.vocabularies.UI.v1.SelectionFields\": {\n>                     \"showClearButton\": true,\n>                 }\n>             }\n>         }\n>     }\n> }\n> ```\n\nThe functionality of the *Clear* button is as follows:\n\n-   All filter values are cleared when a user clicks the *Clear* button.\n\n    Note that the filter values aren't restored to the default values, but really cleared.\n\n-   If there's an active filter on the *Editing Status*, it is reset to the value *All* when a user clicks the *Clear* button.\n\n\nYou can add further clearing functionality by implementing the controller extension `onAfterClear` as shown in the following sample code:\n\n> ### Sample Code:  \n> `onAfterClear`\n> \n> ```\n> onAfterClear: function (oEvent) {    \n>   var oView = this.getView();        \n>   oView.byId(\"CustomSegmentedButton\").setSelectedKey(\"none\"); \n> }\n> ```\n\n\n\n### Moving Filter Fields to the *Adapt Filters* Dialog\n\nYou can move the explicitly included filter fields in the filter bar to the *Adapt Filters* dialog by configuring the `manifest.json` file as follows:\n\n> ### Sample Code:  \n> ```\n> \"SalesOrderManageList\": {\n>     \"options\": {\n>         \"settings\": {\n>             \"controlConfiguration\": {\n>                 \"@com.sap.vocabularies.UI.v1.SelectionFields\": {\n>                     \"filterFields\": {\n>                         \"postingDate\": {\n>                             \"availability\": \"Adaptation\"\n>                         }\n>                     }\n>                 }\n>             }\n>         }\n>     }\n> }\n> \n> ```\n\nFor more information about other possible values for the `availability` property, see the V4-specific section in [Adding Custom Fields to the Filter Bar](adding-custom-fields-to-the-filter-bar-5fb9f57.md).\n\n**Related Information**  \n\n\n[Smart Filter Bar](../10_More_About_Controls/smart-filter-bar-7bcdffc.md \"The sap.ui.comp.smartfilterbar.SmartFilterBar control analyzes the $metadata document of an OData service and renders a FilterBar control that can be used to filter, for example, a table or a chart.\")\n\n[Enabling the Search Function](enabling-the-search-function-3cdebee.md \"You can enable the Search function in the list report.\")\n\n[Enabling Semantic Operators in the Filter Bar](enabling-semantic-operators-in-the-filter-bar-fef65d0.md \"You can use semantic date values, such as Today or Last Week, on the filter bar of list report and analytical list page applications.\")\n\n",
  "excerpt": "<!-- loio609c39a7498541559dbef503c1ffd194 --> Adapting the Filter Bar You can adapt the filter bar using additional annotations or configuring the manifest.json file. <a name=\"loio609c39a7498541559dbe...",
  "wordCount": 1133,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}