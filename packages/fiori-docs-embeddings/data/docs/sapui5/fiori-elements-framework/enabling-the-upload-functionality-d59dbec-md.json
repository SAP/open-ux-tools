{
  "id": "sapui5-enabling-the-upload-functionality-d59dbec-md",
  "title": "Enabling the Upload Functionality",
  "category": "fiori-elements-framework",
  "path": "enabling-the-upload-functionality-d59dbec.md",
  "lastModified": "2025-09-29T10:06:38.818Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "enabling",
    "the",
    "upload",
    "functionality",
    "d59dbec"
  ],
  "headers": [
    "Enabling the Upload Functionality",
    "Prerequisites",
    "Additional Configuration",
    "Add Additional Columns and Actions to the Table",
    "Control the Visibility and Enablement of the *Upload* Button",
    "Restrict File Type and Size"
  ],
  "content": "<!-- loiod59dbec411f04a64bd6d6dda898fdc84 -->\n\n# Enabling the Upload Functionality\n\nThe SAP Fiori elements Table building block provides a built-in upload functionality that allows users to upload files to the server.\n\n> ### Note:  \n> This topic is only applicable to SAP Fiori elements for OData V4.\n\nWhen the upload functionality is enabled, the user can do the following:\n\n-   Upload files either by dragging and dropping them onto the table, or by clicking the *Upload* button\n\n-   Download the uploaded files by clicking on the file name in the table\n\n-   Delete the uploaded files by selecting the lines and clicking on the *Delete* button, or by using the table's context menu\n\n\nUploading and deleting is only available in edit mode.\n\n> ### Note:  \n> To prevent security issues and protect data from being created or processed with malicious content, you must ensure the following security measures are in place:\n> \n> -   Define `@Core.AcceptableMediaTypes` to specify allowed file types.\n> \n> -   The back-end service framework must ensure a virus scan and other security measures, such as maximum file size limitations and MIME-type restrictions, are in place.\n> \n> -   You must also implement file validation and data sanitization in the back end.\n> \n> \n> For more security-related information, see [Security Configuration](security-configuration-ba0484b.md).\n\n\n\n<a name=\"loiod59dbec411f04a64bd6d6dda898fdc84__section_uty_tp2_2cc\"/>\n\n## Prerequisites\n\nTo enable upload functionality, ensure the following prerequisites are met:\n\n-   The entity type must have an `Edm.Stream` type property that is used to store the uploaded file.\n\n-   The `UI.LineItem` annotation must contain a reference to the `Edm.Stream` type property that is used to store the uploaded file.\n\n-   The entity type must have the `UI.MediaResource` annotation with the `Stream` property referencing the `Edm.Stream` type property that is used to store the uploaded file.\n\n\nHere is an example of how to define the entity type with the required annotations:\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```xml\n> <Annotations Target=\"Namespace.EntityType\">\n>     <Annotation Term=\"UI.LineItem\">\n>         <Collection>\n>             <Record Type=\"UI.DataField\">\n>                 <PropertyValue Property=\"Value\" Path=\"PropertyOfEdmStreamType\"/>\n>                 <PropertyValue Property=\"Label\" String=\"File\"/>\n>             </Record>\n>         </Collection>\n>     </Annotation>\n>     <Annotation Term=\"UI.MediaResource\">\n>         <Record Type=\"UI.MediaResourceType\">\n>             <PropertyValue Property=\"Stream\" Path=\"file\"/>\n>         </Record>\n>     </Annotation>\n> </Annotations>\n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> No ABAP CDS annotation sample is available. Please use the local XML annotation.\n\n> ### Sample Code:  \n> CAP CDS annotation\n> \n> You can use the `Attachments` plug-in to define the entity type. For more information about the plug-in, see [Attachments](https://cap.cloud.sap/docs/plugins/#attachments).\n\nCheck out our live example in the flexible programming model explorer at [Table - File Upload](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/table/tableUpload).\n\n\n\n<a name=\"loiod59dbec411f04a64bd6d6dda898fdc84__section_zny_452_2cc\"/>\n\n## Additional Configuration\n\n\n\n### Add Additional Columns and Actions to the Table\n\nYou can add additional columns and actions to the table by either defining further `UI.LineItem` annotations or by adding custom columns and actions into the `manifest.json` file, as described in [Defining Line Items](defining-line-items-f0e1e17.md).\n\n\n\n### Control the Visibility and Enablement of the *Upload* Button\n\nYou can control the visibility and the enablement of the *Upload* button in the same way as you can control the *Create* button for any other table. A new instance is created through uploading a file, so the *Upload* button has the same semantic meaning as the *Create* button. For more information about controlling the visibility and enablement of the *Create* button, see [Adding Actions to Tables](adding-actions-to-tables-b623e0b.md).\n\n\n\n### Restrict File Type and Size\n\nThe back-end service framework must ensure a virus scan and other security measures, such as maximum file size limitations and MIME-type restrictions, are in place.\n\nYou can restrict the file type and the size of the files to be uploaded with the `MaxLength` and `Core.AcceptableMediaTypes` annotation, as described in [Enabling Stream Support](enabling-stream-support-b236d32.md).\n\n",
  "excerpt": "<!-- loiod59dbec411f04a64bd6d6dda898fdc84 --> Enabling the Upload Functionality The SAP Fiori elements Table building block provides a built-in upload functionality that allows users to upload files t...",
  "wordCount": 611,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}