{
  "id": "sapui5-migrating-from-registercontrollerextensions-api-4120052-md",
  "title": "Migrating from `registerControllerExtensions` API",
  "category": "fiori-elements-framework",
  "path": "migrating-from-registercontrollerextensions-api-4120052.md",
  "lastModified": "2025-09-29T10:06:38.844Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "migrating",
    "from",
    "registercontrollerextensions",
    "api",
    "4120052"
  ],
  "headers": [
    "Migrating from `registerControllerExtensions` API",
    "Steps to Migrate",
    "Additional Changes"
  ],
  "content": "<!-- loio4120052d90374ce8b1cea24a0d8bd317 -->\n\n# Migrating from `registerControllerExtensions` API\n\nAs of SAPUI5 1.120 release, the [`registerControllerExtensions`](https://ui5.sap.com/#/api/sap.suite.ui.generic.template.extensionAPI.extensionAPI%23methods/sap.suite.ui.generic.template.extensionAPI.extensionAPI.registerControllerExtensions)API is getting deprecated. It is planned to be removed from the SAPUI5 version 2.0.\n\n> ### Note:  \n> This topic is only applicable to SAP Fiori elements for OData V2.\n\nFollowing are the requirements that describe why the API is getting deprecated:\n\n-   Now, SAPUI5 provides capabilities to register multiple controller extensions for a single floorplan \\(one controller extension per view\\) directly through the manifest. In this case, the `registerControllerExtensions` API is not required anymore.\n\n-   The `registerControllerExtensions` API internally uses the [`sap.ui.controller`](https://ui5.sap.com/#/api/sap.ui%23methods/sap.ui.controller) API.\n\n\n\n\n<a name=\"loio4120052d90374ce8b1cea24a0d8bd317__section_a2q_nzd_z1c\"/>\n\n## Steps to Migrate\n\nThe current setup has the following three controller extension files for the object page.\n\n-   `DetailsExtension.controller.js`\n\n    The parent controller that invokes extensionAPI.`registerControllerExtensions` and registers the remaining two child controllers.\n\n-   `SalesOrderExtension.controller.js`\n\n    One of the child controllers that is responsible for the `Sales Order` view \\(bound with `C_STTA_SalesOrder_WD_20` entity set\\).\n\n-   `SalesOrderItemExtension.controller.js`\n\n    One of the child controllers that is responsible for the `Sales Order Item` view \\(bound with `C_STTA_SalesOrderItem_WD_20` entity set\\).\n\n\nFrom SAPUI5 version 2.0, only the two child controller files are going to be required\n\n**Step 1: Changes Required in the `manifest.json`**\n\n1.  Register all the child controllers under `sap.ui.controllerExtensions` section of `manifest.json`. The registered entry must be in `<FLOOR_PLAN_NAME>#<STABLE_ID_OF_VIEW>` format. For example, the `SalesOrderExtension.controller.js` is to be registered as the following.\n\n    > ### Sample Code:  \n    > ```\n    > \"sap.ui.controllerExtensions\": { \n    >     ... \n    >     \"sap.suite.ui.generic.template.ObjectPage.view.Details#STTASOWD20::sap.suite.ui.generic.template.ObjectPage.view.Details::C_STTA_SalesOrder_WD_20\": { \n    >         \"controllerName\": \"STTASOWD20.ext.controller.SalesOrderExtension\", \n    >         \"sap.ui.generic.app\": { \n    >             \"C_STTA_SalesOrder_WD_20\": { \n    >                 \"EntitySet\": \"C_STTA_SalesOrder_WD_20\", \n    >                 \"Header\": { \n    >                     \"Actions\": { \n    >                        ... \n    >                     } \n    >                 }, \n    >                 \"Sections\": { \n    >                     \"Actions\": { \n    >                        ... \n    >                     } \n    >                 } \n    >             } \n    >         } \n    >     } \n    > } \n    > ```\n\n2.  Copy the content \\(such as, header actions, section actions\\) of parent controller extension to the respective child controller extensions.\n\n3.  Remove the entry of parent controller extension from `sap.ui.controllerExtensions` section of `manifest.json`.\n\n\n**Step 2: Changes Required in the Controller Extensions**\n\n1.  Remove the parent controller extension file.\n\n2.  All the child controller extension files must extend the `sap.ui.core.mvc.ControllerExtension` class.\n\n    > ### Sample Code:  \n    > ```\n    > sap.ui.define([ \n    >     \"sap/ui/core/mvc/ControllerExtension\" \n    > ], function (ControllerExtension) { \n    >     'use strict'; \n    >     return ControllerExtension.extend(\"STTASOWD20.ext.controller.SalesOrderExtension\", { \n    >         override: { \n    >             // Overridden methods \n    >         }, \n    >         // Custom methods \n    >     }); \n    > }); \n    > ```\n\n3.  All the overridden methods must be kept under the `override` section of the controller extension class. It includes the following:\n\n    -   All the methods provided by SAPUI5 \\(for e.g: onInit\\)\n\n    -   All the methods of [`ObjectPage controllerFrameworkExtensions`](https://ui5.sap.com/#/api/sap.suite.ui.generic.template.ObjectPage.controllerFrameworkExtensions) \\(for e.g: `adaptNavigationParameterExtension`, `beforeSaveExtension`\\)\n\n\n4.  All the custom methods are to be added after the `override` section.\n\n    > ### Sample Code:  \n    > ```\n    > sap.ui.define([ \n    >     \"sap/ui/core/mvc/ControllerExtension\" \n    > ], function (ControllerExtension) { \n    >     'use strict'; \n    >  \n    >     return ControllerExtension.extend(\"STTASOWD20.ext.controller.SalesOrderExtension\", { \n    >         override: { \n    >             onInit: function(){ \n    >             }, \n    >             adaptNavigationParameterExtension: function (oSelectionVariant, oObjectInfo) {}, \n    >             onBeforeRendering: function () {}, \n    >             beforeDeleteExtension: function () {}, \n    >             beforeSaveExtension: function () {} \n    >         }, \n    >         onObjectPage1CustomAction: function () { \n    >         }, \n    >         onSalesOrderInfo: function () {}, \n    >         onSalesOrderItemInfo: function () {} \n    >     }); \n    > }); \n    > ```\n\n\n**Steps 3: Changes Required in Declaring the Press Event Handlers in the Manifest**\n\nEarlier, the event handlers for custom actions \\(that are implemented in controller extensions\\) were declared in the manifest by the name. In the following example, `onObjectPage1CustomAction` is the press event handler for the custom action `ObjectPageCustomAction`.\n\n> ### Sample Code:  \n> ```\n> \"sap.ui.generic.app\": { \n>     \"C_STTA_SalesOrder_WD_20\": { \n>         \"EntitySet\": \"C_STTA_SalesOrder_WD_20\", \n>         \"Header\": { \n>             \"Actions\": { \n>                 \"ObjectPageCustomAction\": { \n>                     \"id\": \"ObjectPageCustomAction\", \n>                     \"text\": \"Custom Action 1\", \n>                     \"press\": \"onObjectPage1CustomAction\", \n>                     \"determining\": true, \n>                     \"applicablePath\": \"IsActiveEntity\" \n>                 } \n>             } \n>         } \n>     } \n> } \n> ```\n\nIt is now going to be changed to extension.`<CONTROLLER_MODULE_NAME>.<METHOD_NAME>` format.\n\n> ### Sample Code:  \n> ```\n> \"sap.ui.generic.app\": { \n>     \"C_STTA_SalesOrder_WD_20\": { \n>         \"EntitySet\": \"C_STTA_SalesOrder_WD_20\", \n>         \"Header\": { \n>             \"Actions\": { \n>                 \"ObjectPageCustomAction\": { \n>                     \"id\": \"ObjectPageCustomAction\", \n>                     \"text\": \"Custom Action 1\", \n>                     \"press\": \".extension.STTASOWD20.ext.controller.SalesOrderExtension.onObjectPage1CustomAction\", \n>                     \"determining\": true, \n>                     \"applicablePath\": \"IsActiveEntity\" \n>                 } \n>             } \n>         } \n>     } \n> } \n> ```\n\n> ### Note:  \n> Use the same format while referring to the custom methods from view and fragment files.\n\nIn the following example, refer to the `press` handler of the button.\n\n> ### Sample Code:  \n> ```\n> <core:FragmentDefinition xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\"> \n>        <Button id=\"previousMemoBtn\" text=\"{i18n>yes}\"  \n>               press=\".extension.SSTASOWD20.ext.controller.SalesOrderExtension.onPressPreviousMemo\" /> \n> </core:FragmentDefinition> \n> ```\n\n\n\n<a name=\"loio4120052d90374ce8b1cea24a0d8bd317__section_txf_1f2_z1c\"/>\n\n## Additional Changes\n\nYou can get the instance of `extensionAPI` using `this.getView().getController().extensionAPI`. You can find more information in the following sample:\n\n> ### Sample Code:  \n> ```\n> sap.ui.define([ \n>     \"sap/ui/core/mvc/ControllerExtension\" \n> ], function (ControllerExtension) { \n>     'use strict'; \n>  \n>     return ControllerExtension.extend(\"STTASOWD20.ext.controller.SalesOrderExtension\", { \n>         override: { \n>             onInit: function () { \n>                 // Initializing extensionAPI \n>                 this.extensionAPI = this.getView().getController().extensionAPI; \n>             } \n>         }, \n>         onSalesOrderInfo: function () { \n>             // Using extensionAPI \n>             var aSelectedContexts = this.extensionAPI.getSelectedContexts(\"SalesOrderItemsID::responsiveTable\"); \n>         } \n>     }); \n> }); \n> ```\n\n",
  "excerpt": "<!-- loio4120052d90374ce8b1cea24a0d8bd317 --> Migrating from registerControllerExtensions API As of SAPUI5 1.120 release, the registerControllerExtensionsAPI is getting deprecated. It is planned to be...",
  "wordCount": 826,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}