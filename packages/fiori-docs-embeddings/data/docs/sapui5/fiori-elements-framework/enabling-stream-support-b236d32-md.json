{
  "id": "sapui5-enabling-stream-support-b236d32-md",
  "title": "Enabling Stream Support",
  "category": "fiori-elements-framework",
  "path": "enabling-stream-support-b236d32.md",
  "lastModified": "2025-09-29T10:06:38.816Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "enabling",
    "stream",
    "support",
    "b236d32"
  ],
  "headers": [
    "Enabling Stream Support",
    "Additional Features in SAP Fiori Elements for OData V2",
    "Prerequisites",
    "Enabling Stream Support",
    "Additional Features in SAP Fiori Elements for OData V4",
    "Step 1: Provide a property of type `Edm.Stream`.",
    "Step 2: Maintain and annotate the UI field as a `DataField`.",
    "UI Representation",
    "File Upload as an Action Parameter"
  ],
  "content": "<!-- loiob236d32d48b74304887b3dd5163548c1 -->\n\n# Enabling Stream Support\n\nEnd users of SAP Fiori elements-based applications can upload, download, and delete files.\n\n> ### Note:  \n> To prevent security issues and protect data from being created or processed with malicious content, you must ensure the following security measures are in place:\n> \n> -   Define `@Core.AcceptableMediaTypes` to specify allowed file types.\n> \n> -   The back-end service framework must ensure a virus scan and other security measures, such as maximum file size limitations and MIME-type restrictions, are in place.\n> \n> -   You must also implement file validation and data sanitization in the back end.\n> \n> \n> For more security-related information, see [Security Configuration](security-configuration-ba0484b.md).\n\n\n\n<a name=\"loiob236d32d48b74304887b3dd5163548c1__section_kqw_x3n_psb\"/>\n\n## Additional Features in SAP Fiori Elements for OData V2\n\nYou can upload or download different `MediaType` files from an object page using stream support.\n\n\n\n### Prerequisites\n\nThe service must have an entity that is stream enabled because the `Edm.Stream` type is not supported in SAP Fiori elements for OData V2.\n\n> ### Sample Code:  \n> ```\n> <EntityType Name=\"MyStreamType\" m:HasStream=\"true\" sap:label=\"Stream Test\" sap:content-version=\"1\">\n>   <Key>\n>     <PropertyRef Name=\"Streamuuid\" />\n>     <PropertyRef Name=\"IsActiveEntity\" />\n>   </Key>\n> <Property Name=\"Edit_ac\" Type=\"Edm.Boolean\" sap:label=\"Dyn. Action Control\" sap:creatable=\"false\" sap:updatable=\"false\" sap:sortable=\"false\" sap:filterable=\"false\" />\n> \n> ```\n\n\n\n### Enabling Stream Support\n\nTo make stream support available on the object page, annotate the following in the `UI.FieldGroup` or `UI.Identification` annotation:\n\n> ### Sample Code:  \n> ```\n> \n> <Record Type=\"UI.DataField\">\n>      <PropertyValue Property=\"Value\" Path=\"$value\"/>\n> </Record>\n> \n> ```\n\n> ### Note:  \n> `$value` is a reserved text, and it is used only to support stream.\n\nThe following `MediaType` annotation represents the stream type that displays each record. This annotation is mandatory and exists on the entity level.\n\n> ### Sample Code:  \n> ```\n> <Annotation Term=\"Org.OData.Core.V1.MediaType\" Path=\"ThisMimeType\"></Annotation>\n> ```\n\nThe following annotation must be set on the `entitylevel` if the stream is displayed as image.\n\n> ### Sample Code:  \n> ```\n> <Annotation Term=\"UI.IsImage\"/>\n> ```\n\nIf the entity is annotated with `UI.IsImage`, then both the images and the media files are displayed on the UI as thumbnails.\n\n![](images/Stream_Support_1_6239c98.png)\n\nIf the entity is not annotated with `UI.IsImage`, then both the images and the media files are displayed on the UI with icon and hyperlink.\n\n![](images/Stream_Support_2_24af17e.png)\n\n![](images/Stream_Support_3_fc27c63.png)\n\nLabel for the file uploader is picked from the `dataField` annotation.\n\nBased on the `MediaType`, the icon for the non-image media type is shown differently in the UI.\n\nThe following annotation must exist on the `entitylevel` to set the text for the file name. If the annotations are not included, the hyperlink displays the text *Open File*.\n\n> ### Sample Code:  \n> ```\n> \n> <Annotation Term=\"SAP__core.ContentDisposition\">\n>     <Record>\n>         <PropertyValue Property=\"Filename\" Path=\"ThisFileName\" />\n>     </Record>\n> </Annotation>\n> \n> ```\n\nYou can restrict a `MediaType` from being uploaded by using the following annotation:\n\n> ### Sample Code:  \n> ```\n> <Annotation Term=\"Core.AcceptableMediaTypes\">\n>     <Collection>\n>         <String>text/plain</String>\n>     </Collection>\n> </Annotation>\n> \n> ```\n\nIn draft apps, you can only upload or delete a stream when the UI is editable. However, in non-draft apps, the upload and delete is supported only in display mode.\n\nIf no file is present, a placeholder is displayed:\n\n![](images/Stream_Support_4_adaa7a8.png)\n\n> ### Note:  \n> The uploaded file name is visible in the list report or the object page table but cannot be edited from the table.\n> \n> To upload a file, navigate to the corresponding object page.\n> \n> Only one file can be uploaded for a record; uploading a second file can replace the exisiting one.\n> \n> ![](images/Stream_Support_V2_08edaaf.png)\n\n\n\n<a name=\"loiob236d32d48b74304887b3dd5163548c1__section_dn4_zkn_psb\"/>\n\n## Additional Features in SAP Fiori Elements for OData V4\n\nApplication developers can define fields based on `Edm.Stream` properties and add them to forms or tables, for example.\n\nFields based on `Edm.Stream` have the following features:\n\n-   In display mode, the stream content is represented either as a preview \\(image\\) or as a link to download the file.\n\n    If the field is represented as a download link, it also contains a media-type icon, and the display text for the link is the file name \\(for example, *1.gif*\\), if available. Otherwise, the display text is *Open File*.\n\n-   In edit mode, there are additional buttons to upload or delete the stream content.\n\n\nThe following image shows an example of a list report from which end users can download a file:\n\n![](images/Edm_Stream_List_Report_-_Download_File_5659cb3.png)\n\nThe following image shows an example of an object page in display mode:\n\n![](images/Edm_stream_File_Upload_in_Display_Mode_3d08541.png)\n\nThe following image shows the object page containing file upload fields in edit mode:\n\n![](images/Edm_stream_File_Upload_in_Edit_Mode_46c2706.png)\n\nTo add the file upload elements, proceed as follows:\n\n\n\n### Step 1: Provide a property of type `Edm.Stream`.\n\n> ### Sample Code:  \n> ```\n> <EntityType Name=\"MainEntities\">\n>     ...\n>     <Property Name=\"myStreamProperty\" Type=\"Edm.Stream\" />\n>     <Property Name=\"myStreamPropertyType\" Type=\"Edm.String\" />\n>     <Property Name=\"myRestrictedStreamProperty\" Type=\"Edm.Stream\" MaxLength=\"100000\"/>\n>     ...\n> </EntityType>\n> <Annotations Target=\"sap.fe.stream.StreamsService.MainEntities/myStreamProperty\">\n>     <Annotation Term=\"Core.MediaType\" Path=\"myStreamPropertyType\" />\n> </Annotations>\n> <Annotations Target=\"sap.fe.stream.StreamsService.MainEntities/myStreamPropertyType\">\n>     <Annotation Term=\"Core.IsMediaType\" Bool=\"true\" />\n> </Annotations>\n> <Annotations Target=\"sap.fe.stream.StreamsService.MainEntities/myRestrictedStreamProperty\">\n>     <Annotation Term=\"Core.MediaType\" String=\"text/plain\"/>\n>     <Annotation Term=\"Core.AcceptableMediaTypes\">\n>         <Collection>\n>             <String>text/plain</String>\n>         </Collection>\n>     </Annotation>\n> </Annotations>\n> ```\n\nTo restrict the file size, add the attribute `MaxLength` to the `Property`. `MaxLength` is the maximum file size in bytes. To define the allowed media types, use the annotation `Core.AcceptableMediaTypes`. Without these annotations, there is no restriction regarding file size and media types that can be uploaded. App developers must define these restrictions.\n\n> ### Note:  \n> The `odata.mediaEditLink` annotation is not supported.\n\nFor more information, see [https://cap.cloud.sap/docs/guides/providing-services\\#annotating-media-elements](https://cap.cloud.sap/docs/guides/providing-services#annotating-media-elements).\n\n\n\n### Step 2: Maintain and annotate the UI field as a `DataField`.\n\n> ### Sample Code:  \n> ```\n> <Annotations Target=\"sap.fe.stream.StreamsService.MainEntities\">\n>     <Annotation Term=\"UI.FieldGroup\" Qualifier=\"streams\">\n>         <Record Type=\"UI.FieldGroupType\">\n>             <PropertyValue Property=\"Label\" String=\"Streams\" />\n>             <PropertyValue Property=\"Data\">\n>                 <Collection>\n>                     <Record Type=\"UI.DataField\">\n>                         <PropertyValue Property=\"Label\" String=\"Stream\" />\n>                         <PropertyValue Property=\"Value\" Path=\"myStreamProperty\" />\n>                     </Record>\n>                 </Collection>\n>             </PropertyValue>\n>         </Record>\n>     </Annotation>\n> </Annotations>\n> ```\n\n\n\n### UI Representation\n\nThe representation of the document icon and the link depends on the `odata.mediaContentType` and `Core.ContentDisposition/Filename` annotations.\n\n**– Document Icon –**\n\nIf the back end returns an `odata.mediaContentType` annotation for the stream property, SAP Fiori elements renders a specific document icon based on the content type. If the back end doesn't return an `odata.mediaContentType` annotation or if the content type can't be mapped to a specific document icon, SAP Fiori elements renders a generic document icon.\n\n**– Document Link –**\n\nYou can click on the document link to open the content of the stream property. SAP Fiori elements distinguishes the following three cases for rendering the document link:\n\n-   The link text shows the file name. Two conditions must be fulfilled:\n\n    -   For the stream property, there's a `Core.ContentDisposition/Filename` annotation pointing to a non-empty file name.\n\n    -   The stream property is not empty. This means the back end either returns an `odata.mediaContentType` annotation with a value that is not `null`, or does not return an `odata.mediaContentType` annotation.\n\n\n-   The link text is \"Open File\". Two conditions must be fulfilled:\n\n    -   For the stream property, there's either no `Core.ContentDisposition/Filename` annotation, or a `Core.ContentDisposition/Filename` annotation pointing to an empty file name.\n\n    -   The stream property is not empty. This means the back end either returns an `odata.mediaContentType` annotation with a value that is not `null`, or does not return an `odata.mediaContentType` annotation.\n\n-   There's an empty indicator instead of a link. The following condition must be fulfilled:\n\n    -   The stream property is empty. This means the back end returns an `odata.mediaContentType` annotation with the value `null`.\n\n\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```xml\n> <Annotations Target=\"sap.fe.streams.StreamsService.MainEntities/streamWithFilename_content\">\n>      <Annotation Term=\"Core.MediaType\" Path=\"streamWithFilename_type\"/>\n>           <Annotation Term=\"Core.ContentDisposition\">\n>                <Record Type=\"Core.ContentDispositionType\">\n>                     <PropertyValue Property=\"Filename\" Path=\"streamWithFilename_name\"/>\n>                </Record>\n>           </Annotation>\n>      <Annotation Term=\"Common.Label\" String=\"Stream, dynamic media type, with name\"/>\n> </Annotations>\n> \n> ```\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> @title : 'Stream with file name'\n> @Core.MediaType : streamWithFilename_type\n> @Core.ContentDisposition.Filename : streamWithFilename_name\n>                                     streamWithFilename_content : Stream;\n>                                     streamWithFilename_type : MediaType;\n>                                     streamWithFilename_name : StreamName;\n> ```\n\n**– Avatar –**\n\nAn avatar is rendered instead of the icon and link representation when one of the following conditions is fulfilled:\n\n-   The `Edm.Stream` property is annotated with `UI.IsImage`.\n\n-   The `Core.MediaType` annotation starts with 'image/', as in 'image/gif'\n\n\nTo display the image or person avatar as a circle, specify the `Common.IsNaturalPerson` annotation at the entity type or for the `UI.IsImage` annotation of a stream property.\n\n– Edit Mode –\n\nIn Edit mode, an upload button and a delete button are available so that users can upload a different file or delete the file. If the back-end response provides a new value for `odata.mediaContentType` after uploading a new file, the icon and link change their representation according to the new value.\n\n\n\n### File Upload as an Action Parameter\n\nYou can configure bound or unbound actions that require uploading files as action parameters. This setup lets users upload files in the action parameter dialog.\n\n![](images/File_Upload_as_Action_Parameter_35b7e6b.png)\n\nTo enable file upload as an action parameter, use a `ComplexType` as a parameter of an action. The `ComplexType` parameter must consist of the following:\n\n-   A property of type `Edm.Stream`\n-   A property for the MIME type\n-   A property for the file name\n\nTo maintain the relationship between the properties for the file content, MIME type, and file name, use the annotations `Core.ContentDisposition`, `Core.MediaType`, and `Core.IsMediaType`.\n\nTo restrict the file size and define the allowed media types, use the `MaxLength` and `Core.AcceptableMediaTypes` annotations as described in this topic.\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```xml\n> <Action Name=\"ActionParameterTypeName\" IsBound=\"true\">\n>   <Parameter Name=\"_it\" Type=\"service.namespace.EntityTypeName\" Nullable=\"false\"/>\n>   <Parameter Name=\"_StreamProperties\" Type=\"service.namespace.FileStreamTypeName\" Nullable=\"false\"/>\n> </Action>\n> \n> <ComplexType Name=\"FileStreamTypeName\">\n>   <Property Name=\"StreamProperty\" Type=\"Edm.Stream\" Nullable=\"false\" MaxLength=\"128\" />\n>   <Property Name=\"MimeType\" Type=\"Edm.String\" Nullable=\"false\" />\n>   <Property Name=\"FileName\" Type=\"Edm.String\" Nullable=\"false\" />\n> </ComplexType>\n> \n> <Annotations Target=\"service.namespace.FileStreamTypeName/StreamProperty\">\n>   <Annotation Term=\"Common.Label\" String=\"Label for File Upload\" />\n>   <Annotation Term=\"Core.ContentDisposition\">\n>     <Record>\n>       <PropertyValue Property=\"Filename\" Path=\"FileName\" />\n>     </Record>\n>   </Annotation>\n>   <Annotation Term=\"Core.MediaType\" Path=\"MimeType\" />\n>   <Annotation Term=\"Core.AcceptableMediaTypes\">\n>     <Collection>\n>       <String>image/png</String>\n>     </Collection>\n>   </Annotation>\n> </Annotations>\n> <Annotations Target=\"service.namespace.FileStreamTypeName/MimeType\">\n>   <Annotation Term=\"Core.IsMediaType\" />\n> </Annotations>\n> \n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> ```\n> // ==== FILE_STREAM_TYPE_NAME ==== //\n> \n> // == CDS View for FILE_STREAM_TYPE_NAME\n> define root abstract entity FILE_STREAM_TYPE_NAME\n> {\n>   @Semantics.largeObject.mimeType: 'mimetype'\n>   @Semantics.largeObject.fileName: 'filename'\n>   @Semantics.largeObject.contentDispositionPreference: #INLINE\n>   streamproperty : abap.rawstring(0);\n>   \n>   @UI.hidden: true\n>   mimetype : abap.char(128);\n>   \n>   @UI.hidden: true\n>   filename : abap.char(128);\n> }\n> \n> // == Behavior Definitions for FILE_STREAM_TYPE_NAME\n> abstract;\n> strict;\n> with hierarchy;\n> define behavior for FILE_STREAM_TYPE_NAME {}\n> \n> \n> // ==== ACTION_PARAMETER_TYPE_NAME ==== //\n> \n> // == CDS View for ACTION_PARAMETER_TYPE_NAME\n> define root abstract entity ACTION_PARAMETER_TYPE_NAME\n> {\n>   _StreamProperties : association [1] to FILE_STREAM_TYPE_NAME on 1 = 1;\n> }\n> \n> // == Behavior Definitions for ACTION_PARAMETER_TYPE_NAME\n> abstract;\n> strict;\n> with hierarchy;\n> define behavior for ACTION_PARAMETER_TYPE_NAME\n> {\n>   association _StreamProperties with hierarchy;\n> }\n> ```\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> action ActionParameterTypeName(\n>   _StreamProperties : service.namespace.FileStreamTypeName not null\n> ) returns EntityTypeName;\n> \n> type FileStreamTypeName {\n>   StreamProperty       : LargeBinary @Core.MediaType: MimeType @Core.ContentDisposition.Filename: FileName;\n>   MimeType             : String @Core.IsMediaType;\n>   FileName             : String;\n> };\n> ```\n\nFor more information about action parameters, see [Actions](actions-cbf16c5.md).\n\n",
  "excerpt": "<!-- loiob236d32d48b74304887b3dd5163548c1 --> Enabling Stream Support End users of SAP Fiori elements-based applications can upload, download, and delete files. > Note:   > To prevent security issues ...",
  "wordCount": 1889,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}