{
  "id": "sapui5-extension-points-for-views-in-the-list-report-eb37203-md",
  "title": "Extension Points for Views in the List Report",
  "category": "fiori-elements-framework",
  "path": "extension-points-for-views-in-the-list-report-eb37203.md",
  "lastModified": "2025-09-29T10:06:38.826Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "extension",
    "points",
    "for",
    "views",
    "the",
    "list",
    "report",
    "eb37203"
  ],
  "headers": [
    "Extension Points for Views in the List Report",
    "Using Custom Views in the List Report",
    "Settings for Custom Views",
    "Defining the Custom Tab",
    "Custom Handler",
    "Using Filter Conditions in the Controller Extension for the List Report"
  ],
  "content": "<!-- loioeb37203f2b884b5097c3c858107cae1f -->\n\n# Extension Points for Views in the List Report\n\nYou can use extension points to enhance views in the list report in SAP Fiori elements apps.\n\n> ### Note:  \n> This topic is currently only applicable to SAP Fiori elements for OData V4.\n\n\n\n<a name=\"loioeb37203f2b884b5097c3c858107cae1f__section_nb5_455_3qb\"/>\n\n## Using Custom Views in the List Report\n\nApp developers can display custom content in a dedicated tab together with regular tabs defined through annotations.\n\n> ### Restriction:  \n> To use custom views in the list report, you need to have at least 1 annotation view.\n\nCustom views provide the following features:\n\n-   simple configuration by declaring custom tabs in the manifest as views \\(similar to views corresponding to the `PresentationVariant` or `SelectionPresentationVariant` defined via annotations\\)\n\n-   adding a custom XML view \\(via an `xmlfragment` definition\\) along with a custom handler called from the manifest, if neessary\n\n-   defining a controller extension for the list report\n\n-   using a localized view title\n\n\nTo define a custom view, the path configuration for the custom view in the manifest must reference a fragment name, a label for the tab, and a key. The structure is as follows:\n\n> ### Sample Code:  \n> ```\n> \"BusinessPartnersList\": {\n>     \"type\": \"Component\",\n>     \"id\": \"BusinessPartnersList\",\n>     \"name\": \"sap.fe.templates.ListReport\",\n>     \"options\": {\n>         \"settings\": {\n>             \"contextPath\": \"/BusinessPartners\",\n>             \"views\": {\n>                 \"paths\": [\n>                     {\n>                         \"key\": \"tab1\",\n>                         \"annotationPath\": \"com.sap.vocabularies.UI.v1.SelectionPresentationVariant#All\"\n>                     },\n>                     {\n>                         \"key\": \"tab2\",\n>                         \"label\": \"Custom View with Table\",\n>                         \"template\": \"BusinessPartners.ext.CustomViewTable\"\n>                     },\n>                     {\n>                         \"key\": \"tab3\",\n>                         \"label\": \"{i18n>LRCustomViewWithButton}\",\n>                         \"template\": \"BusinessPartners.ext.CustomViewWithButton\"\n>                     }\n>                 ],\n>                 \"showCounts\": true\n>             }\n>         }\n>     }\n> }\n> ```\n\nEach view can contain any control users want to display on the tab. App developers manage the content of a custom tab. The previous example configuration defines 2 custom tabs.\n\n\n\n<a name=\"loioeb37203f2b884b5097c3c858107cae1f__section_vcy_p55_3qb\"/>\n\n## Settings for Custom Views\n\nYou can define your custom view by using the following properties:\n\n**Properties of a Custom View**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nProperty Name\n\n</th>\n<th valign=\"top\">\n\nSupported Values\n\n</th>\n<th valign=\"top\">\n\nDescription\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\nkey\n\n</td>\n<td valign=\"top\">\n\n\"<unique\\_tab\\_id\\>\"\n\n</td>\n<td valign=\"top\">\n\nUnique tab identifier.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nlabel\n\n</td>\n<td valign=\"top\">\n\n\"<tab\\_title\\>\"\n\n</td>\n<td valign=\"top\">\n\nView title \\(localization supported\\).\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\ntemplate\n\n</td>\n<td valign=\"top\">\n\n\"<name\\_of\\_custom\\_xml\\_view\\>\"\n\n</td>\n<td valign=\"top\">\n\nThe name contains `sap.app.id` as a prefix, followed by the path in the app/webapp folder and the name of the XML view.\n\n</td>\n</tr>\n</table>\n\n\n\n<a name=\"loioeb37203f2b884b5097c3c858107cae1f__section_bqy_p55_3qb\"/>\n\n## Defining the Custom Tab\n\nIn the following sample code, a `sap.m.Table` has been added to a custom view:\n\n> ### Sample Code:  \n> ```\n> <core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\" xmlns:u=\"sap.ui.unified\">\n>     <Table id=\"customViewWithTable\" items=\"{\n>         path: '/BusinessPartners',\n>         sorter: {\n>             path: 'Name'\n>         }\n>     }\">\n>         <headerToolbar>\n>             <OverflowToolbar>\n>                 <content>\n>                     <Title text=\"Business partners\" level=\"H2\" />\n>                     <ToolbarSpacer />\n>                 </content>\n>             </OverflowToolbar>\n>         </headerToolbar>\n>         <infoToolbar>\n>             <OverflowToolbar>\n>                 <Label text=\"List of business partners\" />\n>             </OverflowToolbar>\n>         </infoToolbar>\n>         <columns>\n>             <Column width=\"15em\">\n>                 <Text text=\"Partner Name\" />\n>             </Column>\n>             <Column minScreenWidth=\"Tablet\" demandPopin=\"true\">\n>                 <Text text=\"Country\" />\n>             </Column>\n>             <Column minScreenWidth=\"Desktop\" demandPopin=\"true\" hAlign=\"End\">\n>                 <Text text=\"Region\" />\n>             </Column>\n>             <Column minScreenWidth=\"Desktop\" demandPopin=\"true\" hAlign=\"Center\">\n>                 <Text text=\"Segment\" />\n>             </Column>\n>             <Column minScreenWidth=\"Desktop\" demandPopin=\"true\" hAlign=\"Center\">\n>                 <Text text=\"Sales Amount\" />\n>             </Column>\n>             <Column minScreenWidth=\"Desktop\" demandPopin=\"true\" hAlign=\"Center\">\n>                 <Text text=\"Sales Amount (local currency)\" />\n>             </Column>\n>         </columns>\n>         <items>\n>             <ColumnListItem type=\"Active\">\n>                 <cells>\n>                     <ObjectIdentifier text=\"{Name}\" />\n>                     <Text text=\"{Country}\" />\n>                     <Text text=\"{Region}\" />\n>                     <Text text=\"{Segment}\" />\n>                     <u:Currency value=\"{SalesAmount}\" currency=\"{Currency}\" />\n>                     <u:Currency value=\"{SalesAmountLocalCurrency}\" currency=\"{LocalCurrency}\" />\n>                 </cells>\n>             </ColumnListItem>\n>         </items>\n>     </Table>\n> </core:FragmentDefinition>\n> ```\n\nIn the following sample code, a simple button has been added inside a panel to a custom view:\n\n> ### Sample Code:  \n> ```\n> <core:FragmentDefinition xmlns=\"sap.m\" xmlns:core=\"sap.ui.core\">\n>     <Panel\n>         headerText=\"Business Partners\"\n>         class=\"sapUiResponsiveMargin\"\n>         width=\"auto\"\n>         core:require=\"{handler: 'BusinessPartners/ext/CustomButton'}\"\n>     >\n>         <content>\n>             <Button text=\"IBN\" id=\"customButton1\" class=\"sapUiSmallMarginEnd\" press=\"handler.onPress\" />\n>         </content>\n>     </Panel>\n> </core:FragmentDefinition>\n> ```\n\n\n\n<a name=\"loioeb37203f2b884b5097c3c858107cae1f__section_rcz_p55_3qb\"/>\n\n## Custom Handler\n\nIf a custom handler is required for the custom tab, you must define it in the fragment file using `\"core:require\"`. As shown in the previous example, you can define a press handler on the `sap.m.Button`. In the corresponding custom controller implementation shown in the following example, the binding context of the press event is used for displaying a message box:\n\n> ### Sample Code:  \n> ```\n> sap.ui.define([\"sap/ui/core/Component\"], function(Component) {\n>     \"use strict\";\n>  \n>     return {\n>         someHandler: function(oEvent) {\n>             // Do something here\n>         },\n>         onPress: function(oEvent) {\n>             MessageBox.show(\"You pressed the custom action\");\n>         }\n>     };\n> });\n> ```\n\n\n\n<a name=\"loioeb37203f2b884b5097c3c858107cae1f__section_hpz_p55_3qb\"/>\n\n## Using Filter Conditions in the Controller Extension for the List Report\n\nFor app developers who want a standard filtering behavior along with other annotation tabs in the list report based on the `filterConditions` from the filter bar, SAP Fiori elements provides 2 methods that you can overwrite. The controller extension for the list report must be registered in the manifest. To register the controller extension in the manifest, proceed as follows:\n\n> ### Sample Code:  \n> ```\n> \"sap.ui5\": {\n>     \"extends\": {\n>         \"extensions\": {\n>             \"sap.ui.controllerExtensions\": {\n>                 \"sap.fe.templates.ListReport.ListReportController\": {\n>                     \"controllerName\": \"SalesOrder.ext.LRExtend\"\n>                 }\n>             }\n>         }\n>     }\n> }\n> ```\n\nThe methods app developers can use are:\n\n-   `onViewNeedsRefresh`: To be used to refresh the content of a custom tab in a list report view with multiple tabs. This happens either when there is a change on the filter bar and the search is triggered, or when a tab with custom content is selected. App developers can use the additional parameters added to this method to identify the refresh cause \\(`\"tabChanged\"` or `\"search\"`\\) and apply the filter conditions on a specific tab based on the ID of the tab.\n\n-   `onPendingFilters`: To be used when a filter or search value has been changed in the filter bar but has not been validated yet by the end user \\(using the *Go* or *Search* button\\). Typically, the content of the current tab is grayed out until the filters are validated.\n\n\nIn the following sample code, the binding information is updated with filter conditions on a custom tab that has a table:\n\n> ### Sample Code:  \n> ```\n> sap.ui.define([\"sap/ui/core/mvc/ControllerExtension\", \"sap/ui/model/Filter\"], function(ControllerExtension, Filter) {\n>     \"use strict\";\n>     return ControllerExtension.extend(\"BusinessPartners.ext.LRExtend\", {\n>         override: {\n>             onViewNeedsRefresh: function(mParameters) {\n>                 var oFilterInfo = mParameters.filterConditions;\n>                 if (oFilterInfo) {\n>                     var duplicateFilterInfo = Object.assign({}, oFilterInfo);\n>                     if (\n>                         duplicateFilterInfo.Region &&\n>                         duplicateFilterInfo.Region.map(item => item.values).findIndex(i => i.includes(\"Bavaria\")) !== -1\n>                     ) {\n>                         delete duplicateFilterInfo.Region;\n>                     }\n>                     var oTable = this.getView().byId(\"BusinessPartners::BusinessPartnersList--fe::CustomTab::tab2--customViewWithTable\"),\n>                         oBinding = oTable.getBinding(\"items\"),\n>                         oConvertedFilter = this.base.getExtensionAPI().createFiltersFromFilterConditions(duplicateFilterInfo);\n>                     oTable.setShowOverlay(false);\n>                     var oFilter = new Filter({ filters: oConvertedFilter.filters, and: true });\n>                     oBinding.filter(oFilter);\n>                     oBinding.changeParameters({$search: oConvertedFilter.search});\n>                 }\n>             },\n>             onPendingFilters: function() {\n>                 var oTable = this.getView().byId(\"BusinessPartners::BusinessPartnersList--fe::CustomTab::tab2--customViewWithTable\");\n>                 if (oTable) {\n>                     oTable.setShowOverlay(true);\n>                 }\n>             }\n>         }\n>     });\n> });\n> ```\n\n",
  "excerpt": "<!-- loioeb37203f2b884b5097c3c858107cae1f --> Extension Points for Views in the List Report You can use extension points to enhance views in the list report in SAP Fiori elements apps. > Note:   > Thi...",
  "wordCount": 1186,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}