{
  "id": "sapui5-extension-points-for-forms-on-the-object-page-4e49753-md",
  "title": "Extension Points for Forms on the Object Page",
  "category": "fiori-elements-framework",
  "path": "extension-points-for-forms-on-the-object-page-4e49753.md",
  "lastModified": "2025-09-29T10:06:38.824Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "extension",
    "points",
    "for",
    "forms",
    "the",
    "object",
    "page",
    "4e49753"
  ],
  "headers": [
    "Extension Points for Forms on the Object Page",
    "Additional Features in SAP Fiori Elements for OData V2",
    "Additional Features in SAP Fiori Elements for OData V4",
    "Using Custom Fields",
    "Settings for Custom Fields in Forms",
    "Using the UI Model",
    "Live Example: Custom Form Element with `Field` Building Block",
    "Custom Fields With Metadata Binding"
  ],
  "content": "<!-- loio4e49753530ad4a73a44a5f8efac238d6 -->\n\n# Extension Points for Forms on the Object Page\n\nOn the object page, you can use extension points to extend forms in sections.\n\n> ### Caution:  \n> Use app extensions with caution and only if you cannot produce the required behavior by other means, such as manifest settings or annotations. To correctly integrate your app extension coding with SAP Fiori elements, use only the `extensionAPI` of SAP Fiori elements. For more information, see [Using the extensionAPI](using-the-extensionapi-bd2994b.md).\n> \n> After you've created an app extension, its display \\(for example, control placement and layout\\) and system behavior \\(for example, model and binding usage, busy handling\\) lies within the application's responsibility. SAP Fiori elements provides support only for the official `extensionAPI` functions. Don't access or manipulate controls, properties, models, or other internal objects created by the SAP Fiori elements framework.\n\n\n\n<a name=\"loio4e49753530ad4a73a44a5f8efac238d6__section_mq3_y5v_p4b\"/>\n\n## Additional Features in SAP Fiori Elements for OData V2\n\nUse the `\"SmartFormExtension|<entity name>|<fieldgroup annotation>\"` key in the manifest entry to add new fields to an existing field group. In the example below, an extension is added to the *General Information* field group.\n\n> ### Sample Code:  \n> ```\n> \n> \"sap.suite.ui.generic.template.ObjectPage.view.Details\": {\n>     \"SmartFormExtension|STTA_C_MP_Product|com.sap.vocabularies.UI.v1.FieldGroup::GeneralInformation\": {\n>         \"className\": \"sap.ui.core.Fragment\",\n>         \"fragmentName\": \"STTA_MP.ext.fragments.SmartFormGroupElement\",\n>         \"type\": \"XML\"\n>     }\n> }\n> ```\n\n> ### Note:  \n> `SmartForm Extension` supports only `sap.ui.core.Fragment` for the `className`.\n\nFor more information, see [Defining and Adapting Sections](defining-and-adapting-sections-facfea0.md).\n\n\n\n<a name=\"loio4e49753530ad4a73a44a5f8efac238d6__section_zwf_cvv_p4b\"/>\n\n## Additional Features in SAP Fiori Elements for OData V4\n\nCustom fields, that is, form elements, provide the following features:\n\n-   adding arbitrary fields via an `xmlfragment` definition\n\n-   positioning relative to other fields defined as `FieldGroups` or `Identification`\n\n-   using localized field labels\n\n\n\n\n### Using Custom Fields\n\nThe form containing additional custom fields can look like this:\n\n![](images/Custom_Fields_on_the_Object_Page_852b724.png)\n\n1.  Define a fragment for the view extension\n\n    You have to implement two extensions:\n\n    1.  Implement the definition of the custom field\n\n    2.  Implement the content of the custom field\n\n\n    > ### Sample Code:  \n    > CustomFormElement.fragment.xml\n    > \n    > ```xml\n    > <core:FragmentDefinition xmlns:core=\"sap.ui.core\" xmlns=\"sap.m\">\n    >     <Text id=\"customFieldFormSoldToPartyInputField\" text=\"{SoldToParty}\" />\n    > </core:FragmentDefinition>\n    > ```\n\n2.  Register your view extensions in the `manifest.json` file of your application as follows:\n\n    > ### Sample Code:  \n    > manifest.json\n    > \n    > ```\n    > \"sap.ui5\": {\n    >     \"routing\": {\n    >         \"targets\": {\n    >             \"SalesOrderManageObjectPage\": {\n    >                 \"options\": {\n    >                     \"settings\": {\n    >                         \"controlConfiguration\": {\n    >                             \"@com.sap.vocabularies.UI.v1.FieldGroup\": {\n    >                                 \"fields\": {\n    >                                     \"customFormElementAnchor\": {\n    >                                         \"template\": \"ObjectPageStructure.ext.CustomField\",\n    >                                          \"label\": \"{i18n>myFieldLabel1}\",\n    >                                          \"position\": {\n    >                                              \"placement\": \"After\",\n    >                                              \"anchor\": \"DataField::SalesOrder\"\n    >                                          }\n    >                                      },\n    >                                      \"customFormElementAnchor2\": {\n    >                                          \"template\": \"ObjectPageStructure.ext.CustomField\",\n    >                                          \"label\": \"{i18n>myFieldLabel2}\",\n    >                                          \"position\": {\n    >                                              \"placement\": \"After\",\n    >                                              \"anchor\": \"customFormElementAnchor\"\n    >                                          }\n    >                                      }\n    >                                  }\n    >                              }\n    >                          }\n    >                      }\n    >                  }\n    >              }\n    >         }\n    >     }\n    >  }\n    > ```\n\n\n\n\n### Settings for Custom Fields in Forms\n\nYou can define your custom fields by implementing an `xmlfragment` and using the following properties:\n\n**Properties of a Custom Field in a Form**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nProperty Name\n\n</th>\n<th valign=\"top\">\n\nSupported Values\n\n</th>\n<th valign=\"top\">\n\nDescription\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\nkey\n\n</td>\n<td valign=\"top\">\n\naA-zZ, 0-9, :, \\_, -\n\n</td>\n<td valign=\"top\">\n\nThe key of the custom field is needed as an identifier, which can be used as reference for other fields.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nlabel\n\n</td>\n<td valign=\"top\">\n\nany Unicode string\n\n</td>\n<td valign=\"top\">\n\nThe label is shown on the form as the label of the field.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nposition\n\n</td>\n<td valign=\"top\">\n\n \n\n</td>\n<td valign=\"top\">\n\nDefines the position of the field relative to other fields.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nposition.placement\n\n</td>\n<td valign=\"top\">\n\n\"**After**\" | \"Before\"\n\n</td>\n<td valign=\"top\">\n\nDefines the placement: either \"After\" or \"Before\" the anchor field.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nposition.anchor\n\n</td>\n<td valign=\"top\">\n\n\"<key\\_of\\_column\\>\"\n\n</td>\n<td valign=\"top\">\n\nThe key of another field to be used as the placement anchor.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\ntemplate\n\n</td>\n<td valign=\"top\">\n\n \n\n</td>\n<td valign=\"top\">\n\nDefining the target fragment follows the syntax of defining a fragment via `Fragment.load`.\n\n</td>\n</tr>\n</table>\n\n**bold** formatting: default/fallback behavior\n\n\n\n### Using the UI Model\n\nYou can use the UI model within the fragment to react to changes of the `editMode`:\n\n> ### Sample Code:  \n> ```json\n> \"enabled=\"{= ${ui>/editMode} === 'Editable'}\"\n> ```\n\n\n\n### Live Example: Custom Form Element with `Field` Building Block\n\nYou can explore and work with the coding yourself. Check out our live example in the flexible programming model explorer at [Custom Form Element](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/customElements/customElementsOverview/customFormElementContent).\n\n\n\n### Custom Fields With Metadata Binding\n\nYou can use metadata binding as an alternative to `i18n` approach to define the label for custom fields or custom form elements.\n\n> ### Sample Code:  \n> manifest.json\n> \n> ```\n> \"customFormElementAnchor3\": {\n>     \"template\": \"ObjectPageStructure.ext.CustomField\",\n>   \"label\": \"{metaModel>/SalesOrderManage/SoldToParty@com.sap.vocabularies.Common.v1.Label}\",\n>   \"position\": {\n>     \"placement\": \"After\",\n>     \"anchor\": \"customFormElementAnchor\"\n>   }\n> }\n> ```\n\n",
  "excerpt": "<!-- loio4e49753530ad4a73a44a5f8efac238d6 --> Extension Points for Forms on the Object Page On the object page, you can use extension points to extend forms in sections. > Caution:   > Use app extensi...",
  "wordCount": 804,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}