{
  "id": "sapui5-custom-navigation-parameters-40051b6-md",
  "title": "Custom Navigation Parameters",
  "category": "fiori-elements-framework",
  "path": "custom-navigation-parameters-40051b6.md",
  "lastModified": "2025-09-29T10:06:38.797Z",
  "tags": [
    "fiori-elements-framework",
    "md",
    "custom",
    "navigation",
    "parameters",
    "40051b6"
  ],
  "headers": [
    "Custom Navigation Parameters",
    "Procedure"
  ],
  "content": "<!-- loio40051b67edaf457cad37d552c37b497d -->\n\n# Custom Navigation Parameters\n\nAdd custom parameters for intent-based navigation to the target application.\n\n\n\n## Procedure\n\n1.  Define the `onCustomParams` function in the controller file extension.\n\n    > ### Sample Code:  \n    > ```\n    >         onCustomParams: function(sCustomParams) {\n    >             if (sCustomParams === \"getParameters\") {\n    >                 return this.getParameters;\n    >             } else if (sCustomParams === \"param2\") {\n    >                 return this.param2;\n    >             }\n    >         },\n    > ```\n\n    The custom parameter function inserts URL parameters while navigating to the target application. Configure the following properties:\n\n    -   `path`: Property name\n\n    -   `operator`: Operator to apply. Possible operations are EQ,NE,LE,GE,LT,GT,BT,CP.\n\n    -   `value1`: First operator value applied\n\n    -   `value2`: Second operator value. Use only for a range of operators, such as `BT`. If empty, set the value to null.\n\n    -   `sign`: Specify the current selection to be included or excluded from the filter. Use `I` to include and `E` to exclude.\n\n\n    ```\n            getParameters: function(oNavigateParams) {\n                var aCustomSelectionVariant = [];\n                var oCustomSelectionVariant = {\n                    path: \"TaxTarifCode\",\n                    operator: \"EQ\",\n                    value1: 5,\n                    value2: null,\n                    sign: \"I\"\n                };\n                aCustomSelectionVariant.push(oCustomSelectionVariant);\n                return aCustomSelectionVariant;\n            },\n    \n            param2: function(oNavigateParams) {\n                oNavigateParams.TaxTarifCode = '3';\n                return oNavigateParams;\n            }\n    ```\n\n    > ### Sample Code:  \n    > Adding parameters during navigation\n    > \n    > ```\n    > getParameters: function(oNavigateParams,oSelectionVariantParams) {\n    >  \n    >  \n    >             // to get the select option property names, make use of this to check what values are available to modify\n    >             var aSelectOptionNames = oSelectionVariantParams.getSelectOptionsPropertyNames();\n    >  \n    >             var oFilter1 = oSelectionVariantParams.getSelectOption(\"Filter1\");\n    >             var oFilter2 = oSelectionVariantParams.getSelectOption(\"Filter2\");\n    >  \n    >  \n    >             ///\n    >                 Your logic to extract values from oFilter1 and oFilter2\n    >             ///\n    >  \n    >  \n    >  \n    >             /// logic to remove Filter1 and Filter2\n    >             /// assigning empty values to Filter1 and Filter2, with ignoreEmptyString as true, this will be removed from the Selection Variant\n    >  \n    >  \n    >                 var Filter1 = {\n    >                     path: \"Filter1\",\n    >                     operator: \"EQ\",\n    >                     value1: \"\",\n    >                     value2: null,\n    >                     sign: \"I\"\n    >                 };\n    >  \n    >  \n    >                 var Filter2 = {\n    >                     path: \"Filter2\",\n    >                     operator: \"EQ\",\n    >                     value1: \"\",\n    >                     value2: null,\n    >                     sign: \"I\"\n    >                 };\n    >  \n    >  \n    >             /// logic to remove Filter1 and Filter2\n    >  \n    >  \n    >             var aCustomSelectionVariant = [];\n    >             var oFilter3 = {\n    >                 path: \"Filter3PropertyName\",\n    >                 operator: \"EQ\",\n    >                 value1: \"< Value you want to include >\",\n    >                 value2: null,\n    >                 sign: \"I\"\n    >             };\n    >             aCustomSelectionVariant.push(oFilter3);\n    >             aCustomSelectionVariant.push(oFilter2);\n    >             aCustomSelectionVariant.push(oFilter1);\n    >             return {\n    >                 selectionVariant: aCustomSelectionVariant,\n    >                 ignoreEmptyString: true\n    >             };\n    >         },\n    > ```\n\n    > ### Note:  \n    > `ignoreEmptyString` and `selectionVariant` are deprecated from the 1.54 release. Alternatively you can use `bIgnoreEmptyString` and `aSelectionVariant`.\n\n2.  Configure the descriptor file.\n\n    1.  Add a controller extension and specify the path to the custom controller.\n\n        ```\n        \"extends\": {\n                \"extensions\": {\n                        \"sap.ui.controllerExtensions\": {\n                                \"sap.ovp.app.Main\": {\n                                                \"controllerName\": \"my_app.ext.controller.OverViewPageExt\"\n                                }\n                        }\n                }\n        }\n        \n        ```\n\n        > ### Note:  \n        > If a controller file already exists, add the new extension code in the same file.\n\n\n3.  Configure the `customParams` card setting type to return custom parameters. Enter the name of the custom parameter function defined in your custom controller file.\n\n    ```\n    \"card002_ReorderSoon\": {\n      \"model\": \"purchaseOrder\",\n      \"template\": \"sap.ovp.cards.list\",\n      \"settings\": {\n        \"title\": \"reorder Soon\",\n        \"subTitle\": \"Less than 10 in stock\",\n        \"listType\": \"condensed\",\n        \"entitySet\": \"PurchaseSet\",\n        \"customParams\": \"<function-name>\"    // Depending on the logic you define in step 1, input the function name.\n        ...\n        ...\n    ```\n\n\n",
  "excerpt": "<!-- loio40051b67edaf457cad37d552c37b497d --> Custom Navigation Parameters Add custom parameters for intent-based navigation to the target application. Procedure 1.  Define the onCustomParams function...",
  "wordCount": 539,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}