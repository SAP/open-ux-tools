{
  "id": "sapui5-docs-03-get-started-step-15-reuse-an-existing-route-877d57e-md",
  "title": "Step 15: Reuse an Existing Route",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-15-reuse-an-existing-route-877d57e.md",
  "lastModified": "2025-09-01T18:17:10.455Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Reuse",
    "Existing",
    "Route"
  ],
  "headers": [
    "Step 15: Reuse an Existing Route",
    "Preview",
    "Coding",
    "webapp/view/employee/overview/EmployeeOverviewContent.view.xml",
    "webapp/controller/employee/overview/EmployeeOverviewContent.controller.js"
  ],
  "content": "<!-- loio877d57e3b5654b19a2d2e5190dc43b0d -->\n\n# Step 15: Reuse an Existing Route\n\nThe *Employees* table displays employee data. However, the resumes of the employees are not accessible from this view yet. We could create a new route and a new view to visualize the resume again, but we could also simply reuse an existing route to cross-link the resume of a certain employee. In this step, we will add a feature that allows users to directly navigate to the resume of a certain employee. We will reuse the *Resume* page that we have created in an earlier step. This example illustrates that there can be multiple navigation paths that direct to the same page.\n\n\n\n## Preview\n\n  \n  \n**Navigation to an existing route from a table item**\n\n![](images/Tutorial_Navigation_and_Routing_Step_15_d97fe6d.png \"Navigation to an existing route from a table item\")\n\n\n\n## Coding\n\nYou can view and download all files in the *Samples* in the Demo Kit at [Routing and Navigation - Step 15](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.navigation/sample/sap.ui.core.tutorial.navigation.15).\n\n\n\n## webapp/view/employee/overview/EmployeeOverviewContent.view.xml\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Table id=\"employeesTable\"\n\t\titems=\"{/Employees}\"\n\t\t\titemPress=\".onItemPressed\">\n\t\t<headerToolbar>\n\t\t\t...\n\t\t</headerToolbar>\n\t\t<columns>\n\t\t\t...\n\t\t</columns>\n\t\t<items>\n\t\t\t<ColumnListItem type=\"Active\">\n\t\t\t\t<cells>\n\t\t\t\t\t...\n\t\t\t\t</cells>\n\t\t\t</ColumnListItem>\n\t\t</items>\n\t</Table>\n</mvc:View>\n```\n\nIn the `EmployeeOverviewContent` view we register an event handler for the `itemPress` event and set the type attribute of the `ColumnListItem` to `Active` so that we can choose an item and trigger the navigation.\n\n\n\n## webapp/controller/employee/overview/EmployeeOverviewContent.controller.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/ViewSettingsDialog\",\n\t\"sap/m/ViewSettingsItem\"\n], function(\n\tBaseController,\n\tFilter,\n\tFilterOperator,\n\tSorter,\n\tViewSettingsDialog,\n\tViewSettingsItem\n) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\", {\n\t\t...\n\t\t_syncViewSettingsDialogSorter: function (sSortField, bSortDescending) {\n\t\t\t// the possible keys are: \"EmployeeID\" | \"FirstName\" | \"LastName\"\n\t\t\t// Note: no input validation is implemented here\n\t\t\tthis._oVSD.setSelectedSortItem(sSortField);\n\t\t\tthis._oVSD.setSortDescending(bSortDescending);\n\t\t},\n\t\tonItemPressed: function (oEvent) {\n\t\t\tvar oItem, oCtx, oRouter;\n\t\t\toItem = oEvent.getParameter(\"listItem\");\n\t\t\toCtx = oItem.getBindingContext();\n\t\t\tthis.getRouter().navTo(\"employeeResume\",{\n\t\t\t\temployeeId : oCtx.getProperty(\"EmployeeID\"),\n\t\t\t\t\"?query\": {\n\t\t\t\t\ttab: \"Info\"\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n});\n```\n\nNext we add the `itemPress` handler `.onItemPressed` to the `EmployeeOverviewContent` controller. It reads from the binding context which item has been chosen and navigates to the `employeeResume` route. We have already added this route and the corresponding target in a previous step and can now reuse it. From now on it is possible to navigate to the `employeeResume` route from our employee table as well as from the employee detail page created in an earlier step \\(the route name is `employee`\\).\n\n",
  "excerpt": "<!-- loio877d57e3b5654b19a2d2e5190dc43b0d --> Step 15: Reuse an Existing Route The Employees table displays employee data. However, the resumes of the employees are not accessible from this view yet. ...",
  "wordCount": 380,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}