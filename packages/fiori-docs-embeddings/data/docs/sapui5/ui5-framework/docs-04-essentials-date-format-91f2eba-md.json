{
  "id": "sapui5-docs-04-essentials-date-format-91f2eba-md",
  "title": "Date Format",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/date-format-91f2eba.md",
  "lastModified": "2025-09-01T18:17:10.507Z",
  "tags": [
    "ui5-framework",
    "md",
    "Date",
    "Format"
  ],
  "headers": [
    "Date Format",
    "Instantiation",
    "Parameters",
    "Date Pattern",
    "Style",
    "Format with IANA time zone ID",
    "Mapping of Deprecated Time Zones",
    "Relative Format",
    "Interval",
    "Parsing"
  ],
  "content": "<!-- loio91f2eba36f4d1014b6dd926db0e91070 -->\n\n# Date Format\n\nThe `sap.ui.core.format.DateFormat` class can be used to parse a string representing a date, time, or the combination of date and time into a JavaScript date object and vice versa \\(also known as format\\).\n\n`DateFormat` formats and parses date and time values according to a set of format options. It can also be used to format intervals. A pattern base on Locale Data Markup Language \\(LDML\\) date format notation can be given and the date is formatted following the given pattern. `DateFormat` can also format the date and time into relative values on \"day\" level.\n\nAn `sap.ui.core.format.DateFormat` instance takes the time zone from `sap/base/i18n/Localization.getTimezone` and considers it when using the `format` and `parse` methods. This means that dates are converted to the configured time zone. However, for instances created with `sap.ui.core.format.DateFormat#getDateTimeWithTimezoneInstance`, the `format` and `parse` methods accept a time zone parameter which is preferred over the `timezone` configuration parameter from `sap/base/i18n/Localization.getTimezone`.\n\nIf no time zone is configured, the browser's local time zone is used.\n\n\n\n## Instantiation\n\nYou instantiate of `sap.ui.core.format.DateFormat` by calling the `getter` defined on the `DateFormat` \\(and not by calling the constructor\\):\n\n```js\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance();\n// or\nvar oDateTimeFormat = sap.ui.core.format.DateFormat.getDateTimeInstance();\n// or\nvar oDateTimeWithTimezoneFormat = sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance();\n// or\nvar oTimeFormat = sap.ui.core.format.DateFormat.getTimeInstance();\n```\n\n\n\n<a name=\"loio91f2eba36f4d1014b6dd926db0e91070__section_params\"/>\n\n## Parameters\n\nThere are several parameters which affect the final result of formatting and parsing a date. If no parameter is set, the default setting defined in the current locale is used to format and parse the date.\n\n\n\n### Date Pattern\n\n`format` \\(recommended\\):\n\nThe format string does contain pattern symbols \\(e.g. `yMMMd` or `Hms`\\) and will be converted into the pattern in the used locale, which matches the wanted symbols best.\n\nThe symbols must be in canonical order, that is: Era \\(`G`\\), Year \\(`y`/`Y`\\), Quarter \\(`q`/`Q`\\), Month \\(`M`/`L`\\), Week \\(`w`/`W`\\), Day-Of-Week \\(`E`/`c`\\), Day \\(`d`/`D`\\), Hour \\(`h`/`H`/`k`/`K`\\), Minute \\(`m`\\), Second \\(`s`\\), Timezone \\(`z`/`Z`/`v`/`V`/`O`/`X`/`x`\\).\n\n```js\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n\tformat: \"yMMMd\"\n});\n\noDateFormat.format(UI5Date.getInstance()); // string in locale de \"29. Jan. 2017\"; string in locale en \"Jan 29, 2017\" \n```\n\n`pattern`: A date pattern in LDML date format notation. The date is formatted based on the given pattern.\n\n```js\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n    pattern: \"EEE, MMM d, yyyy\"\n});\n\noDateFormat.format(UI5Date.getInstance()); //string in the same format as \"Thu, Jan 29, 2017\"\n```\n\n> ### Note:  \n> If you define `format` and `pattern`, the `format` will be ignored!\n\nThe letters which can be included in this pattern are explained in the following table:\n\n**Patterns**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nLetter\n\n</th>\n<th valign=\"top\">\n\nReplaced By\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`G` \n\n</td>\n<td valign=\"top\">\n\nera string for the current date\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`y` \n\n</td>\n<td valign=\"top\">\n\nyear\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Y` \n\n</td>\n<td valign=\"top\">\n\ncalendar year based on the calendar week\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Q` \n\n</td>\n<td valign=\"top\">\n\nquarter number\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`q` \n\n</td>\n<td valign=\"top\">\n\nquarter number in stand-alone format\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`M` \n\n</td>\n<td valign=\"top\">\n\nmonth\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`L` \n\n</td>\n<td valign=\"top\">\n\nmonth in stand-alone format\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`w` \n\n</td>\n<td valign=\"top\">\n\nweek number in year\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n\\(`W`\\)\n\n</td>\n<td valign=\"top\">\n\n\\(currently not supported\\) week number in month\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n\\(`D`\\)\n\n</td>\n<td valign=\"top\">\n\n\\(currently not supported\\) day number in year\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`d` \n\n</td>\n<td valign=\"top\">\n\nday number in month\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n\\(`F`\\)\n\n</td>\n<td valign=\"top\">\n\n\\(currently not supported\\) day of week in month\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`E` \n\n</td>\n<td valign=\"top\">\n\nday of week\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`c` \n\n</td>\n<td valign=\"top\">\n\nday of week in stand-alone format\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`u` \n\n</td>\n<td valign=\"top\">\n\nday number of week\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`a` \n\n</td>\n<td valign=\"top\">\n\nAM or PM\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`B` \n\n</td>\n<td valign=\"top\">\n\nflexible day period, e.g. \"afternoon\" or \"midnight\", for the time provided\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`j` \n\n</td>\n<td valign=\"top\">\n\nCan only be used in the `format` option, not in the `pattern`. It will be replaced by `h`, `H`, `K` or `k` depending on the locale preferred time cycle type \\(12-hour or 24-hour\\).\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`J` \n\n</td>\n<td valign=\"top\">\n\nCan only be used in the `format` option, not in the `pattern`. It will be replaced by `h`, `H`, `K` or `k`. However unlike `j` it requests no `dayPeriod` marker such as \"am\" or \"pm\". It is typically used where there is enough context that the day period not necessary. For example, with `jmm`, \"18:00\" could appear as \"6:00 PM\", while with `Jmm`, it would appear as \"6:00\" \\(no PM\\).\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`H` \n\n</td>\n<td valign=\"top\">\n\nhour \\(0-23\\)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`k` \n\n</td>\n<td valign=\"top\">\n\nhour \\(1-24\\)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`K` \n\n</td>\n<td valign=\"top\">\n\nhour \\(0-11\\)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`h` \n\n</td>\n<td valign=\"top\">\n\nhour \\(1-12\\)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`m` \n\n</td>\n<td valign=\"top\">\n\nminute\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`s` \n\n</td>\n<td valign=\"top\">\n\nsecond\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`S` \n\n</td>\n<td valign=\"top\">\n\nfractional second\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`z` \n\n</td>\n<td valign=\"top\">\n\ntime zone\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Z` \n\n</td>\n<td valign=\"top\">\n\ntime zone in RFC 822 format\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`X` \n\n</td>\n<td valign=\"top\">\n\ntime zone in ISO 8601 format\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`V` \n\n</td>\n<td valign=\"top\">\n\ntime zone as IANA time zone ID, e.g. \"America/New\\_York\"\n\n</td>\n</tr>\n</table>\n\n\n\n### Style\n\nThis can be set with either `empty`, `short`, `medium` or `long`. If no pattern is given, a locale-dependent default date pattern of that style is used which is extracted from the current locale.\n\nIf in addition to `style` `pattern` or `format` is defined, the `style` is ignored.\n\nIf you use the `datetime` instance by calling `getDateTimeInstance`, you can define different styles for `date` and `time`. For example, `medium/short` defines medium style for the `date` and short style for the `time`.\n\n\n\n### Format with IANA time zone ID\n\nWhen using `DateFormat.getDateTimeWithTimezoneInstance`, the time zone can be specified in the `format` method:\n\n```js\nvar oDateTimeWithTimezoneFormat = sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance();\n\noDateTimeWithTimezoneFormat.format(UI5Date.getInstance(), \"America/New_York\") // Returns \"10.02.2022, 10:01:14 America, New York\"\n```\n\n\n\n### Mapping of Deprecated Time Zones\n\nThe [IANA](https://www.iana.org/time-zones) standard classifies certain time zone IDs as deprecated and defines substitutes for them. With [CLDR version 46](https://cldr.unicode.org/downloads/cldr-46#supplemental-data-changes), these time zones are removed, and locale-specific time zone name translations are no longer available for them. To remain backward-compatible, SAPUI5 maps deprecated IANA time zone IDs to the related preferred IANA time zone IDs when formatting or parsing time zones. For example, in an English-language locale the translated text `Americas, Nipigon` is now formatted to `Americas, Toronto`. In case of parsing, the translated texts cannot be parsed anymore as they are no longer available, e.g. in an English-language locale `Americas, Nipigon` could no longer be parsed. If a time zone ID is entered for parsing, the mapped equivalent would be parsed, e.g. if `America/Nipigon` is entered for parsing, it would now be parsed as `America/Toronto`.\n\nBelow you can find a list of all deprecated time zone IDs and their substitutes.\n\n**Time Zone Mapping**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nDeprecated time zone\n\n</th>\n<th valign=\"top\">\n\nPreferred time zone\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`America/Nipigon`\n\n`America/Thunder_Bay`\n\n</td>\n<td valign=\"top\">\n\n`America/Toronto` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`America/Pangnirtung` \n\n</td>\n<td valign=\"top\">\n\n`America/Iqaluit` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`America/Rainy_River` \n\n</td>\n<td valign=\"top\">\n\n`America/Winnipeg` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`America/Santa_Isabel` \n\n</td>\n<td valign=\"top\">\n\n`America/Tijuana` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`America/Yellowknife` \n\n</td>\n<td valign=\"top\">\n\n`America/Edmonton` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Europe/Uzhgorod`\n\n`Europe/Zaporozhye`\n\n</td>\n<td valign=\"top\">\n\n`Europe/Kiev` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Asia/Choibalsan` \n\n</td>\n<td valign=\"top\">\n\n`Asia/Ulaanbaatar` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Australia/Currie` \n\n</td>\n<td valign=\"top\">\n\n`Australia/Hobart` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Pacific/Johnston` \n\n</td>\n<td valign=\"top\">\n\n`Pacific/Honolulu` \n\n</td>\n</tr>\n</table>\n\n\n\n### Relative Format\n\nRelative format on \"day\"' level is only supported by the date instance but not the date time or the time instance.\n\n-   `relative`: if this is set to `true`, the date is formatted relatively to the actual date if it's within the given date range.\n\n-   `relativeRange`: the day range used for relative formatting. The default is set to `6` which means only dates within the last six days, the acutal date, and the next six days are formatted relatively.\n\n-   `relativeScale`: the relative scale is chosen depending on the difference between the given date and now, possible relative scales are: `year`, `month`, `week`, `day`, `hour`, `minute`, `second`, and `auto`\n\n    If `auto` is set, the scale is chosen dependent on the actual difference.\n\n\n```js\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n    relative: true\n});\n \nvar nMS = 1000 * 60 * 60 * 24; // milliseconds in a day\nvar oDate = UI5Date.getInstance(Date.now() - nMS);\noDateFormat.format(oDate); // returns \"yesterday\"\n \noDate = UI5Date.getInstance(Date.now() + 7 * nMS);\noDateFormat.format(oDate); // isn't returned in relative format because the default value of relativeRange is [6|-6,]\n```\n\n\n\n### Interval\n\n`interval`: If this is set to `true`, the `DateFormat` is capable to format two dates as an interval. The `format` method expects an array with two dates as the first argument.\n\nIf the format option is set with necessary symbols, the `DateFormat` displays the fields which have the same value between the two dates only once in the result string. For example, the interval \"Jan 10, 2008 - Jan 12, 2008\" will be formatted as \"Jan 10-12, 2008\". Otherwise the two given dates are formatted separately and concatenated with locale-dependent pattern.\n\n```js\nvar oFormat = sap.ui.core.format.DateFormat.getInstance({\n\tformat: \"yMMMd\",\n\tinterval: true\n});\nvar oDate1 = UI5Date.getInstance(2017, 3, 11);\nvar oDate2 = UI5Date.getInstance(2017, 4, 11);\noFormat.format([oDate1, oDate2]);  \n// string in locale de \"11. Apr. – 11. Mai 2017\"; \n// string in locale en \"Apr 11 – May 11, 2017\"  \n```\n\n\n\n### Parsing\n\n```js\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n    pattern: \"EEE, MMM d, yyyy\"\n});\n \noDateFormat.parse(\"Thu, Feb 10, 2022\") // Returns a JavaScript Date object\n```\n\n`strictParsing`: If this is set to `true`, the `date` string is validated during parsing. If it doesn't pass the validation, `null` is returned.\n\n```js\nvar oDateFormat = sap.ui.core.format.DateFormat.getDateInstance({\n    pattern: \"EEE, MMM d, yyyy\",\n    strictParsing: true\n});\n\noDateFormat.parse(\"Thu, Feb 31, 2022\") // Returns null\n```\n\nWhen using `DateFormat.getDateTimeWithTimezoneInstance`, the time zone can be specified in the `parse` method:\n\n```js\nvar oDateTimeWithTimezoneFormat = sap.ui.core.format.DateFormat.getDateTimeWithTimezoneInstance();\n\noDateTimeWithTimezoneFormat.parse(\"10.02.2022, 10:01:14 America/New_York\", \"America/New_York\") // Returns [JavaScript Date object, \"America/New_York\"]\n```\n\n**Related Information**  \n\n\n[API Reference: `sap.ui.core.format.DateFormat`](https://ui5.sap.com/#/api/sap.ui.core.format.DateFormat)\n\n",
  "excerpt": "<!-- loio91f2eba36f4d1014b6dd926db0e91070 --> Date Format The sap.ui.core.format.DateFormat class can be used to parse a string representing a date, time, or the combination of date and time into a Ja...",
  "wordCount": 1727,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}