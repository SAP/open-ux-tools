{
  "id": "sapui5-docs-05-developing-apps-css-styling-issues-9d87f92-md",
  "title": "CSS Styling Issues",
  "category": "ui5-framework",
  "path": "docs/05_Developing_Apps/css-styling-issues-9d87f92.md",
  "lastModified": "2025-09-01T18:17:10.559Z",
  "tags": [
    "ui5-framework",
    "md",
    "CSS",
    "Styling",
    "Issues"
  ],
  "headers": [
    "CSS Styling Issues",
    "Don't override control class styling directly",
    "Don't style DOM element names directly",
    "Don't use generated IDs in CSS selectors",
    "Don't create selectors that are not namespaced",
    "Don't use hard-coded colors, font sizes and images if the app should be themable",
    "Don't use theming parameters for attributes they were not intended for"
  ],
  "content": "<!-- loio9d87f925dfbb4e99b9e2963693aa00ef -->\n\n# CSS Styling Issues\n\nThis section lists some of the most important rules relating to CSS styling in SAPUI5.\n\nSAPUI5 controls are styled with CSS, and as applications can provide their own CSS, they can adapt the styling. However, the deeper such adaptations are, the more likely is it that they break with future SAPUI5 updates or with other libraries and apps getting involved. If you follow the rules listed below, you will reduce the risk of this happening.\n\n\n\n<a name=\"loio9d87f925dfbb4e99b9e2963693aa00ef__1\"/>\n\n## Don't override control class styling directly\n\nSAPUI5 does not guarantee the stability of style class names across versions. If the naming of style classes is changed in future versions, styling rules will no longer be applied to targeted elements. In addition, overriding control class styles directly might lead to style clashes when applications are run in shared runtime environments \\(like SAP Fiori launchpad\\).\n\nAdd your own namespaced classes instead.\n\n**Examples**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nBad Example\n\n</th>\n<th valign=\"top\">\n\nGood Example\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n```\n\n.sapMInputBaseError {\n\tfont-weight: bold;\n}\n```\n\n\n\n</td>\n<td valign=\"top\">\n\nAdd a custom CSS class to the control in those situations where you want additional styling:\n\n`oButton.addStyleClass(\"poaAppError\");`\n\nThen provide the style for this class:\n\n```\n\n.poaAppError {\n\tfont-weight: bold;\n}\n\n```\n\n\n\n</td>\n</tr>\n</table>\n\n\n\n<a name=\"loio9d87f925dfbb4e99b9e2963693aa00ef__2\"/>\n\n## Don't style DOM element names directly\n\nStyling DOM elements directly will lead to unpredictable results, as SAPUI5 does not guarantee the stability of the inner-control DOM-tree over time. In addition, this might lead to styling clashes when applications run in shared runtime environments \\(like SAP Fiori launchpad\\) or when custom HTML is added. It is better to limit styling changes to specifically used CSS classes.\n\n**Examples**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nBad Example\n\n</th>\n<th valign=\"top\">\n\nGood Example\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n```html\n\ndiv {\n\twidth: 120px;\n}\n```\n\n\n\n</td>\n<td valign=\"top\">\n\n```\n\n.myStyleClass {\n\twidth: 120px;\n}\n```\n\n\n\n</td>\n</tr>\n</table>\n\n\n\n<a name=\"loio9d87f925dfbb4e99b9e2963693aa00ef__3\"/>\n\n## Don't use generated IDs in CSS selectors\n\nSAPUI5 applications can create dynamic IDs for elements. Do not use these IDs as selectors in custom CSS as they can change over time. It is better to add and use CSS classes instead.\n\n**Examples**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nBad Example\n\n</th>\n<th valign=\"top\">\n\nGood Example\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n```\n\n#__view1__button0 {\n\tfont-weight: bold;\n}\n```\n\n\n\n</td>\n<td valign=\"top\">\n\nAdd a style class as described above and then define the following:\n\n```\n\n.myEmphasizedButton {\n\tfont-weight: bold;\n}\n```\n\n\n\n</td>\n</tr>\n</table>\n\n\n\n<a name=\"loio9d87f925dfbb4e99b9e2963693aa00ef__4\"/>\n\n## Don't create selectors that are not namespaced\n\nCustom selectors and CSS classes that are not namespaced might lead to style clashes in shared runtime environments like SAP Fiori launchpad, or when other JavaScript libraries are included that might use the same CSS class names.\n\n**Examples**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nBad Example\n\n</th>\n<th valign=\"top\">\n\nGood Example\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n```\n\n.title {\n\tfont-weight: bold;\n}\n```\n\n\n\n</td>\n<td valign=\"top\">\n\n```\n\n.poaAppTitle {\n\tfont-weight: bold;\n}\n```\n\n\n\n</td>\n</tr>\n</table>\n\n\n\n<a name=\"loio9d87f925dfbb4e99b9e2963693aa00ef__5\"/>\n\n## Don't use hard-coded colors, font sizes and images if the app should be themable\n\nThemability of applications relies on LESS calculations within the SAPUI5 theme CSS. Hard-coding colors, fonts and images in applications and custom controls means that these colors are not modified by theming, which leads to design issues or accessibility issues \\(for example, in the High Contrast Black \\(HCB\\) theme\\). You can use special CSS classes instead that are supplied by these LESS calculations.\n\n**Examples**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nBad Example\n\n</th>\n<th valign=\"top\">\n\nGood Example\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n```\n\n.myCustomHTML {\n\tcolor: #FFF;\n\tbackground-color: blue;\n}\n```\n\n\n\n</td>\n<td valign=\"top\">\n\nAdd the CSS classes `sapThemeTextInverted` and `sapThemeHighlight-asBackgroundColor` to your custom HTML element.\n\n</td>\n</tr>\n</table>\n\nSee also: [CSS Classes for Theme Parameters](../04_Essentials/css-classes-for-theme-parameters-ea08f53.md).\n\n\n\n<a name=\"loio9d87f925dfbb4e99b9e2963693aa00ef__6\"/>\n\n## Don't use theming parameters for attributes they were not intended for\n\nSAPUI5 applications come with a built-in set of parameters which are used for theme-dependent styling, mainly for colors. They are accessible using the `sap.ui.core.theming.Parameters.get()` API \\(and for library builds using the OpenUI5 build mechanism, also in the \\*.less files in control libraries\\). These theme parameters have descriptive names, meaning that by looking at a parameter name, you can see the usage it has been defined for.\n\nTo ensure that you do not use combinations of theme colors which may clash after future theme changes, do not use background colors for fonts or vice versa, for example, and do not use border colors for anything else but borders.\n\n**Examples**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nBad Example\n\n</th>\n<th valign=\"top\">\n\nGood Example\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n```js\n\nvar sColor = sap.ui.core.theming.Parameters.get(\"sapUiButtonBorderColor\");\n$(oSomeDomElement).css(\"background-color\", sColor);\n```\n\n\n\n</td>\n<td valign=\"top\">\n\n```js\n\nvar sColor = sap.ui.core.theming.Parameters.get(\"sapUiButtonBorderColor\");\n$(oSomeDomElement).css(\"border-color\", sColor);\n```\n\n\n\n</td>\n</tr>\n</table>\n\nSee also: [Namespace sap.ui.core.theming.Parameters](https://ui5.sap.com/#/api/sap.ui.core.theming.Parameters).\n\n",
  "excerpt": "<!-- loio9d87f925dfbb4e99b9e2963693aa00ef --> CSS Styling Issues This section lists some of the most important rules relating to CSS styling in SAPUI5. SAPUI5 controls are styled with CSS, and as appl...",
  "wordCount": 792,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}