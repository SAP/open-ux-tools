{
  "id": "sapui5-docs-03-get-started-step-2-kpi-tile-and-chart-tile-on-the-start-page-3981331-md",
  "title": "Step 2: KPI Tile and Chart Tile on the Start Page",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-2-kpi-tile-and-chart-tile-on-the-start-page-3981331.md",
  "lastModified": "2025-09-01T18:17:10.461Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "KPI",
    "Tile",
    "and",
    "Chart",
    "the",
    "Start",
    "Page"
  ],
  "headers": [
    "Step 2: KPI Tile and Chart Tile on the Start Page",
    "Preview",
    "GenericTile with NumericContent",
    "Startpage.view.xml",
    "Startpage.view.xml",
    "Startpage.controller.js",
    "GenericTile with BulletMicroChart",
    "Startpage.view.xml",
    "Startpage.controller.js"
  ],
  "content": "<!-- loio3981331cbc074ec398ae735e7b449cce -->\n\n# Step 2: KPI Tile and Chart Tile on the Start Page\n\nIn this step, we will create our start page with the KPI Tile `(GenericTile` with `NumericContent)` and Chart Tile `(GenericTile` with `MicroChart)`.\n\n\n\n<a name=\"loio3981331cbc074ec398ae735e7b449cce__section_jtg_1sp_f1b\"/>\n\n## Preview\n\nWhen you have completed this step, your start page will include the following tiles:\n\n![](images/Step1_1_f71dec0.png)\n\n\n\n<a name=\"loio3981331cbc074ec398ae735e7b449cce__section_pjv_mw2_j1b\"/>\n\n## GenericTile with NumericContent\n\nLet's start by creating the first `GenericTile` that shows the progress of the production process as percentage data \\(compared to all production steps\\). By selecting the **Production Process** tile, the user can navigate to another view to see the complete production process. We will implement this navigation in step 5.\n\nYou can view and download this step in the Demo Kit at [Ice Cream Machine - Step 2 - KPI Tile and Chart Tile in Start Page](https://ui5.sap.com/#/entity/sap.suite.ui.commons.tutorial.icecream/sample/sap.suite.ui.commons.tutorial.icecream.02).\n\n\n\n### Startpage.view.xml\n\n```xml\n<mvc:View\n    controllerName=\"sap.suite.ui.commons.demokit.tutorial.icecream.02.controller.Startpage\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    xmlns:layout=\"sap.ui.layout\">\n    <Page title=\"{i18n>title}\">\n        <layout:VerticalLayout class=\"sapUiResponsiveMargin\">\n            <Title\n                titleStyle=\"H2\"\n                text=\"{i18n>startpageTilesGroupTitle}\"\n                class=\"sapUiTinyMarginBegin\" />\n            <layout:HorizontalLayout allowWrapping=\"true\">\n                <GenericTile\n                    class=\"sapUiTinyMarginBegin sapUiTinyMarginTop\"\n                    header=\"{i18n>startpagePFTileTitle}\"\n                    subheader=\"{i18n>startpagePFTileSubTitle}\">\n                    <tileContent>\n                        <TileContent>\n                            <content>\n                                <NumericContent\n                                    scale=\"%\"\n                                    value=\"{\n                                        path: 'process>/Nodes',\n                                        formatter: '.getProgress'\n                                    }\"\n                                    icon=\"sap-icon://factory\" />\n                            </content>\n                        </TileContent>\n                    </tileContent>\n                </GenericTile>\n            </layout:HorizontalLayout>\n        </layout:VerticalLayout>\n    </Page>\n</mvc:View>\n```\n\nFirst, we are going to add a `GenericTile` with the *header* and *subheader* properties in order to display the header and subheader . In the `TileContent` aggregation, the `TileContent` is added with a `NumericContent`. This lets you display a scale or unit with the *scale* property. The *value* property of the `NumericContent` displays the percentage value of the production progress by using a custom formatter. In our case, it is *.getProgress*. You can use any icon from the [SAPUI5 Icon Explorer](https://ui5.sap.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html) as the *icon* property.\n\nWe will create another `GenericTile` with `NumericContent` in a similar way, which will navigate to another view. You can see customer reviews there. The number of reviews is displayed in this `GenericTile`. Navigation to the reviews view is implemented in step 5.\n\n\n\n### Startpage.view.xml\n\n```xml\nmvc:View\n     controllerName=\"sap.suite.ui.commons.demokit.tutorial.icecream.02.controller.Startpage\"\n     xmlns:mvc=\"sap.ui.core.mvc\"\n     xmlns=\"sap.m\"\n     xmlns:layout=\"sap.ui.layout\">\n     <Page title=\"{i18n>title}\">\n         <layout:VerticalLayout class=\"sapUiResponsiveMargin\">\n             <Title\n                 titleStyle=\"H2\"\n                 text=\"{i18n>startpageTilesGroupTitle}\"\n                 class=\"sapUiTinyMarginBegin\" />\n             <layout:HorizontalLayout allowWrapping=\"true\">\n                ...\n                <GenericTile\n                     class=\"sapUiTinyMarginBegin sapUiTinyMarginTop\"\n                     header=\"{i18n>startpageUserReviewsTileTitle}\">\n                     <tileContent>\n                         <TileContent>\n                             <content>\n                                 <NumericContent\n                                     value=\"{\n                                         path: 'reviews>/UserReviews',\n                                         formatter: '.getEntityCount'\n                                     }\"\n                                         indicator=\"None\"\n                                         valueColor=\"Neutral\" />\n                             </content>\n                         </TileContent>\n                     </tileContent>\n                 </GenericTile>\n             </layout:HorizontalLayout>\n         </layout:VerticalLayout>\n     </Page>\n </mvc:View>\n```\n\nIn the `NumericContent`, we only want to display the number of user reviews. Since we don't want to show indicators, we set the *indicator* property to **None**. We are choosing **Neutral** as a value for the *valueColor* property to display a neutral semantic color.\n\n\n\n### Startpage.controller.js\n\n```js\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n    \"use strict\";\n    return Controller.extend(\"sap.suite.ui.commons.demokit.tutorial.icecream.02.controller.Startpage\", {\n        ...\n        getProgress: function(aNodes) {\n                   if (!aNodes || aNodes.length === 0) {\n                      return 0;\n                   }\n                   var iSum = 0;\n                   for (var i = 0; i < aNodes.length; i++) {\n                       iSum += aNodes[i].state === \"Positive\";\n                   }\n                   var fPercent = (iSum / aNodes.length) * 100;\n                   return fPercent.toFixed(0);\n                },\n                getEntityCount: function(entities) {\n                   return entities && entities.length || 0;\n                }\n    });\n});\n```\n\nThe *getProgress* function is the formatter function that belongs to the value binding of the `NumericContent` in the first `GenericTile`. It is used to return the ratio of positive process steps as compared to the complete number of process steps.\n\nTo get the number of user reviews in another `GenericTile`, we will add a new formatter called *.getEntityCount*. This formatter returns the number of entities found in the **reviews** JSON model.\n\n\n\n<a name=\"loio3981331cbc074ec398ae735e7b449cce__section_mpm_qbt_l1b\"/>\n\n## GenericTile with BulletMicroChart\n\n\n\nIn the second tile on the start page, you can find an overview of the project expenses. We will use the `BulletMicroChart` control for this overview.\n\n\n\n### Startpage.view.xml\n\n```xml\nmvc:View\n    controllerName=\"sap.suite.ui.commons.demokit.tutorial.icecream.02.controller.Startpage\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns=\"sap.m\"\n    xmlns:layout=\"sap.ui.layout\"\n    xmlns:microchart=\"sap.suite.ui.microchart\">\n    <Page title=\"{i18n>title}\">\n        <layout:VerticalLayout class=\"sapUiResponsiveMargin\">\n            <Title\n                titleStyle=\"H2\"\n                text=\"{i18n>startpageTilesGroupTitle}\"\n                class=\"sapUiTinyMarginBegin\" />\n            <layout:HorizontalLayout allowWrapping=\"true\">\n                                ...\n               <GenericTile\n                     class=\"sapUiTinyMarginBegin sapUiTinyMarginTop\"\n                     header=\"{\n                         parts: [\n                             'i18n>startpageCCTileTitle',\n                             'business>/year',\n                             'business>/currency'\n                         ],\n                         formatter: '.formatMessage'\n                     }\">\n                     <tileContent>\n                         <TileContent>\n                             <content>\n                                 <microchart:BulletMicroChart\n                                     size=\"Responsive\"\n                                     targetValue=\"{business>/plannedExpenses}\"\n                                     targetValueLabel=\"{\n                                        path: 'business>/plannedExpenses',\n                                        formatter: '.formatNumber'\n                                    }\"\n                                     actualValueLabel=\"{\n                                        path: 'business>/expenses',\n                                        formatter: '.formatNumber'\n                                    }\"\n                                     minValue=\"0\">\n                                     <microchart:actual>\n                                         <microchart:BulletMicroChartData\n                                             value=\"{business>/expenses}\"\n                                             color=\"Critical\" />\n                                     </microchart:actual>\n                                     <microchart:thresholds>\n                                         <microchart:BulletMicroChartData\n                                             value=\"{business>/expensesCritical}\"\n                                             color=\"Critical\" />\n                                         <microchart:BulletMicroChartData\n                                             value=\"{business>/budget}\"\n                                             color=\"Error\" />\n                                     </microchart:thresholds>\n                                 </microchart:BulletMicroChart>\n                             </content>\n                         </TileContent>\n                     </tileContent>\n                 </GenericTile> \n            </layout:HorizontalLayout>\n        </VBox>\n    </Page>\n</mvc:View>\n```\n\nWe are adding a new `GenericTile`. Here, we are setting only the *header* property of the tile because we don't need a subheader. We want to display only the Expenses overview. The `BulletMicroChart` is in the *TileContent*. Do not forget to add a namespace for the `sap.suite.ui.microchart` library in the *\\*.view.xml*.\n\nWe want to show our business data in the `BulletMicroChart`. To do so, we are adding the `BulletMicroChartData` element to the **actual** aggregation of the chart control. This data element has two properties:\n\n1.  The *value* property that is bound to a property in the data model\n\n2.  The *color* property that is set to **Critical** to show when the expenses are about to exceed the limit. This property shows the amount of money already spent on this project.\n\n\nSimilarly, we can add **thresholds** to the chart to show when our expenses become **critical** but still manageable. For expenses that are too high for the company, the **Error** color applies. This time, the *value* properties are directly bound to the properties in the data model. No formatting is needed as the values are used only by the chart and are not displayed directly.\n\nFinally, we will add a *targetValue* to our chart to display an indicator that shows the planned spending.\n\n\n\n### Startpage.controller.js\n\n```js\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/ui/core/format/NumberFormat\",\n    \"sap/base/strings/formatMessage\"\n], function(Controller, NumberFormat) {\n    \"use strict\";\n\n    return Controller.extend(\"sap.suite.ui.commons.demokit.tutorial.icecream.02.controller.Startpage\", {\n        ...\n        formatNumber: function(value) {\n            var oFloatFormatter = NumberFormat.getFloatInstance({\n                style: \"short\",\n                decimals: 1\n            });\n            return oFloatFormatter.format(value);\n        }\n    });\n});\n\n```\n\nSince the production of our ice cream has already cost us a lot of money and the monetary values are very high, we need to provide custom data labels in order to have a neat chart design. The custom data labels can be added via the *actualValueLabel* and *targetValueLabel* properties that are set on the `BulletMicroChart`. In both instances, we use data binding with a custom formatter function from the *Startpage.controller.js* file to format the values using a standard SAPUI5 number formatter.\n\n",
  "excerpt": "<!-- loio3981331cbc074ec398ae735e7b449cce --> Step 2: KPI Tile and Chart Tile on the Start Page In this step, we will create our start page with the KPI Tile (GenericTile with NumericContent) and Char...",
  "wordCount": 985,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}