{
  "id": "sapui5-docs-04-essentials-the-owner-component-a7a3138-md",
  "title": "The Owner Component",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/the-owner-component-a7a3138.md",
  "lastModified": "2025-09-01T18:17:10.548Z",
  "tags": [
    "ui5-framework",
    "md",
    "The",
    "Owner",
    "Component"
  ],
  "headers": [
    "The Owner Component",
    "What is the Owner Component?",
    "What is Handled by the Framework?",
    "What Needs to be Handled by the Application?",
    "Best Practices for Creating Controls"
  ],
  "content": "<!-- loioa7a313889e874a118c5e17803c958b24 -->\n\n# The Owner Component\n\nIf you wish to extend your view or controller, you must define the extension in the manifest.json of their owner component.\n\n\n\n<a name=\"loioa7a313889e874a118c5e17803c958b24__section_p1l_4by_jkb\"/>\n\n## What is the Owner Component?\n\nTechnically, the owner component is the `sap.ui.core.(UI)Component` instance which created \\(and thus \"owns\"\\) any `sap.ui.base.ManagedObject` instance. This of course includes all subclasses of `ManagedObject`, e.g. any SAPUI5 control, as well as views, fragments, and even other \\(UI\\)Components.\n\nOne of the most common use cases of the owner component is the extensibility of \\(UI\\)Components. The framework uses the owner component to identify [extension points](../08_Extending_SAPUI5_Applications/view-extension-403c050.md), [view modifications](../08_Extending_SAPUI5_Applications/view-modification-aa93e1c.md), and [controller extensions](using-controller-extension-21515f0.md) from the owner component's manifest.json.\n\n\n\n<a name=\"loioa7a313889e874a118c5e17803c958b24__section_tks_rby_jkb\"/>\n\n## What is Handled by the Framework?\n\nFor the most part, the framework takes care of setting and propagating the owner component throughout all framework-managed control and Component creation mechanisms. This includes the following:\n\n-   `sap.ui5/rootView` creation during Component startup,\n-   view and Component creation via routing \\(based on the `sap.ui5/routing/...` configuration\\),\n-   creation of nested Components defined in the `sap.ui5/componentUsages` section via the `sap.ui.core.Component#createComponent` factory,\n-   fragment creation via `sap.ui.core.mvc.Controller#loadFragment`;\n\n    > ### Note:  \n    > This applies **only if the controller has an owner component assigned to it**, which is the case if it was created via a framework-managed mechanism or the application follows the best practices given below.\n\n-   nested views and fragments automatically receive their owner component from the artifact they're contained in,\n\n    e.g. if a fragment is contained in a view \\(for example as the content of a `dependents` aggregation\\) it receives the same owner component as its containing view, and thus will receive extensions,\n\n-   factories called while an owner component is known will propagate it to any controls they create. This includes controls, views and fragments created from within `sap.ui.core.UIComponent#createContent` or `sap.ui.core.mvc.Controller#onInit`.\n\n    > ### Note:  \n    > The `then()` handler of an asynchronous view or fragment factory is **not** executed with an owner scope. To handle this scenario, see the best practices given below.\n\n\n> ### Note:  \n> The owner component for `ManagedObject`s is assigned by the framework at the time when they are created. **It is not updated afterwards,** for example if a control is moved from one Component's control tree to another.\n> \n> We advise you not to move controls over Component boundaries.\n\n\n\n<a name=\"loioa7a313889e874a118c5e17803c958b24__section_zmp_rwc_kkb\"/>\n\n## What Needs to be Handled by the Application?\n\nAny `ManagedObject` that is created outside the above-listed framework-managed features is not automatically assigned an owner component. This is a very common occurrence, since a lot of `ManagedObject`s \\(e.g. fragments\\) will be created after the startup of a Component at an unknown point in time. For example, an `sap.m.Dialog` with fragment content might only be created upon user interaction.\n\nSince the owner component is the carrier of extension information through its manifest.json, your views, fragments, and controllers rely on the connection to an owner component to look up any extension configuration and apply it accordingly. The framework cannot apply extensions for views, fragments, and controllers if no owner component is known. These scenarios must be handled by the application.\n\n\n\n<a name=\"loioa7a313889e874a118c5e17803c958b24__section_u13_jvr_nvb\"/>\n\n## Best Practices for Creating Controls\n\nWhenever possible, use one of the above-listed framework-managed control creation mechanisms.\n\nIf this is not possible, you can assign the correct owner component manually by retrieving the Component instance and wrapping any code that creates a `ManagedObject` inside a `runAsOwner()` call on the Component instance:\n\n```js\n// In this sample, the 'this' context is a controller instance\n// The controller class provides a shorthand getter for its owner component\nvar oComponent = this.getOwnerComponent();\n// oComponent is now the owner component instance which owns the controller\noComponent.runAsOwner(function() {\n    // create additional ManagedObjects here, e.g. via\n    //   * a View and Fragment factory\n    //   * or simply via a control's constructor\n    XMLView.create(...).then(function() {\n        // Due to the asynchronous nature of the XMLView factory\n        // the owner-component scope is lost again inside the 'then' handler!\n        // Make sure to call runAsOwner again if more controls are created here.\n    });\n    Fragment.load(....).then(...);\n    new Button(...);\n}.bind(this));\n```\n\n> ### Note:  \n> Since the owner-component scoping is only active during the execution of the `runAsOwner` function, the `then(...)` handlers of the factory promises are **not** scoped anymore! You would need to call `runAsOwner` again in such a case.\n\nIf `ManagedObject`s need to be created outside a controller instance, the static `sap.ui.core.Component.getOwnerComponentFor` function can be used:\n\n```js\n// 'oPage' is a examplary sap.m.Page control, the static API however accepts all ManagedObjects\n// Note: though all ManagedObjects can be passed to this function, the owner component can only\n//       be returned for ManagedObjects that have an owner component assigned already\nvar oComponent = Component.getOwnerComponentFor(oPage);\noComponent.runAsOwner(function() {\n    // same as in the above sample\n});\n```\n\n**Related Information**  \n\n\n[`sap.ui.core.Component.getOwnerComponentFor`](https://ui5.sap.com/#/api/sap.ui.core.Component/methods/sap.ui.core.Component.getOwnerComponentFor)\n\n[`sap.ui.core.Component.prototype.runAsOwner`](https://ui5.sap.com/#/api/sap.ui.core.Component/methods/runAsOwner)\n\n[`sap.ui.core.Component.getOwnerIdFor`](https://ui5.sap.com/#/api/sap.ui.core.Component/methods/sap.ui.core.Component.getOwnerIdFor)\n\n",
  "excerpt": "<!-- loioa7a313889e874a118c5e17803c958b24 --> The Owner Component If you wish to extend your view or controller, you must define the extension in the manifest.json of their owner component. <a name=\"l...",
  "wordCount": 791,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}