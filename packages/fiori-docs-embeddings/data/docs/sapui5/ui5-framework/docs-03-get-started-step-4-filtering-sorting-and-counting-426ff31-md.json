{
  "id": "sapui5-docs-03-get-started-step-4-filtering-sorting-and-counting-426ff31-md",
  "title": "Step 4: Filtering, Sorting, and Counting",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-4-filtering-sorting-and-counting-426ff31.md",
  "lastModified": "2025-09-01T18:17:10.474Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Filtering",
    "Sorting",
    "and",
    "Counting"
  ],
  "headers": [
    "Step 4: Filtering, Sorting, and Counting",
    "Preview",
    "Coding",
    "webapp/controller/App.controller.js",
    "webapp/view/App.view.xml",
    "webapp/i18n/i18n.properties"
  ],
  "content": "<!-- loio426ff318051a465191c861b51a74f00e -->\n\n# Step 4: Filtering, Sorting, and Counting\n\nIn this step, we add features to filter, sort, and count the user data by using the OData V4 model API to apply OData system query options `$filter`, `$orderby`, and `$count`.\n\n\n\n<a name=\"loio426ff318051a465191c861b51a74f00e__section_bt4_fxc_z1b\"/>\n\n## Preview\n\n  \n  \n**App now has a search field, the entries can be sorted, and you can see how many entities are loaded and how many more are available**\n\n![](images/Tutorial_OData_V4_Step_4_3ac4fcc.png \"App now has a search field, the entries can be sorted, and you can see how\n\t\t\t\t\tmany entities are loaded and how many more are available\")\n\n\n\n<a name=\"loio426ff318051a465191c861b51a74f00e__section_tsr_gxc_z1b\"/>\n\n## Coding\n\nYou can view and download all files at [OData V4 - Step 4](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.odatav4/sample/sap.ui.core.tutorial.odatav4.04).\n\n\n\n<a name=\"loio426ff318051a465191c861b51a74f00e__section_pvc_fyc_z1b\"/>\n\n## webapp/controller/App.controller.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\",\n\t\"sap/m/MessageBox\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/FilterType\",\n\t\"sap/ui/model/json/JSONModel\"\n], function (Controller, MessageToast, MessageBox, Sorter, Filter, FilterOperator, FilterType, JSONModel) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.core.tutorial.odatav4.controller.App\", {\n\n\t\tonInit : function () {\n\t\t\tvar oJSONData = {\n\t\t\t\tbusy : false,\n\t\t\t\torder : 0\n\t\t\t};\n\t\t\tvar oModel = new JSONModel(oJSONData);\n\t\t\tthis.getView().setModel(oModel, \"appView\");\n\t\t},\n\n\t\tonRefresh : function () {\n\t\t...\n\t\t},\n\n\t\t\t\t\t\tonSearch : function () {\n\t\t\tvar oView = this.getView(),\n\t\t\t\tsValue = oView.byId(\"searchField\").getValue(),\n\t\t\t\toFilter = new Filter(\"LastName\", FilterOperator.Contains, sValue);\n\n\t\t\toView.byId(\"peopleList\").getBinding(\"items\").filter(oFilter, FilterType.Application);\n\t\t},\n\n\t\tonSort : function () {\n\t\t\tvar oView = this.getView(),\n\t\t\t\taStates = [undefined, \"asc\", \"desc\"],\n\t\t\t\taStateTextIds = [\"sortNone\", \"sortAscending\", \"sortDescending\"],\n\t\t\t\tsMessage,\n\t\t\t\tiOrder = oView.getModel(\"appView\").getProperty(\"/order\");\n\n\t\t\tiOrder = (iOrder + 1) % aStates.length;\n\t\t\tvar sOrder = aStates[iOrder];\n\n\t\t\toView.getModel(\"appView\").setProperty(\"/order\", iOrder);\n\t\t\toView.byId(\"peopleList\").getBinding(\"items\").sort(sOrder && new Sorter(\"LastName\", sOrder === \"desc\"));\n\n\t\t\tsMessage = this._getText(\"sortMessage\", [this._getText(aStateTextIds[iOrder])]);\n\t\t\tMessageToast.show(sMessage);\n\t\t\t},\n\n\t\t_getText : function (sTextId, aArgs) {\n\t\t...\n\t\t}\n\t});\n});\n```\n\nWe add the `onSearch` and `onSort` event handlers for the *Search* field and the *Sort* button to the controller. We also enhance the `appView` model to store the active sorting order.\n\nThe **`onSearch`** event handler filters the table for people whose last name contains any string value entered in the *Search* field. We define a `sap.ui.model.Filter` and apply it to the binding of the `Table` using the `filter` method. The binding will then automatically retrieve filtered data from the OData V4 service and update the `Table`.\n\nWhen the request is triggered, only entities that match the given filter criteria are requested from the OData V4 service.\n\n> ### Note:  \n> Filters of OData services are case-sensitive. If you prefer a non case-sensitive search, implement it in the controller logic.\n\nThe **`onSort`** event handler requests the data unordered, or in ascending order, or descending order. Each time the *Sort* button is clicked, the next sort order is applied. The sorting is applied to the table by calling the `sort` method of the list binding with a new `sap.ui.model.Sorter`.\n\n> ### Note:  \n> The features of filtering and sorting can also be combined.\n\nWe add the `order` property to variable `oJSONData` in `onInit` method. This property stores the current sort order.\n\n\n\n<a name=\"loio426ff318051a465191c861b51a74f00e__section_pp2_mxc_z1b\"/>\n\n## webapp/view/App.view.xml\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.core.tutorial.odatav4.controller.App\"\n\tdisplayBlock=\"true\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Shell>\n\t\t<App busy=\"{appView>/busy}\" class=\"sapUiSizeCompact\">\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>peoplePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Table\n\t\t\t\t\t\t\tid=\"peopleList\"\n\t\t\t\t\t\t\tgrowing=\"true\"\n\t\t\t\t\t\t\tgrowingThreshold=\"10\"\n\t\t\t\t\t\t\titems=\"{\n\t\t\t\t\t\t\t\tpath: '/People',\n\t\t\t\t\t\t\t\tparameters: {\n\t\t\t\t\t\t\t\t\t$count: true\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\">\n\t\t\t\t\t\t\t<headerToolbar>\n\t\t\t\t\t\t\t\t<OverflowToolbar>\n\t\t\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t\t\t\t\t\t<SearchField\n\t\t\t\t\t\t\t\t\t\t\tid=\"searchField\"\n\t\t\t\t\t\t\t\t\t\t\twidth=\"20%\"\n\t\t\t\t\t\t\t\t\t\t\tplaceholder=\"{i18n>searchFieldPlaceholder}\"\n\t\t\t\t\t\t\t\t\t\t\tsearch=\".onSearch\"/>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tid=\"refreshUsersButton\"\n\t\t\t\t\t\t\t\t\t\t\ticon=\"sap-icon://refresh\"\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{i18n>refreshButtonText}\"\n\t\t\t\t\t\t\t\t\t\t\tpress=\".onRefresh\"/>\n\t\t\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t\t\tid=\"sortUsersButton\"\n\t\t\t\t\t\t\t\t\t\t\ticon=\"sap-icon://sort\"\n\t\t\t\t\t\t\t\t\t\t\ttooltip=\"{i18n>sortButtonText}\"\n\t\t\t\t\t\t\t\t\t\t\tpress=\"onSort\"/>\n\t\t\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t\t\t</OverflowToolbar>\n\t\t\t\t\t\t\t</headerToolbar>\n\t\t\t\t\t\t\t<columns>\n\t\t\t\t\t\t\t\t<Column id=\"userNameColumn\">\n\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>userNameLabelText}\"/>\n\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t<Column id=\"firstNameColumn\">\n\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>firstNameLabelText}\"/>\n\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t<Column id=\"lastNameColumn\">\n\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>lastNameLabelText}\"/>\n\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t\t<Column id=\"ageColumn\">\n\t\t\t\t\t\t\t\t\t<Text text=\"{i18n>ageLabelText}\"/>\n\t\t\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t\t</columns>\n\t\t\t\t\t\t\t<items>\n\t\t\t\t\t\t\t\t<ColumnListItem>\n\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t<Input value=\"{UserName}\"/>\n\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t<Input value=\"{FirstName}\"/>\n\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t<Input value=\"{LastName}\"/>\n\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t\t\t<Input value=\"{Age}\"/>\n\t\t\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t\t\t</items>\n\t\t\t\t\t\t</Table>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n\n```\n\nWe add the `$count : true` parameter to tell the OData service to send the number of entities. With this setting, we automatically get the full number of entities \\(20\\) and the number of displayed entities \\(10\\) beneath the *More* button.\n\n> ### Note:  \n> The live TripPin service does not support the `$count` parameter yet. If you use the live service instead of the mock server, as described in Step 2, leave out the `$count` parameter.\n\nIn the `OverflowToolbar`, we add a *Search* field and a *Sort* button with their events.\n\n\n\n<a name=\"loio426ff318051a465191c861b51a74f00e__section_etg_fyc_z1b\"/>\n\n## webapp/i18n/i18n.properties\n\n```\n...\n#XTOL: Tooltip for refresh data\nrefreshButtonText=Refresh Data\n\n#XTOL: Tooltip for sort\nsortButtonText=Sort by Last Name\n\n#XTXT: Placeholder text for search field\nsearchFieldPlaceholder=Type in a last name\n...\n# Messages\n...\n#XMSG: Message for refresh succeeded\nrefreshSuccessMessage=Data refreshed\n\n#MSG: Message for sorting\nsortMessage=Users sorted by {0}\n\n#MSG: Suffix for sorting by LastName, ascending\nsortAscending=last name, ascending\n\n#MSG: Suffix for sorting by LastName, descending\nsortDescending=last name, descending\n\n#MSG: Suffix for no sorting\nsortNone=the sequence on the server\n```\n\nWe add the missing texts to the properties file.\n\n**Related Information**  \n\n\n[Filtering](../04_Essentials/filtering-5338bd1.md \"The OData V4 Model supports server side filtering on lists.\")\n\n[Sorting](../04_Essentials/sorting-d2ce3f5.md \"The OData V4 model supports server side sorting on lists.\")\n\n[Query Options under *Querying Data* in the Basic Tutorial on the OData home page](http://www.odata.org/getting-started/basic-tutorial/#queryData)\n\n",
  "excerpt": "<!-- loio426ff318051a465191c861b51a74f00e --> Step 4: Filtering, Sorting, and Counting In this step, we add features to filter, sort, and count the user data by using the OData V4 model API to apply O...",
  "wordCount": 791,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}