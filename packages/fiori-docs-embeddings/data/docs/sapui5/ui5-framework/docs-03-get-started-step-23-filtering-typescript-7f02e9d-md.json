{
  "id": "sapui5-docs-03-get-started-step-23-filtering-typescript-7f02e9d-md",
  "title": "Step 23: Filtering \\(TypeScript\\)",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-23-filtering-typescript-7f02e9d.md",
  "lastModified": "2025-09-01T18:17:10.463Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Filtering",
    "TypeScript"
  ],
  "headers": [
    "Step 23: Filtering \\(TypeScript\\)",
    "Preview",
    "Coding",
    "webapp/controller/InvoiceList.controller.js",
    "webapp/view/InvoiceList.view.xml"
  ],
  "content": "<!-- loio7f02e9d71b0f41749a4e5df2b73cb2dd -->\n\n# Step 23: Filtering \\(TypeScript\\)\n\nIn this step, we add a search field for our product list and define a filter that represents the search term. When searching, the list is automatically updated to show only the items that match the search term.\n\n\n\n## Preview\n\n  \n  \n**A search field is displayed above the list**\n\n![A filtered list of invoices is displayed below the panel](images/UI5_Walkthrough_Step_23_472ab6b.png \"A search field is displayed above the list\")\n\n\n\n<a name=\"loio7f02e9d71b0f41749a4e5df2b73cb2dd__section_qx5_wch_ycb\"/>\n\n## Coding\n\nYou can view all files at [OpenUI5 TypeScript Walkthrough - Step 23: Filtering](https://github.com/sap-samples/ui5-typescript-walkthrough/tree/main/steps/23) and [download the solution as a zip file](https://sap-samples.github.io/ui5-typescript-walkthrough/ui5-typescript-walkthrough-step-23.zip).\n\n\n\n<a name=\"loio7f02e9d71b0f41749a4e5df2b73cb2dd__section_s2c_dsz_nzb\"/>\n\n## webapp/controller/InvoiceList.controller.js\n\nIn the controller of the invoice list view we add a new `onFilterInvoices` event handler function with an `event` of type `SearchField$SearchEvent` as import parameter.\n\nThe search field defines a parameter `query` that we access by calling `getParameter(\"query\")` on the `event` parameter.\n\nIf the query is not empty, we add a new filter object that searches in the `ProductName` for a given query string with filter operator `Contains`. The filter operator `FilterOperator.Contains` is **not** case-sensitive.\n\nWe get the invoice list by asking the view for the control with the ID \"invoiceList\". To achieve this, we make use of the helper function `byId`. On the list control we access the binding of the `items` aggregation to filter it with our newly constructed filter object. This will automatically filter the list by our search string, so that only the matching items are shown when the search is triggered.\n\nIf the query is empty, we filter the binding with an empty array. This makes sure that we see all list elements again. We could also add more filters to the array if we wanted to search more than one data field.\n\n```js\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\nimport { SearchField$SearchEvent } from \"sap/m/SearchField\";\nimport Filter from \"sap/ui/model/Filter\";\nimport FilterOperator from \"sap/ui/model/FilterOperator\";\nimport ListBinding from \"sap/ui/model/ListBinding\";\n\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class App extends Controller {\n    onInit(): void {\n        const viewModel = new JSONModel({\n            currency: \"EUR\"\n        });\n        this.getView()?.setModel(viewModel, \"view\");        \n    }\n\n    onFilterInvoices(event: SearchField$SearchEvent): void {\n        // build filter array\n        const filter = [];\n        const query = event.getParameter(\"query\");\n        if (query) {\n            filter.push(new Filter(\"ProductName\", FilterOperator.Contains, query));\n        }\n        // filter binding\n        const list = this.byId(\"invoiceList\");\n        const binding = list?.getBinding(\"items\") as ListBinding;\n        binding?.filter(filter);\n    }\n\n};\n```\n\n\n\n<a name=\"loio7f02e9d71b0f41749a4e5df2b73cb2dd__section_rx5_wch_ycb\"/>\n\n## webapp/view/InvoiceList.view.xml\n\nFirst, we specify \"invoiceList\" as an ID for the list control, so the event handler function `onFilterInvoices` we added to the controller of the invoice list view can identify the list when triggered.\n\nWe then remove the `headerText` property in the list control and use the `headerToolbar` aggregation with the `sap.m.Toolbar` assigned to it instead.. A toolbar control is way more flexible and can be adjusted as you like. To the toolbar control we add an `sap.m.Title` control displaying the title in the text attribute, a spacer, and the `sap.m.SearchField` with the width property set to 50% and the filter event handler function we defined in the controller assigned to the search event.\n\n```xml\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n   xmlns=\"sap.m\"\n   xmlns:core=\"sap.ui.core\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <List\n      id=\"invoiceList\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\"\n      items=\"{invoice>/Invoices}\" >\n      <headerToolbar>\n         <Toolbar>\n            <Title text=\"{i18n>invoiceListTitle}\"/>\n            <ToolbarSpacer/>\n            <SearchField \n               width=\"50%\" \n               search=\".onFilterInvoices\"/>\n         </Toolbar>\n      </headerToolbar>\n      ...\n</mvc:View>\n```\n\nThe search field is part of the list header, and therefore each change on the list binding will trigger a rerendering of the whole list, including the search field.\n\n**Related Information**  \n\n\n[API Reference: `sap.ui.model.Filter`](https://ui5.sap.com/#/api/sap.ui.model.Filter)\n\n[API Reference: `sap.ui.model.FilterOperator`](https://ui5.sap.com/#/api/sap.ui.model.FilterOperator)\n\n[API Reference: `sap.m.SearchField`](https://ui5.sap.com/#/api/sap.m.SearchField)\n\n",
  "excerpt": "<!-- loio7f02e9d71b0f41749a4e5df2b73cb2dd --> Step 23: Filtering \\(TypeScript\\) In this step, we add a search field for our product list and define a filter that represents the search term. When searc...",
  "wordCount": 568,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}