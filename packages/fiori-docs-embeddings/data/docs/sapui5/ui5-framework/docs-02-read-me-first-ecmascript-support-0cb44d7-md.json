{
  "id": "sapui5-docs-02-read-me-first-ecmascript-support-0cb44d7-md",
  "title": "ECMAScript Support",
  "category": "ui5-framework",
  "path": "docs/02_Read-Me-First/ecmascript-support-0cb44d7.md",
  "lastModified": "2025-09-01T18:17:10.437Z",
  "tags": [
    "ui5-framework",
    "md",
    "ECMAScript",
    "Support"
  ],
  "headers": [
    "ECMAScript Support",
    "Overview of Restrictions",
    "Defining and Loading SAPUI5 Modules",
    "ECMAScript Modules",
    "Asynchronous Factory Functions",
    "Expressions as Dependencies",
    "Spread Elements as Dependencies",
    "Template Literals as Dependencies",
    "Async Functions and Event Handlers",
    "SAPUI5 Lifecycle Hooks",
    "Control Event Listeners",
    "SAPUI5 Inheritance",
    "ECMAScript Classes",
    "Expressions as Class Name",
    "Variable Usages as Class Name",
    "Template Literals as Class Name",
    "Library Initialization",
    "Expressions as Parameter",
    "Variable Usages as Parameter",
    "Spread Elements as Parameter",
    "Template Literals as Parameter"
  ],
  "content": "<!-- loio0cb44d7a147640a0890cefa5fd7c7f8e -->\n\n# ECMAScript Support\n\nSince SAPUI5 1.125, the framework leverages features of modern ECMAScript, up to and including ES2023. You have to consider certain restrictions when using modern ECMAScript with your SAPUI5 project.\n\n> ### Caution:  \n> The restrictions described here apply to the usage of modern ECMAScript features in projects that are written in native JavaScript. If your project is written in TypeScript, you only have to make sure that the listed constraints are met by the transpiled code.\n\n\n\n<a name=\"loio0cb44d7a147640a0890cefa5fd7c7f8e__section_zhq_133_ryb\"/>\n\n## Overview of Restrictions\n\nThe following restrictions apply when you use modern ECMAScript:\n\n1.  Do not use ECMAScript modules, but use `sap.ui.define` / `sap.ui.require` for module loading.\n\n    For more information, see [Defining and Loading SAPUI5 Modules](ecmascript-support-0cb44d7.md#loio0cb44d7a147640a0890cefa5fd7c7f8e__section_UI5Mod).\n\n2.  Only use ES6+ classes for classes not deriving from SAPUI5 classes. When classes derive from SAPUI5 classes, do it the SAPUI5 way: `ClassName.extend()`.\n\n    For more information, see [SAPUI5 Inheritance](ecmascript-support-0cb44d7.md#loio0cb44d7a147640a0890cefa5fd7c7f8e__section_UI5Inherit).\n\n3.  Only use string literals \\(that is, no variables, no variable template literals, no spread parameter\\) for dependency names, class names, and library names.\n\n    For more information, see [Defining and Loading SAPUI5 Modules](ecmascript-support-0cb44d7.md#loio0cb44d7a147640a0890cefa5fd7c7f8e__section_UI5Mod) \\(*Expressions as Dependencies* and following\\), [SAPUI5 Inheritance](ecmascript-support-0cb44d7.md#loio0cb44d7a147640a0890cefa5fd7c7f8e__section_UI5Inherit) \\(*Expressions as Class Names* and following\\), and [Library Initialization](ecmascript-support-0cb44d7.md#loio0cb44d7a147640a0890cefa5fd7c7f8e__section_libInit).\n\n4.  Do not use async functions or Promises for defining a module.\n\n    For more information, see *Asynchronous Factory Function* in [Defining and Loading SAPUI5 Modules](ecmascript-support-0cb44d7.md#loio0cb44d7a147640a0890cefa5fd7c7f8e__section_UI5Mod).\n\n5.  Do not use async functions when implementing predefined lifecycle hooks, such as [`sap/ui/core/mvc/Controller#onInit`](https://ui5.sap.com/#/api/sap.ui.core.mvc.Controller%23methods/onInit).\n\n    For more information, see [Async Functions and Event Handlers](ecmascript-support-0cb44d7.md#loio0cb44d7a147640a0890cefa5fd7c7f8e__section_EHR).\n\n\n\n\n<a name=\"loio0cb44d7a147640a0890cefa5fd7c7f8e__section_UI5Mod\"/>\n\n## Defining and Loading SAPUI5 Modules\n\nSAPUI5 implements an AMD-like way of [defining and loading modules](../04_Essentials/modules-and-dependencies-91f23a7.md). As Asynchronous Module Definition \\(AMD\\) is not fully compatible with ECMAScript modules, the use of ECMAScript modules is currently **not** supported.\n\n\n\n### ECMAScript Modules\n\nSAPUI5 provides `sap.ui.define` and `sap.ui.require` as the established ways to define and load modules. Using the `import` and `export` statements for loading and defining SAPUI5 modules is currently **not** supported.\n\nPlease continue to use the regular SAPUI5 APIs `sap.ui.define` and `sap.ui.require`.\n\n> ### Example:  \n> **Supported usage** \n> \n> ```\n> // Best practice of loading a module delivered by SAPUI5\n> sap.ui.define([\n>     \"sap/ui/core/mvc/Controller\"\n> ], (Controller) => {\n>     \"use strict\";\n>     return Controller.extend(\"my.app.controller.MyController\", {});\n> });\n> ```\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use ECMAScript import and export statements when loading/defining SAPUI5 modules\n> import Controller from \"sap/ui/core/mvc/Controller\";\n> export class MyController extends Controller {};\n> ```\n\n\n\n### Asynchronous Factory Functions\n\nThe SAPUI5 Loader will not wait for a Promise returned as the content of an SAPUI5 module.\n\nWhile the usage of asynchronous factory functions and Promises as module content is not strictly forbidden, keep in mind that every Promise must be handled by the consumer of the module. An example of handy async factories is their use in top-level modules, like the framework's [`on-init` module](../04_Essentials/configuration-options-and-url-parameters-91f2d03.md).\n\n**However**, do **not** use an `async` factory function \\(or return a Promise\\) when defining SAPUI5 modules that contain entities of the following types, as they will not be awaited/chained in managed functionality, e.g. the processing of `XMLView`s, the loading of `Controller`s, etc.:\n\n-   Controls\n-   Components\n-   Typed views\n-   Fragments \\(JS\\)\n-   Controllers\n-   Controller extensions\n-   Data types\n\n> ### Note:  \n> `Component`s, Typed `View`s, and `Fragment`s \\(JS\\) can still return Promises in an async `createContent` implementation; it is only their containing module that must not return a Promise as module content.\n\n> ### Restriction:  \n> **Example of an unsupported `Controller` module** \n> \n> ```\n> // Do NOT use the ECMAScript async/await statements when loading/defining modules\n> sap.ui.define([\n>     \"sap/ui/core/mvc/Controller\"\n> ], async (Controller) => {\n>     \"use strict\";\n>     return Controller.extend(\"my.app.controller.MyController\", {});\n> });\n> ```\n\nDo **not** return a Promise when loading or defining SAPUI5 modules.\n\n> ### Restriction:  \n> **Example of an unsupported `Controller` module** \n> \n> ```\n> // Do NOT return a Promise when loading/defining modules\n> sap.ui.define([\n>     \"sap/ui/core/mvc/Controller\"\n> ], (Controller) => {\n>     \"use strict\";\n>     return Promise.resolve(Controller.extend(\"my.app.controller.MyController\", {}));\n> });\n> ```\n\n\n\n### Expressions as Dependencies\n\nUse only literals but **not** expressions for the dependencies in the context of the `sap.ui.define` and `sap.ui.require` calls.\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use an expression in the list of dependencies\n> // in an sap.ui.define or sap.ui.require call.\n> const sController = \"sap/ui/core/mvc/Controller\";\n> sap.ui.define([\n>   sController\n> ], (Controller) => {\n> });\n> ```\n\n\n\n### Spread Elements as Dependencies\n\nDo **not** use a spread element as a parameter in the context of the `sap.ui.define` and `sap.ui.require` calls.\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use a spread element as a parameter\n> // in an sap.ui.define or sap.ui.require call.\n> const dependencies = [\n>     \"sap/ui/core/mvc/Controller\", \n>     \"sap/ui/mode/Filter\", \n>     \"sap/ui/model/FilterOperator\", \n>     \"sap/ui/model/json/JSONModel\"\n> ];\n> sap.ui.define([\n>   ...dependencies\n> ], (Controller, Filter, FilterOperator, JSONModel) => {\n> });\n> ```\n\n\n\n### Template Literals as Dependencies\n\nThe usage of template literals with one or more expressions in the context of the `sap.ui.define` and `sap.ui.require` calls is **not** supported.\n\n> ### Example:  \n> **Supported usage** \n> \n> ```\n> // Using template literals without any expressions inside\n> // an sap.ui.define or sap.ui.require call is supported\n> sap.ui.define([\n>   `sap/ui/core/mvc/Controller`\n> ], (Controller) => {\n> });\n> ```\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use template literals with one or more\n> // expressions inside an sap.ui.define or sap.ui.require call.\n> const sLibName = `ui/core`;\n>  \n> sap.ui.define([\n>   `sap/${sLibName}/mvc/Controller`\n> ], (Controller) => {\n> });\n> ```\n\n\n\n<a name=\"loio0cb44d7a147640a0890cefa5fd7c7f8e__section_EHR\"/>\n\n## Async Functions and Event Handlers\n\n\n\n### SAPUI5 Lifecycle Hooks\n\nDo **NOT** use async functions when implementing predefined SAPUI5 lifecycle hook methods. SAPUI5 might introduce an optional return type for such functions later. Using async functions here already would result in a return value that might conflict with such a later change.\n\nLifecycle hook methods should also refrain from returning a value in their implementation. The lifecycle hooks include the following methods:\n\n\n<table>\n<tr>\n<th valign=\"top\" align=\"center\">\n\nFramework Class\n\n</th>\n<th valign=\"top\" align=\"center\">\n\nLifecycle Hooks\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap/ui/core/mvc/Controller`\n\n</td>\n<td valign=\"top\">\n\n`onInit()`\n\n`onExit()`\n\n`onBeforeRendering()`\n\n`onAfterRendering()`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap/ui/core/Element`\n\n`sap/ui/core/Control`\n\n</td>\n<td valign=\"top\">\n\n`init()`\n\n`exit()`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap/ui/core/Control`\n\n</td>\n<td valign=\"top\">\n\n`onBeforeRendering()`\n\n`onAfterRendering()`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap/ui/core/Component`\n\n`sap/ui/core/UIComponent`\n\n</td>\n<td valign=\"top\">\n\n`init()`\n\n`exit()`\n\n`onActivate()`\n\n`onDeactivate()`\n\n</td>\n</tr>\n</table>\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> sap.ui.require([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n>   return Controller.extend(\"my.controller.Sample\", {\n>       // Do NOT use async event handlers for lifecycle hooks such as \"onInit\" or \"onExit\"\n>       async onInit() {\n>           await doSomething();\n>       },\n>       async onExit() {\n>           await doSomethingOnExit();\n>       }\n>   });\n> });\n> ```\n\n\n\n### Control Event Listeners\n\nYou can implement an asynchronous event handler for control events. However, SAPUI5 directly invokes the event handler without taking into account the returned Promise or any execution order.\n\n> ### Example:  \n> **Supported usage** \n> \n> ```\n> sap.ui.require([\"sap/m/Button\"], (Button) => {\n>     const oButton = new Button({\n>         text: \"Press me\",\n>         async press() { // async \"press\" event handler\n>           await doSomethingAsync();\n>         }\n>     });\n> });\n> ```\n\n> ### Caution:  \n> Error Handling\n> \n> Errors in asynchronous event handlers must be carefully managed. If you use an `await` inside an event handler and it throws an error, this typically won't be caught by the control that fired the event.\n\n\n\n<a name=\"loio0cb44d7a147640a0890cefa5fd7c7f8e__section_UI5Inherit\"/>\n\n## SAPUI5 Inheritance\n\nSAPUI5 implements an own functionality to extend classes \\(via the `sap.ui.core.ManagedObject#extend` method\\). Using an ECMAScript class to extend a SAPUI5 class is currently **not** supported.\n\n\n\n### ECMAScript Classes\n\nSAPUI5 uses its own way of defining classes and extending them. Please stick to the current best practice and do **not** use ECMAScript classes when extending a delivered SAPUI5 class.\n\n> ### Example:  \n> **Supported usage** \n> \n> ```\n> // Best practice of extending an existing class delivered by SAPUI5\n> sap.ui.define([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n>     \"use strict\";\n>     return Controller.extend(\"my.app.controller.MyController\", {});\n> });\n> ```\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do not use ECMAScript classes when extending a delivered SAPUI5 class\n> sap.ui.define([\"sap/ui/core/mvc/Controller\"], (Controller) => {\n>     \"use strict\";\n>     return class MyController extends Controller {};\n> });\n> ```\n\n\n\n### Expressions as Class Name\n\nDo **not** use an expression, only a literal, in the class name parameter inside the `extend` call.\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use an expression in the class name parameter inside the extend call\n> const sControllerPath = \"my.app.controller.\";\n> sap.ui.define([\n>     \"sap/ui/core/mvc/Controller\"\n> ], (Controller) => {\n>     \"use strict\";\n>     return Controller.extend(sControllerPath + \"MyController\", {});\n> });\n> ```\n\n\n\n### Variable Usages as Class Name\n\nDo **not** use a variable as the class name parameter inside the `extend` call.\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use a variable as a parameter inside the extend call\n> const sController = \"sap/ui/core/mvc/Controller\";\n> sap.ui.define([\n>     \"sap/ui/core/mvc/Controller\"\n> ], (Controller) => {\n>     \"use strict\";\n>     return Controller.extend(sController, {});\n> });\n> ```\n\n\n\n### Template Literals as Class Name\n\nThe usage of template literals with one or more expressions as the class name parameter inside the `extend` call is **not** supported.\n\n> ### Example:  \n> **Supported usage** \n> \n> ```\n> // Using template literals without any expressions inside the extend call\n> sap.ui.define([\n>     \"sap/ui/core/mvc/Controller\"\n> ], (Controller) => {\n>     \"use strict\";\n>     return Controller.extend(`my.app.controller.MyController`, {});\n> });\n> ```\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use template literals with one or more expressions inside the extend call\n> const sControllerPath = \"my.app.controller.\";\n> sap.ui.define([\n>     \"sap/ui/core/mvc/Controller\"\n> ], (Controller) => {\n>     \"use strict\";\n>     return Controller.extend(`${sControllerPath}MyController`, {});\n> });\n> ```\n\n\n\n<a name=\"loio0cb44d7a147640a0890cefa5fd7c7f8e__section_libInit\"/>\n\n## Library Initialization\n\nAn SAPUI5 library is typically initialized via an accompanying `library.js`. Within that file, the object which is supplied to the `sap/ui/core/Lib.init` method must consider the following restrictions:\n\n> ### Example:  \n> **Supported usage** \n> \n> ```\n> // Best practice to initialize a library in the library.js file\n> sap.ui.define([\n>     \"sap/ui/core/Lib\"\n> ], (Library) => {\n>     \"use strict\";\n>     const thisLib = Library.init(({\n>         apiVersion: 2,\n>         name: \"my.lib\",\n>         version: \"${version}\",\n>         designtime: \"my/lib/designtime/library.designtime\",\n>         types: [\n>             \"my.lib.MyType\"\n>         ],\n>         interfaces: [\n>             \"my.lib.MyInterface\"\n>         ],\n>         controls: [\n>             \"my.lib.MyType\"\n>         ],\n>         elements: [\n>             \"my.lib.MyElement\"\n>         ],\n>         extensions: {}\n>     });\n> });\n> ```\n\n\n\n### Expressions as Parameter\n\nDo **not** use an expression for the library name when initializing a library.\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use an expression for the library name when initializing a library\n> const libraryName = \"lib\";\n> sap.ui.define([\n>     \"sap/ui/core/Lib\"\n> ], (Library) => {\n>     \"use strict\";\n>     const thisLib = Library.init({\n>          name: \"my.\" + libraryName\n>     });\n> });\n> ```\n\n\n\n### Variable Usages as Parameter\n\nDo **not** use a variable for the library name when initializing a library.\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use a variable for the library name when initializing a library\n> const key = \"name\";\n> sap.ui.define([\n>     \"sap/ui/core/Lib\"\n> ], (Library) => {\n>     \"use strict\";\n>     const thisLib = Library.init({\n>         [key]: \"my.lib\"\n>     });\n> });\n> ```\n\n\n\n### Spread Elements as Parameter\n\nDo **not** use a spread element for the library name when initializing a library.\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use a spread element for the library name when initializing a library\n> const mylib = {\n>     name: \"my.lib\"\n> };\n> sap.ui.define([\n>     \"sap/ui/core/Lib\"\n> ], (Library) => {\n>     \"use strict\";\n>     const thisLib = Library.init({\n>         ...mylib\n>     });\n> });\n> ```\n\n\n\n### Template Literals as Parameter\n\nDo **not** use a template literal with one or more expressions for the library name when initializing a library.\n\n> ### Restriction:  \n> **Not supported** \n> \n> ```\n> // Do NOT use a template literal with one or more expressions \n> // for the library name when initializing a library\n> const libraryName = \"lib\";\n> sap.ui.define([\n>     \"sap/ui/core/Lib\"\n> ], (Library) => {\n>     \"use strict\";\n>     const thisLib = Library.init({\n>         name: `my.${libraryName}`\n>     });\n> });\n> ```\n\n**Related Information**  \n\n\n[ECMAScript2022 Language Specification](https://262.ecma-international.org/13.0/)\n\n",
  "excerpt": "<!-- loio0cb44d7a147640a0890cefa5fd7c7f8e --> ECMAScript Support Since SAPUI5 1.125, the framework leverages features of modern ECMAScript, up to and including ES2023. You have to consider certain res...",
  "wordCount": 2093,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}