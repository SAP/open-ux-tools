{
  "id": "sapui5-docs-03-get-started-step-14-custom-css-and-theme-colors-723f4b2-md",
  "title": "Step 14: Custom CSS and Theme Colors",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-14-custom-css-and-theme-colors-723f4b2.md",
  "lastModified": "2025-09-01T18:17:10.454Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Custom",
    "CSS",
    "and",
    "Theme",
    "Colors"
  ],
  "headers": [
    "Step 14: Custom CSS and Theme Colors",
    "Preview",
    "Coding",
    "webapp/css/style.css \\(New\\)",
    "webapp/manifest.json",
    "webapp/view/App.view.xml",
    "Conventions"
  ],
  "content": "<!-- loio723f4b2334e344c08269159797f6f796 -->\n\n# Step 14: Custom CSS and Theme Colors\n\nSometimes we need to define some more fine-granular layouts and this is when we can use the flexibility of CSS by adding custom style classes to controls and style them as we like.\n\n\n\n## Preview\n\n  \n  \n**The space between the button and the input field is now smaller and the output text is bold**\n\n![The graphic has an explanatory text.](images/UI5_Walkthrough_Step_14_d9a40e5.png \"The space between the button and the input field is now smaller and the\n\t\t\t\t\toutput text is bold\")\n\n> ### Caution:  \n> As stated in the [Compatibility Rules](../02_Read-Me-First/compatibility-rules-91f0873.md), the HTML and CSS generated by SAPUI5 is not part of the public API and may change in patch and minor releases. If you decide to override styles, you need to test and update your modifications each time SAPUI5 is updated. A prerequisite for this is that you have control over the version of SAPUI5 being used, for example in a standalone scenario. This is not possible when running your app in the SAP Fiori launchpad where SAPUI5 is centrally loaded for all apps. As such, SAP Fiori launchpad apps should not override styles.\n\n\n\n<a name=\"loio723f4b2334e344c08269159797f6f796__section_a55_pr2_syb\"/>\n\n## Coding\n\nYou can view and download all files at [Walkthrough - Step 14](https://ui5.sap.com/#/entity/sap.m.tutorial.walkthrough/sample/sap.m.tutorial.walkthrough.14).\n\n\n\n<a name=\"loio723f4b2334e344c08269159797f6f796__section_b55_pr2_syb\"/>\n\n## webapp/css/style.css \\(New\\)\n\n```\nhtml[dir=\"ltr\"] .myAppDemoWT .myCustomButton.sapMBtn {\n   margin-right: 0.125rem\n}\n\nhtml[dir=\"rtl\"] .myAppDemoWT .myCustomButton.sapMBtn {\n   margin-left: 0.125rem\n}\n\n.myAppDemoWT .myCustomText {\n   display: inline-block;\n   font-weight: bold;\n}\n\n```\n\nWe create a folder `css` which will contain our CSS files. In a new style definition file inside the `css` folder we create our custom classes combined with a custom namespace class. This makes sure that the styles will only be applied on controls that are used within our app.\n\nA button has a default margin of `0` that we want to override: We add a custom margin of `2px` \\(or `0.125rem` calculated relatively to the default font size of `16px`\\) to the button with the style class `myCustomButton`. We add the CSS class `sapMBtn` to make our selector more specific: in CSS, the rule with the most specific selector \"wins\".\n\nFor right-to-left \\(rtl\\) languages, like Arabic, you set the left margin and reset the right margin as the app display is inverted. If you only use standard SAPUI5 controls, you don't need to care about this, in this case where we use custom CSS, you have to add this information.\n\nIn an additional class `myCustomText` we define a bold text and set the display to `inline-block`. This time we just define our custom class without any additional selectors. We do not set a color value here yet, we will do this in the view.\n\n\n\n## webapp/manifest.json\n\n```\n...\n  \"sap.ui5\": {\n\t...\t\n\t\"rootView\": {\n\t  ...\n\t},\n\t\"resources\": {\n\t  \"css\": [\n\t\t{\n\t\t  \"uri\": \"css/style.css\"\n\t\t}\n\t  ]\n\t}\n  }\n```\n\nIn the `resources` section of the `sap.ui5` namespace, additional resources for the app can be loaded. We load the CSS styles by defining a URI relative to the component. SAPUI5 then adds this file to the header of the HTML page as a `<link>` tag, just like in plain Web pages, and the browser loads it automatically.\n\n\n\n## webapp/view/App.view.xml\n\n```xml\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n\t<Shell>\n\t\t<App class=\"myAppDemoWT\">\n\t\t\t<pages>\n\t\t\t\t<Page title=\"{i18n>homePageTitle}\">\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<Panel\n\t\t\t\t\t\t\theaderText=\"{i18n>helloPanelTitle}\"\n\t\t\t\t\t\t\tclass=\"sapUiResponsiveMargin\"\n\t\t\t\t\t\t\twidth=\"auto\">\n\t\t\t\t\t\t\t<content>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\ttext=\"{i18n>showHelloButtonText}\"\n\t\t\t\t\t\t\t\t\tpress=\".onShowHello\"\n\t\t\t\t\t\t\t\t\tclass=\"myCustomButton\"/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tvalue=\"{/recipient/name}\"\n\t\t\t\t\t\t\t\t\tvalueLiveUpdate=\"true\"\n\t\t\t\t\t\t\t\t\twidth=\"60%\"/>\n\t\t\t\t\t\t\t\t<FormattedText\n\t\t\t\t\t\t\t\t\thtmlText=\"Hello {/recipient/name}\"\n\t\t\t\t\t\t\t\t\tclass=\"sapUiSmallMargin sapThemeHighlight-asColor myCustomText\"/>\n\t\t\t\t\t\t\t</content>\n\t\t\t\t\t\t</Panel>\n\t\t\t\t\t</content>\n\t\t\t\t</Page>\n\t\t\t</pages>\n\t\t</App>\n\t</Shell>\n</mvc:View>\n```\n\nThe app control is configured with our custom namespace class `myAppDemoWT`. This class has no styling rules set and is used in the definition of the CSS rules to define CSS selectors that are only valid for this app.\n\nWe add our custom CSS class to the button to precisely define the space between the button and the input field. Now we have a pixel-perfect design for the panel content.\n\nTo highlight the output text, we use a `FormattedText` control which can be styled individually, either by using custom CSS or with HTML code. We add our custom CSS class \\(`myCustomText`\\) and add a theme-dependent CSS class to set the highlight color that is defined in the theme.\n\nThe actual color now depends on the selected theme which ensures that the color always fits to the theme and is semantically clear. For a complete list of the available CSS class names, see [CSS Classes for Theme Parameters](../04_Essentials/css-classes-for-theme-parameters-ea08f53.md).\n\n\n\n## Conventions\n\n-   Do not specify colors in custom CSS but use the standard theme-dependent classes instead.\n\n\n**Related Information**  \n\n\n[Manifest \\(Descriptor for Applications, Components, and Libraries\\)](../04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md \"The manifest (also known as descriptor for applications, components, and libraries, in short: app descriptor) is inspired by the WebApplication Manifest concept introduced by the W3C. The manifest provides a central, machine-readable, and easy-to-access location for storing metadata associated with an application, an application component, or a library.\")\n\n[CSS Classes for Theme Parameters](../04_Essentials/css-classes-for-theme-parameters-ea08f53.md \"SAPUI5 provides a set of essential adjustable colors behind the generic predefined CSS rules that enable custom content to use the respective CSS classes for the required colors.\")\n\n[Creating Themable User Interfaces](../04_Essentials/creating-themable-user-interfaces-a2c67ac.md \"There are several things you should keep in mind to ensure that an application can actually be themed.\")\n\n[Compatibility Rules](../02_Read-Me-First/compatibility-rules-91f0873.md \"The following sections describe what SAP can change in major, minor, and patch releases. Always consider these rules when developing apps, features, or controls with or for SAPUI5.\")\n\n[API Reference: `sap.ui.core.theming`](https://ui5.sap.com/#/api/sap.ui.core.theming)\n\n[Samples: `sap.ui.core.theming` ](https://ui5.sap.com/#/entity/sap.ui.core.theming)\n\n",
  "excerpt": "<!-- loio723f4b2334e344c08269159797f6f796 --> Step 14: Custom CSS and Theme Colors Sometimes we need to define some more fine-granular layouts and this is when we can use the flexibility of CSS by add...",
  "wordCount": 888,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}