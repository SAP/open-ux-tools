{
  "id": "sapui5-docs-03-get-started-step-1-ready-851bde4-md",
  "title": "Step 1: Ready...",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-1-ready-851bde4.md",
  "lastModified": "2025-09-01T18:17:10.449Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Ready"
  ],
  "headers": [
    "Step 1: Ready...",
    "Preview",
    "Setup",
    "Coding"
  ],
  "content": "<!-- loio851bde42e4e1410c96abbe402fa9128c -->\n\n# Step 1: Ready...\n\nLet's get you ready for your journey! We bootstrap SAPUI5 in an HTML page and implement a simple \"Hello World\" example.\n\n\n\n<a name=\"loio851bde42e4e1410c96abbe402fa9128c__section_cpm_14c_1gb\"/>\n\n## Preview\n\n  \n  \n**The browser shows a \"Ready\" button that triggers a \"Hello World\" message**\n\n![](images/Tutorial_Quick_Start_Step_1_9c157e9.png \"The browser shows a \"Ready\" button that triggers a \"Hello World\" message\")\n\n\n\n<a name=\"loio851bde42e4e1410c96abbe402fa9128c__section_lv5_lvy_zbc\"/>\n\n## Setup\n\nOpen a terminal and install UI5 Tooling globally on your machine by executing the following command:\n\n`npm install --global @ui5/cli`\n\n\n\n<a name=\"loio851bde42e4e1410c96abbe402fa9128c__section_zzy_mpc_1gb\"/>\n\n## Coding\n\nYou can view and download all files at [Quick Start - Step 1](https://ui5.sap.com/#/sample/sap.m.tutorial.quickstart.01/preview).\n\n1.  Create a folder on your local machine which will contain all the sources of the app we're going to build. We'll refer to this folder as the \"app root folder\".\n2.  Create a new file called `package.json` which will enable you to execute commands and consume packages from the[npm registry](https://www.npmjs.com/) via the npm command line interface. Enter the following content:\n\n    **package.json \\(New\\)**\n\n    ```\n    {\n      \"name\": \"ui5.quickstart\",\n      \"version\": \"1.0.0\",\n      \"description\": \"The UI5 quickstart tutorial\",\n      \"scripts\": {\n          \"start\": \"ui5 serve -o index.html\"\n      }\n    }\n    \n    ```\n\n3.  Create a new folder named `webapp` in the app root folder. It will contain all the sources that become available in the browser later. We'll refer to this folder as the \"webapp folder\".\n\n4.  Create a new HTML file named `index.html` in your webapp folder and enter the following content:\n\n    **webapp/index.html \\(New\\)**\n\n    ```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n    \t<meta charset=\"utf-8\">\n    \t<title>Quickstart Tutorial</title>\n    \t<script id=\"sap-ui-bootstrap\"\n    \t\tsrc=\"resources/sap-ui-core.js\"\n    \t\tdata-sap-ui-libs=\"sap.m\"\n    \t\tdata-sap-ui-compat-version=\"edge\"\n    \t\tdata-sap-ui-async=\"true\"\n    \t\tdata-sap-ui-on-init=\"module:ui5/quickstart/index\"\n    \t\tdata-sap-ui-resource-roots='{\n    \t\t\t\"ui5.quickstart\": \"./\"\n    \t\t}'>\n    \t</script>\n    </head>\n    <body class=\"sapUiBody\" id=\"content\"></body>\n    </html>\n    ```\n\n    With the `script` tag, we load and initialize SAPUI5 with typical bootstrap parameters. We define, for example, a theme, control libraries, as well as performance and compatibility flags.\n\n    First, we need a source to load SAPUI5 from. In this tutorial, we will use UI5 Tooling to host the OpenUI5 resources.\n\n    The bootstrap property `resourceroots` defines the namespace for all resources of the app. This way, we can easily reference additional files that we are about to create in this step.\n\n    The `index` module that we load with the `onInit` parameter will hold the application logic.\n\n    The `body` tag is defined with the `sapUiBody` class and the `content` ID. This is where we will add the content of the app in the next steps.\n\n5.  In your `webapp` folder, create a new file `index.js` that will be called as soon as SAPUI5 is loaded and initialized.\n\n    **webapp/index.js \\(New\\)**\n\n    ```js\n    sap.ui.define([\n    \t\"sap/m/Button\",\n    \t\"sap/m/MessageToast\"\n    ], (Button, MessageToast) => {\n    \t\"use strict\";\n    \n    \tnew Button({\n    \t\ttext: \"Ready...\",\n    \t\tpress() {\n    \t\t\tMessageToast.show(\"Hello World!\");\n    \t\t}\n    \t}).placeAt(\"content\");\n    \n    });\n    ```\n\n    We load two UI controls - a button and a message toast - and place the button in the element with the `content` ID. The button is defined with a `text` property and a callback attached to its `press` event.\n\n6.  Create a new file named `manifest.json` in the webapp folder; it's also known as the \"app descriptor\". All application-specific configuration options which we'll introduce in this tutorial will be added to this file. Enter the following content:\n\n    **webapp/manifest.json \\(New\\)**\n\n    ```\n    {\n      \"_version\": \"1.58.0\",\n      \"sap.app\": {\n        \"id\": \"ui5.quickstart\"\n      }\n    }\n    ```\n\n7.  Open a terminal in the app root folder and execute `npm i -D @ui5/cli` to install UI5 Tooling.\n\n8.  Execute `ui5 init` in the app root folder.\n\n9.  Execute `ui5 use OpenUI5`\n\n10. Execute `ui5 add sap.m sap.tnt sap.ui.core sap.ui.layout themelib_sap_horizon`\n\n11. Execute `npm start` to start the web server and to open a new browser window hosting your newly created `index.html`.\n\n\n**Related Information**  \n\n\n[Development Environment](../05_Developing_Apps/development-environment-7bb04e0.md \"This part of the documentation introduces you to some common and recommended use cases for the installation, configuration, and setup of SAPUI5 development environments.\")\n\n[Variant for Bootstrapping from Content Delivery Network](../04_Essentials/variant-for-bootstrapping-from-content-delivery-network-2d3eb2f.md \"SAPUI5 can either be loaded locally with a relative path from an SAP Web server or externally from a Content Delivery Network (CDN).\")\n\n",
  "excerpt": "<!-- loio851bde42e4e1410c96abbe402fa9128c --> Step 1: Ready... Let's get you ready for your journey! We bootstrap SAPUI5 in an HTML page and implement a simple \"Hello World\" example. <a name=\"loio851b...",
  "wordCount": 645,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}