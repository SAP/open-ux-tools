{
  "id": "sapui5-docs-04-essentials-use-of-localized-texts-in-applications-91f3859-md",
  "title": "Use of Localized Texts in Applications",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/use-of-localized-texts-in-applications-91f3859.md",
  "lastModified": "2025-09-01T18:17:10.551Z",
  "tags": [
    "ui5-framework",
    "md",
    "Use",
    "Localized",
    "Texts",
    "Applications"
  ],
  "headers": [
    "Use of Localized Texts in Applications",
    "Using sap/base/i18n/ResourceBundle",
    "Localization Test Page",
    "Data Binding"
  ],
  "content": "<!-- loio91f385926f4d1014b6dd926db0e91070 -->\n\n# Use of Localized Texts in Applications\n\nSAPUI5 provides two options to use localized texts in applications: The `sap/base/i18n/ResourceBundle` module and data binding.\n\n\n\n<a name=\"loio91f385926f4d1014b6dd926db0e91070__section_F5967527CABC49C78F6DCD1FC3182CC0\"/>\n\n## Using sap/base/i18n/ResourceBundle\n\nYou can use the JavaScript module `sap/base/i18n/ResourceBundle` to access localized texts. The module contains APIs to load a resource bundle file from a given URL and for a given locale.\n\nYou can then use the `ResourceBundle.create` function to load the resource bundle from the given URL that is the bundle name, and for a provided locale. When no locale is specified, the default locale \\(en\\) is used. The following code snippet shows the use of the `ResourceBundle.create` function to return a Promise which resolves with a `sap/base/i18n/ResourceBundle`:\n\n```js\n// \"ResourceBundle\" required from module \"sap/base/i18n/ResourceBundle\"\nResourceBundle.create({\n    url: sUrl,\n    locale: sLocale,\n    async: true,\n    supportedLocales: aSupportedLocales,\n    fallbackLocale: sFallbackLocale\n}).then(function(oBundle) {\n    // code\n});\n```\n\nFor more information, see `ResourceBundle` in the API Reference.\n\nThe resource bundle `sap/base/i18n/ResourceBundle` provides access to the localized texts that are contained in the resource bundle. You can use the `getText` method to access the texts in the loaded bundle by means of their key. This is shown in the following code snippet:\n\n```js\nvar sText = oBundle.getText(sKey);\t\n```\n\n\n\n<a name=\"loio91f385926f4d1014b6dd926db0e91070__section_23DD4C90FA3C4AE5BCE18C17122444D4\"/>\n\n## Localization Test Page\n\nThe test suite provides a test page that shows how to use localized texts. This section only provides a short overview how the `sap/base/i18n/ResourceBundle` module is used there.\n\nFor a localized Web page you need the .html page itself and the .properties files of the required languages, in this example English and German.\n\nThe resource bundle `i18n.properties` is the English fallback version, which is the default version.\n\n```ini\nwelcome=Welcome {0}. Please enter a new contact:\nlastname=Last Name:\nfirstname=First Name:\nstreet=Street:\nzip=ZIP:\ncity=City:\n```\n\nThe resource bundle `i18n_de.properties` contains the texts in German. The following code snippet shows the content of this file:\n\n```ini\nwelcome=Willkommen {0}. Bitte geben Sie einen neuen Kontakt ein:\nlastname=Nachname:\nfirstname=Vorname:\nstreet=Stra√üe:\nzip=PLZ:\ncity=Ort:\n```\n\nThe localization test page uses these texts to display a welcome message and a form to enter the address of a person.\n\nThe coding of the test page looks as follows:\n\n```js\n// \"ResourceBundle\" required from module \"sap/base/i18n/ResourceBundle\"\n// \"MatrixLayout\" required from module \"sap/ui/commons/layout/MatrixLayout\"\n// \"Label\" required from module \"sap/ui/commons/Label\"\n// \"TextField\" required from module \"sap/ui/commons/TextField\"\n// \"TextView\" required from module \"sap/ui/commons/TextView\"\n// \"Localization\" required from module \"sap/base/i18n/Localization\"\nResourceBundle.create({\n\turl: \"res/i18n.properties\",\n\tlocale: Localization.getLanguage(),\n\tasync: true,\n\tsupportedLocales: [\"\", \"de\"],\n\tfallbackLocale: \"\"\n}).then(function(oBundle) {\n    var oMatrixLayout = new MatrixLayout();\n    oMatrixLayout.setLayoutFixed(false);\n    oMatrixLayout.createRow(\n      new TextView({text: oBundle.getText(\"welcome\", [\"Administrator\"])}) \n    );\n    oMatrixLayout.getRows()[0].getCells()[0].setColSpan(2);\n    oMatrixLayout.createRow(\n      new Label({text: oBundle.getText(\"lastname\")}), \n      new TextField()\n    );\n    oMatrixLayout.createRow(\n      new Label({text: oBundle.getText(\"firstname\")}), \n      new TextField()\n    );\n    oMatrixLayout.createRow(\n      new Label({text: oBundle.getText(\"street\")}), \n    );\n    oMatrixLayout.createRow(\n      new Label({text: oBundle.getText(\"zip\")}), \n      new TextField()\n    );\n    oMatrixLayout.createRow(\n      new Label({text: oBundle.getText(\"city\")}), \n      new TextField()\n    );\n    oMatrixLayout.placeAt(\"userForm\");\n});\n```\n\nWith regard to localization, the code above defines the following procedure:\n\n1.  Require the `sap/base/i18n/ResourceBundle` module\n2.  Determine the language\n3.  Load the resource bundle\n4.  Access the text using the `welcome` key and pass the value for the placeholder \\(`{0}`\\) via an array\n5.  Access the text using the `lastname` key and set it as text for the `Label`\n\n\n\n<a name=\"loio91f385926f4d1014b6dd926db0e91070__section_1E0C902502BA455CA0C98A4365A367B3\"/>\n\n## Data Binding\n\nYou can also use data binding to access localized texts. The `ResourceModel` is a wrapper for resource bundles that exposes the localized texts as a model for data binding. You use the `ResourceModel` to bind texts for control properties to language dependent resource bundle properties. You can instantiate the `ResourceModel` either with `bundleName` \\(name of a resource bundle that equals a SAPUI5 module name within the define/require concept\\), or a `bundleUrl`, which points to a resource bundle. When you use the bundle name, make sure that the file has a `.properties` suffix. If no `locale` is defined, the current language is used.\n\n> ### Example:  \n> ```js\n> // \"ResourceModel\" required from module \"sap/ui/model/resource/ResourceModel\"\n> // \"Button\" required from module \"sap/ui/commons/Button\"\n>  var oModel = new ResourceModel({\n> \tbundleName:\"myBundle\",\n> \tbundleLocale:\"en\",\n> \tasync: true,\n> \tsupportedLocales: [\"en\"],\n> \tfallbackLocale: \"en\"\n>  });\n>  var oControl = new Button({\n>     id : \"myButton\",\n>     text : \"{i18n>MY_BUTTON_TEXT}\"\n> });\n> // attach the resource model with the symbolic name \"i18n\"\n> // The texts are resolved via databinding, once the resource bundle file was loaded\n> oControl.setModel(oModel, \"i18n\");\n> ```\n\n> ### Note:  \n> The current data binding implementation does not allow to pass parameters to your texts in the resource bundle.\n> \n> If you have to pass parameters, you must do this on your own. You can, however, access the resource bundle directly from the model instead of loading it:\n> \n> ```js\n> oModel.getResourceBundle().then(function(oBundle){\n> \tvar sText = oBundle.getText(\"welcome\", [\"Administrator\"]);\n>     ...\n> });\n> ```\n\nAfter the instance has been created, you have a model containing the resource bundle texts as data.\n\nFor a complete overview of available methods and parameters, see [`ResourceModel`](https://ui5.sap.com/#/api/sap.ui.model.resource.ResourceModel) in the *API Reference* in the Demo Kit\n\n**Related Information**  \n\n\n[Resource Model](resource-model-91f122a.md#loio91f122a36f4d1014b6dd926db0e91070 \"The resource model is used as a wrapper for resource bundles. In data binding you use the resource model instance, for example, to bind texts of a control to language-dependent resource bundle properties.\")\n\n",
  "excerpt": "<!-- loio91f385926f4d1014b6dd926db0e91070 --> Use of Localized Texts in Applications SAPUI5 provides two options to use localized texts in applications: The sap/base/i18n/ResourceBundle module and dat...",
  "wordCount": 853,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}