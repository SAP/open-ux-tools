{
  "id": "sapui5-docs-06-sap-fiori-elements-custom-filters-4739893-md",
  "title": "Custom Filters",
  "category": "ui5-framework",
  "path": "docs/06_SAP_Fiori_Elements/custom-filters-4739893.md",
  "lastModified": "2025-09-01T18:17:10.597Z",
  "tags": [
    "ui5-framework",
    "md",
    "Custom",
    "Filters"
  ],
  "headers": [
    "Custom Filters",
    "Steps"
  ],
  "content": "<!-- loio4739893805f74a409e241698858ee424 -->\n\n# Custom Filters\n\nAdd custom filters to your overview page application. It provides the end users an option to filter the data displayed in one or more cards.\n\n\n\n<a name=\"loio4739893805f74a409e241698858ee424__section_uhm_ptp_zy\"/>\n\n## Steps\n\n1.  Create a view extension fragment.\n\n\n    <table>\n    <tr>\n    <th valign=\"top\">\n\n    Property\n    \n    </th>\n    <th valign=\"top\">\n\n    Description\n    \n    </th>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    `groupId` \n    \n    </td>\n    <td valign=\"top\">\n    \n    Enter a group ID to associate the custom controller to a group.\n\n    > ### Note:  \n    > If the group ID does not exist, the filter is added to the default group.\n\n\n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    `key` \n    \n    </td>\n    <td valign=\"top\">\n    \n    Enter a property of an entity type to define the filter criteria.\n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    `visibleInAdvancedArea` \n    \n    </td>\n    <td valign=\"top\">\n    \n    Enable this property to view custom filters on the filter bar.\n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    `Input id` \n    \n    </td>\n    <td valign=\"top\">\n    \n    Enter a property of an entity type to define the input criteria.\n    \n    </td>\n    </tr>\n    </table>\n    \n    > ### Sample Code:  \n    > For example, create a `customFilter.fragment.xml` file and provide the required information.\n    > \n    > ```\n    > <core:FragmentDefinition xmlns=\"sap.m\" xmlns:smartfilterbar=\"sap.ui.comp.smartfilterbar\" xmlns:core=\"sap.ui.core\">\n    >     <!-- Product ID Filter -->\n    >     <smartfilterbar:ControlConfiguration groupId=\"_BASIC\" key=\"ProductID\"\n    >                                          label=\"Product ID (Extension)\"\n    >                                          visibleInAdvancedArea=\"true\">\n    >         <smartfilterbar:customControl>\n    >             <Input id=\"ProductID\" type=\"Text\"/>\n    >         </smartfilterbar:customControl>\n    >     </smartfilterbar:ControlConfiguration>\n    >     <smartfilterbar:ControlConfiguration groupId=\"GlobalFilters\" key=\"SalesOrderID\"\n    >                                          label=\"Sales Order ID (Extension)\"\n    >                                          visibleInAdvancedArea=\"false\">\n    >         <smartfilterbar:customControl>\n    >             <Input id=\"SalesOrderID\" type=\"Text\"/>\n    >         </smartfilterbar:customControl>\n    >     </smartfilterbar:ControlConfiguration>\n    > </core:FragmentDefinition>\n    > ```\n\n2.  Create a controller extension. For example, create a `customFilter.controller.js` file and define the following functions:\n    -   Define `getCustomFilters()` to return a filter object.\n\n        ```\n                getCustomFilters: function () {\n        \n                    var oValue1 = this.oView.byId(\"ProductID\").getValue();\n                    var oValue2 = this.oView.byId(\"SalesOrderID\").getValue();\n        \n        \n                    var aFilters = [], oFilter1, oFilter2;\n        \n                    if (oValue1) {\n                        oFilter1 = new Filter({\n        \n                            path: \"ProductID\",\n                            operator: \"EQ\",\n                            value1: oValue1\n        \n                        });\n        \n                        aFilters.push(oFilter1);\n        \n                    }\n        \n                    if (oValue2) {\n                        oFilter2 = new Filter({\n        \n                            path: \"SalesOrderID\",\n                            operator: \"EQ\",\n                            value1: oValue2\n        \n                        });\n        \n                        aFilters.push(oFilter2);\n                    }\n        \n                    if (aFilters && aFilters.length > 0) {\n                        return (new Filter(aFilters, true));\n                    }\n                    \n                },\n        ```\n\n    -   Define `getCustomAppStateDataExtension(oCustomData)` to store the application state.\n\n        ```\n                getCustomAppStateDataExtension: function (oCustomData) {\n                    //the content of the custom field will be stored in the app state, so that it can be restored later, for example after a back navigation.\n                    //The developer has to ensure that the content of the field is stored in the object that is returned by this method.\n                    if (oCustomData) {\n        \n                        var oCustomField1 = this.oView.byId(\"ProductID\");\n                        var oCustomField2 = this.oView.byId(\"SalesOrderID\");\n                        if (oCustomField1) {\n                            oCustomData.ProductID = oCustomField1.getValue();\n                        }\n                        if (oCustomField2) {\n                            oCustomData.SalesOrderID = oCustomField2.getValue();\n                        }\n                    }\n                },\n        ```\n\n    -   Define `restoreCustomAppStateDataExtension(oCustomData)` to restore the application state.\n\n        ```\n                restoreCustomAppStateDataExtension: function (oCustomData) {\n                    //in order to restore the content of the custom field in the filter bar, for example after a back navigation,\n                    //an object with the content is handed over to this method and the developer has to ensure that the content of the custom field is set accordingly\n                    //also, empty properties have to be set\n                    if (oCustomData) {\n        \n                        if (oCustomData.ProductID) {\n                            var oCustomField1 = this.oView.byId(\"ProductID\");\n                            oCustomField1.setValue(oCustomData.ProductID);\n                        }\n        \n                        if (oCustomData.SalesOrderID) {\n                            var oCustomField2 = this.oView.byId(\"SalesOrderID\");\n                            oCustomField2.setValue(oCustomData.SalesOrderID);\n                        }\n                    }\n        \n                },\n        ```\n\n\n3.  Add the controller and view extension settings to the manifest.\n\n    > ### Note:  \n    > Ensure that you use the same entity type in both `viewExtensions` and `globalFilterEntityType` settings. For example, see\n    > \n    > ```\n    > \t\t\"extends\": {\n    >                         \"extensions\": {\n    >                                 \"sap.ui.controllerExtensions\": {\n    >                                         \"sap.ovp.app.Main\": {\n    >                                                 \"controllerName\": \"my_app.ext.controller.OverViewPageExt\"\n    >                                         }\n    >                                 },\n    >                                 \"sap.ui.viewExtensions\": {\n    >                                         \"sap.ovp.app.Main\": {\n    >                                                 \"SmartFilterBarControlConfigurationExtension|GlobalFilters\": {\n    >                                                         \"className\": \"sap.ui.core.Fragment\",\n    >                                                         \"fragmentName\": \"sap.ovp.demo.ext.customFilter\",\n    >                                                         \"type\": \"XML\"\n    >                                                 }\n    >                                         }\n    >                                 }\n    >                         }\n    >                 }\n    >         },\n    >         \"sap.ovp\": {\n    >                 \"globalFilterModel\": \"salesOrder\",\n    >                 \"globalFilterEntityType\": \"GlobalFilters\",\n    >                 ...\n    >                 ...\n    >                 }\n    > \n    > ```\n\n\n",
  "excerpt": "<!-- loio4739893805f74a409e241698858ee424 --> Custom Filters Add custom filters to your overview page application. It provides the end users an option to filter the data displayed in one or more cards...",
  "wordCount": 603,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}