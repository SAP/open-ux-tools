{
  "id": "sapui5-docs-10-more-about-controls-object-page-blocks-4527729-md",
  "title": "Object Page Blocks",
  "category": "ui5-framework",
  "path": "docs/10_More_About_Controls/object-page-blocks-4527729.md",
  "lastModified": "2025-09-01T18:17:10.696Z",
  "tags": [
    "ui5-framework",
    "md",
    "Object",
    "Page",
    "Blocks"
  ],
  "headers": [
    "Object Page Blocks",
    "Blocks API & Guidelines",
    "Standard Block Implementation"
  ],
  "content": "<!-- loio4527729576cb4a4888275b6935aad03a -->\n\n# Object Page Blocks\n\nThe contents of the subsections in the `ObjectPageLayout` control are organized into blocks.\n\nThe blocks are used to group the app content that is displayed in the sections and subsections of the `ObjectPageLayout`.\n\n  \n  \n**Object Page content grouped in Blocks**\n\n![](images/Object_Page_Blocks_da91fe4.png \"Object Page content grouped in Blocks\")\n\nTo add blocks, use the `blocks` aggregation of `sap.uxap.ObjectPageSubSection`:\n\n```xml\n <ObjectPageLayout id=\"ObjectPageLayout\" subSectionLayout=\"titleOnTop\">\n        <sections>\n            <ObjectPageSection title=\"Payroll\" >\n                <subSections>\n                    <ObjectPageSubSection title=\"sub payroll title\">\n                        <blocks>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                            <myNameSpace:myBlock/>\n                        </blocks>\n                    </ObjectPageSubSection>\n                </subSections>\n            </ObjectPageSection>\n        </sections>\n    </ObjectPageLayout>\n```\n\nAny control can be a block. However, the blocks that extend `sap.uxap.BlockBase` provide additional features:\n\n-   Lazy loading: Only the blocks that are currently displayed and those in their direct proximity are instantiated\n\n-   Column layout: Blocks provide information to the subsection only on the width they should be using for an optimal experience\n\n\n\n\n## Blocks API & Guidelines\n\nBlocks that are used in an `ObjectPageLayout` have to comply with the following rules regarding their API. They must:\n\n-   Extend `sap.uxap.BlockBase`\n\n    ```js\n    sap.uxap.BlockBase.extend(\"<BlockName>\", {\n            metadata: {\n             }\n         });\n    ```\n\n-   Support the modes described in `sap.uxap.ObjectPageSubSectionMode.type` - `Collapsed` and `Expanded`. For each mode, declare its associated view. It is recommended you use the XML view if no templating is needed:\n\n    ```js\n    sap.uxap.BlockBase.extend(\"<BlockName>\", {\n            metadata: {\n                views: {\n                    Collapsed: {\n                        viewName: \"<collapsedViewName>\",\n                        type: \"XML\"\n                    },\n                    Expanded: {\n                        viewName: \"<expendedViewName>\",\n                        type: \"XML\"\n    \n                    }\n                }\n             }\n         });\n    ```\n\n-   Come with their own controller \\(if needed\\). This controller should just react to the internal events of the block, as the `ObjectPageLayout`'s own controller should only manage the page and its sections and subsections.\n\n-   Follow the SAPUI5 naming guidelines: see *Related Information*\n\n-   Use the `modelMapping` mechanism to declare distinct model per logical entity.\n\n\n> ### Example:  \n> Let's consider an *Employee Goals* block that displays an employee together with his or her goals.\n> \n> One *Employee* model for the employee entity:\n> \n> ```xml\n> <Text text=\"{Employee>FirstName}\"></Text>\n> ```\n> \n> One *Goals* model for the goal collections:\n> \n> ```xml\n> <List items=\"{Goals>}\">\n> ```\n\nIn one backend service, goals may be a navigation property of employees, but in another this may not be the case. For this reason, when implementing the *Employee Goals* block, you should use two distinct models in the block views.\n\n> ### Example:  \n> An app wants to use the *Employee Goals* blocks described above. These are therefore embedded into a page that has a model named `ApplicationModel`, in which `Goals` are a navigation property of employees:\n> \n> ```xml\n> <EmployeeGoals>\n>     <mappings>\n>         <uxap:ModelMapping externalModelName=\"ApplicationModel\" externalPath=\"/Employee('121')\" internalModelName=\"Employee\" />\n>         <uxap:ModelMapping externalModelName=\"ApplicationModel\" externalPath=\"/Employee('121')/Goals\" internalModelName=\"Goals\" />\n>     </mappings>\n> </EmployeeGoals>\n> ```\n> \n> A second app uses the same blocks, but in its service, `Goals` and `Employees` are unrelated entities:\n> \n> ```xml\n> <EmployeeGoals>\n>     <mappings>\n>         <uxap:ModelMapping externalModelName=\"ApplicationModel2\" externalPath=\"/Employee('121')\" internalModelName=\"Employee\" />\n>         <uxap:ModelMapping externalModelName=\"ApplicationModel2\" externalPath=\"/Goals\" internalModelName=\"Goals\" />\n>     </mappings>\n> </EmployeeGoals>\n> ```\n\n`BlockBase` interprets this in the following order:\n\n1.  Looks for a model with the name specified in the `externalModelName`.\n\n2.  Sets this model on itself with the name specified in the `internalModelName`.\n\n3.  Creates a context corresponding to the path.\n\n\n> ### Note:  \n> This model mapping is not mandatory as models used in a view can also be provided by standard SAPUI5 techniques \\(model inheritance, setModel\\).\n\n\n\n## Standard Block Implementation\n\nThe standard block implementation is to extend the `sap.uxap.BlockBase` control and inherit the default implementation of `setMode` and rendering. `setMode` in `BlockBase` supports two different ways of building blocks:\n\n-   Single view blocks: A single XML view is used for all layout modes. This XML view should be named `<name>.view.xml`.\n\n-   Multiple view blocks: Different views are provided for the different layout modes.\n\n    -   These views should be added in the `views` section of the block metadata \\(this section is added by the `BlockBase` class\\).\n\n    -   For each mode, the `BlockBase` class must declare a view name and type:\n\n        ```\n        sap.uxap.BlockBase.extend(\"<BlockName>\", {\n                metadata: {\n                    views: {\n                        Collapsed: {\n                            viewName: \"<collapsedViewName>\",\n                            type: \"XML\"\n                        },\n                        Expanded: {\n                            viewName: \"<expendedViewName>\",\n                            type: \"XML\"\n                        }\n                    }\n                 }\n             });\n        ```\n\n\n\n**Related Information**  \n\n\n[Creating Blocks](creating-blocks-2978f60.md \"Important points when creating blocks for the sap.uxap.ObjectPageLayout\")\n\n[API Reference: `sap.uxap.BlockBase`](https://ui5.sap.com/#/api/sap.uxap.BlockBase)\n\n",
  "excerpt": "<!-- loio4527729576cb4a4888275b6935aad03a --> Object Page Blocks The contents of the subsections in the ObjectPageLayout control are organized into blocks. The blocks are used to group the app content...",
  "wordCount": 698,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}