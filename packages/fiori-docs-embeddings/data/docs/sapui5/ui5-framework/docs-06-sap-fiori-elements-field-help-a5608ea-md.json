{
  "id": "sapui5-docs-06-sap-fiori-elements-field-help-a5608ea-md",
  "title": "Field Help",
  "category": "ui5-framework",
  "path": "docs/06_SAP_Fiori_Elements/field-help-a5608ea.md",
  "lastModified": "2025-09-01T18:17:10.624Z",
  "tags": [
    "ui5-framework",
    "md",
    "Field",
    "Help"
  ],
  "headers": [
    "Field Help",
    "Value Help",
    "Title of the Value Help Dialog",
    "Using `ValueList` Annotations",
    "Using `ValueListReference` Annotations",
    "Using the `Text` and `TextArrangement` Annotation",
    "Filter Fields Within the Value Help Dialog",
    "Search Field Within a Value Help Dialog",
    "Controlling the Columns to be Displayed in the Type-Ahead List of a Value Help Field",
    "Sorting Within Value Help Dialogs and Dropdown Lists",
    "Hierarchical Display Within a Value Help Dialog",
    "Client Validation Against Value Help",
    "Context-Dependent Value Help",
    "Initial Value for Value Help IN Parameters",
    "Multiple Value Help Dialogs / Collective Search Help",
    "Value Help for Draft-Enabled Entities",
    "Value Help Using the `FetchValuesType`",
    "Fixed Values",
    "History of Recently Entered Values",
    "Date Picker and Date/Time Picker"
  ],
  "content": "<!-- loioa5608eabcc184aee99e1a7d88b28816c -->\n\n# Field Help\n\nA field can be associated with a helper control, depending on how the field is configured.\n\n> ### Note:  \n> This topic is only applicable to SAP Fiori elements for OData V4.\n\nFields can have an associated value help, or a drop-down list for several fixed values, for example. Fields can also have a date or date-time picker. This topic provides information about the supported associations and how applications can enable them.\n\n\n\n<a name=\"loioa5608eabcc184aee99e1a7d88b28816c__section_crm_mzx_q4b\"/>\n\n## Value Help\n\nValue help allow end users to either select a value from a value help entity associated with the field or specify a condition to look up a suitable value within that entity.\n\n\n\n### Title of the Value Help Dialog\n\nIf the `DataField` annotation for the field includes a `label` property, it is used as the title of the value help dialog. Otherwise, the label annotation of the property is used.\n\nFor context-dependent value help, the label defined in the `ValueList` is used. If it is not defined, the `label` property is used. If it is not found, the `label` property in the `UI.DataField` annotation is used.\n\n\n\n### Using `ValueList` Annotations\n\nDirect `ValueList` annotations under the property level annotations:\n\n> ### Sample Code:  \n> ```xml\n> <Annotations Target=\"Self.ArtistsType/CountryOfOrigin\">\n>     <Annotation Term=\"Common.ValueList\">\n>         <Record>\n>             <PropertyValue Property=\"CollectionPath\" String=\"myEntityName\"/>\n>             <PropertyValue Property=\"SearchSupported\" Bool=\"true\"/>\n>             <PropertyValue Property=\"Parameters\">\n>                 <Collection>\n>                     <Record Type=\"Common.ValueListParameterInOut\">\n>                         <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"CountryOfOrigin\"/>\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryCode\"/>\n>                     </Record>\n>                     <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryCode_Text\"/>\n>                     </Record>\n>                     <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryIndicator\"/>\n>                     </Record>\n>                 </Collection>\n>             </PropertyValue>\n>         </Record>\n>     </Annotation>\n> </Annotations>\n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> ```\n> @Consumption.valueHelpDefinition:\n>         [{\n>           entity :{\n>             name    : ' myEntityName', // ValueList CollectionPath (The collection path points to consumption VH entity and will have the ValueListParameterDisplayOnly fields within it)\n>             element : ' CountryCode' // ValueListProperty of ValueListParameterInOut           \n>           },\n>           label  : 'mylabel', // ValueList label\n>           qualifier: 'test'\n>           }]\n> CountryOfOrigin, // LocalDataProperty of ValueListParameterInOut\n> \n> ```\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> entity Artist {\n>             CountryOfOrigin                   : String(40)           @(Common : {\n>            Label        : 'Country',\n>             ValueList    : {\n>                 CollectionPath : 'myEntityName',\n>                 Parameters     : [\n>                 {\n>                     $Type             : 'Common.ValueListParameterInOut',\n>                     LocalDataProperty : CountryOfOrigin,\n>                     ValueListProperty : 'CountryCode'\n>                 },\n>                 {\n>                     $Type             : 'Common.ValueListParameterDisplayOnly',\n>                     ValueListProperty : 'CountryCode_Text'\n>                 },\n>                 {\n>                     $Type             : 'Common.ValueListParameterDisplayOnly',\n>                     ValueListProperty : 'CountryIndicator'\n>                 }\n>                 ]\n>             }\n>         });\n> \n> ```\n\n\n\n### Using `ValueListReference` Annotations\n\n`ValueListReference` annotations pointing to another metadata source \\(service\\) as a reference for the value help:\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```xml\n> <Annotations Target=\"Self.ArtistsType/CountryOfOrigin\">\n>     <Annotation Term=\"Common.ValueListReferences\">\n>         <Collection>\n>             <String>\n>                 ../../../../srvd_f4/sap/myentityname/0001;ps='srvd-sadl_gw_appmusicdr_definition-0001';va='com.sap.gateway.srvd.sadl_gw_appmusicdr_definition.v0001.et-c_mdbu_v4_artisttp.countryoforigin'/$metadata\n>             </String>\n>         </Collection>\n>     </Annotation>\n> </Annotations>\n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> No ABAP CDS annotation sample is available. Please use the local XML annotation.\n\nThe string here is the path relative to the main metadata file containing these `ValueListReference` annotations.\n\n`ValueListMapping` annotations in the referenced metadata file:\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```\n> <Annotations Target=\"ParentService.ArtistsType/CountryOfOrigin\">\n>     <Annotation Term=\"Common.ValueListMapping\">\n>         <Record>\n>             <PropertyValue Property=\"Label\" String=\"Country Code Value Help\"/>\n>             <PropertyValue Property=\"CollectionPath\" String=\"myEntityName\"/>\n>             <PropertyValue Property=\"Parameters\">\n>                 <Collection>\n>                     <Record Type=\"Common.ValueListParameterInOut\">\n>                         <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"CountryOfOrigin\"/>\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryCode\"/>\n>                     </Record>\n>                     <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryCode_Text\"/>\n>                     </Record>\n>                     <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryIndicator\"/>\n>                     </Record>\n>                 </Collection>\n>             </PropertyValue>\n>         </Record>\n>     </Annotation>\n> </Annotations>\n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> No ABAP CDS annotation sample is available. Please use the local XML annotation.\n\nThe `\"ParentService\"` in the annotation sample is an alias defined for the main service from where the annotation sample \\(a\\) was picked.\n\n\n\n### Using the `Text` and `TextArrangement` Annotation\n\nThe field can show the value or its textual description, or it can show the value and the textual description together.\n\nYou must annotate the `Common.Text` on the field to define the textual description.\n\nThe value help itself already has a definition with a collection path, but you also need to add a `Text` annotation to the collection path.\n\nYou must annotate the `Common.TextArrangement` to specify the display format. Otherwise, the default display format is `#TextFirst` and shows the description together with the value, as in *Euro \\(EUR\\)*. Other display formats are listed further in this subsection.\n\n> ### Example:  \n> If you use the value help for `Currencies` on the `currency_code` property with a `Text` and a `TextArrangement` definition, the `currency_code` field displays a value help that is sourced from the `Currencies` entity. The code is the key field. Note the following:\n> \n> -   Using `Common.Text` associates the descriptive text \\(name\\) from the `Currencies` entity with the key \\(`currency_code`\\) in the `Products` entity. This ensures that whenever `currency_code` is displayed, it can be enriched with its corresponding name.\n> \n> -   Using `Common.TextArrangement` specifies the display format for the key value and its description. The code samples below show the display format `#TextFirst`, which is the default.\n> \n> -   Using `CollectionPath` in the value help definition lets you point to the `Currencies` entity. But you also need to add a `TextArrangement` annotation to the collection path.\n> \n> \n> The interplay of these annotations is shown in the following sample code:\n> \n> > ### Sample Code:  \n> > XML Annotation\n> > \n> > ```\n> > <!-- Value Help with Text and TextArrangement -->\n> > <Annotations Target=\"sap.capire.officesupplies.CatalogAdminService.Products/currency_code\">\n> >      <Annotation Term=\"Common.Text\" Path=\"currency/name\">\n> >           <Annotation Term=\"UI.TextArrangement\" EnumMember=\"UI.TextArrangementType/TextFirst\"/>\n> >      </Annotation>\n> >      <Annotation Term=\"Common.ValueList\">\n> >           <Record Type=\"Common.ValueListType\">\n> >                <PropertyValue Property=\"CollectionPath\" String=\"Currencies\"/>\n> >                <PropertyValue Property=\"Label\" String=\"Währung\"/>\n> >                <PropertyValue Property=\"Parameters\">\n> >                     <Collection>\n> >                          <Record Type=\"Common.ValueListParameterInOut\">\n> >                               <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"currency_code\"/>\n> >                               <PropertyValue Property=\"ValueListProperty\" String=\"code\"/>\n> >                          </Record>\n> >                          <Record Type=\"Common.ValueListParameterDisplayOnly\">\n> >                               <PropertyValue Property=\"ValueListProperty\" String=\"name\"/>\n> >                          </Record>\n> >                     </Collection>\n> >                </PropertyValue>\n> >           </Record>\n> >      </Annotation>\n> >      <Annotation Term=\"Common.Label\" String=\"Währung\"/>\n> >      <Annotation Term=\"Core.Description\" String=\"Währungscode gemäß ISO 4217\"/>\n> > </Annotations>\n> > <!-- Annotate Text and TextArrangement to key property of the enity which is defined as CollectionPath in the value help -->\n> > <Annotations Target=\"sap.capire.officesupplies.CatalogAdminService.Currencies/code\">\n> >      <Annotation Term=\"Common.Text\" Path=\"name\">\n> >           <Annotation Term=\"UI.TextArrangement\" EnumMember=\"UI.TextArrangementType/TextFirst\"/>\n> >      </Annotation>\n> >      <Annotation Term=\"Common.Label\" String=\"Währungscode\"/>\n> > </Annotations>\n> > ```\n> \n> > ### Sample Code:  \n> > ABAP CDS Annotation\n> > \n> > ```\n> > <!-- ABAP CDS Annotation: value help for Currencies (on property currency_code) with Text and TextArrangement -->\n> > annotate view PRODUCTS with {\n> >      @Consumption.valueHelpDefinition:\n> >      [{\n> >           entity :{\n> >                name : 'Currencies',\n> >                element : 'code'\n> >           },\n> >           label : 'Currency'\n> >      }]\n> > \n> >      @ObjectModel: {\n> >           text: {\n> >                element: [ 'name' ]\n> >           }\n> >      }\n> >      @UI.textArrangement: #TEXT_First\n> >      currency_code;\n> > }\n> > \n> > <!-- Annotate Text and TextArrangement to key property of the enity which is defined as CollectionPath in the value help -->\n> > annotate view Currencies with {\n> >      @ObjectModel.representativeKey: 'code'\n> >      @UI.selectionField: true\n> >      @ObjectModel.text: {\n> >           element: 'name'\n> >      }\n> >      @UI.textArrangement: #TEXT_FIRST\n> >      code;\n> >      name;\n> > };\n> > ```\n> \n> > ### Sample Code:  \n> > CAP CDS Annotation\n> > \n> > ```\n> > <!-- Value Help with Text and TextArrangement -->\n> > annotate sap.fe.officesupplies.CatalogAdminService.Products with {\n> >      @Common.Label : 'Currency'\n> >      @Common : {\n> >           Text : currency.name,\n> >           TextArrangement : #TextOnly\n> >      }\n> >      @Common.ValueListWithFixedValues : true\n> >      @Common.ValueList : {\n> >           $Type : 'Common.ValueListType',\n> >           Label : 'Currency',\n> >           CollectionPath : 'Currencies',\n> >           Parameters : [\n> >                {\n> >                     $Type : 'Common.ValueListParameterInOut',\n> >                     LocalDataProperty : currency_code,\n> >                     ValueListProperty : 'code'\n> >                },\n> >                {\n> >                     $Type : 'Common.ValueListParameterDisplayOnly',\n> >                     ValueListProperty : 'name'\n> >                }\n> >           ]\n> >      }\n> >      @Core.Description : 'A currency code as specified in ISO 4217'\n> >      currency_code\n> > };\n> > <!-- Annotate Text and TextArrangement to key property of the enity which is defined as CollectionPath in the value help-->\n> > annotate Currencies with {\n> >      code @(Common: {\n> >           Text : name,\n> >           TextArrangement: #TextFirst\n> >      });\n> > }\n> > ```\n\nYou can use the `Common.TextArrangement` annotation to configure the display format of a table column of the value help dialog and a value help with a dropdown list \\(`ValueListWithFixedValues`\\). The following options are available:\n\n**Value Help with a Dialog and a Dropdown List**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\n`Text`\n\n</th>\n<th valign=\"top\">\n\n`TextArrangement`\n\n</th>\n<th valign=\"top\">\n\nDisplay Format in a Dialog\n\n</th>\n<th valign=\"top\">\n\nDisplay Format in a Dropdown List\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\nnot annotated\n\n</td>\n<td valign=\"top\">\n\nnot annotated\n\n</td>\n<td valign=\"top\">\n\nValue\n\n</td>\n<td valign=\"top\">\n\nValue\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nannotated\n\n</td>\n<td valign=\"top\">\n\nnot annotated\n\n</td>\n<td valign=\"top\">\n\nValue\n\n</td>\n<td valign=\"top\">\n\nDescription Value\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nannotated\n\n</td>\n<td valign=\"top\">\n\n`TextFirst`\n\n</td>\n<td valign=\"top\">\n\nDescription Value\n\n</td>\n<td valign=\"top\">\n\nDescription Value\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nannotated\n\n</td>\n<td valign=\"top\">\n\n`TextLast`\n\n</td>\n<td valign=\"top\">\n\nValue Description\n\n</td>\n<td valign=\"top\">\n\nValue Description\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nannotated\n\n</td>\n<td valign=\"top\">\n\n`TextSeparate`\n\n</td>\n<td valign=\"top\">\n\nValue\n\n</td>\n<td valign=\"top\">\n\nValue\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nannotated\n\n</td>\n<td valign=\"top\">\n\n`TextOnly`\n\n</td>\n<td valign=\"top\">\n\nDescription\n\n</td>\n<td valign=\"top\">\n\nDescription\n\n</td>\n</tr>\n</table>\n\n> ### Tip:  \n> The system automatically excludes a column with the `Description` if the `Description` is already displayed in another column that uses one of the following text arrangements:\n> \n> -   `TextFirst`\n> \n> -   `TestLast`\n> \n> -   `TextOnly`\n\n> ### Note:  \n> Consider the following when using a text arrangement annotation in a value help:\n> \n> -   The `TextArrangement` of the value help entity set is used to determine the display of the fields that show up in the columns of the value help dialog. The `TextArrangement` specified at property level within the value help entity set takes precedence over the one defined at entity set level.\n> \n> -   The `TextArrangement` annotation `#TextOnly` is supported in value help tables \\(that is, in the value help dialog and for the type-ahead feature\\). Other `TextArrangement` annotations like `#TextFirst`, `#TextLast`, or `#TextSeparate` are not considered. Combo boxes also support `#TextFirst` and `#TextLast`.\n> \n> -   A separate text column is ignored if the text annotation is already used in another column using the `TextArrangement`.\n\n**Best Practices for Value Help for `Edm.Guid`-Type Fields**\n\nFor `Edm.Guid`-type fields, you must not define the `Common.Text` annotation with the description path and the `Common.TextArrangement` with the `TextOnly` display format. Instead, annotate the `Common.ExternalID` with the description path, as shown in the following example:\n\n> ### Sample Code:  \n> Using the `Common.ExternalID` Annotation\n> \n> ```\n>     category @Common : {\n>         //Text : category.name,\n>         //TextArrangement : #TextOnly,\n>         ExternalID : category.name, //or readable identifier\n>         FieldControl : #Mandatory,\n>         ValueList : {\n>             $Type : 'Common.ValueListType',\n>             CollectionPath : 'Categories',\n>             Label : '{i18n>Categories}',\n>             Parameters : [\n>                 {\n>                     $Type : 'Common.ValueListParameterInOut',\n>                     LocalDataProperty : category_ID,\n>                     ValueListProperty : 'ID',\n>                 }\n>                 ,\n>                 {\n>                     $Type : 'Common.ValueListParameterDisplayOnly',\n>                     ValueListProperty : 'name',\n>                 },\n>             ],\n>         },\n>     };\n> ```\n\nYou can explore and work with the coding yourself. Check out our live example in the flexible programming model explorer at [Field - Format Options](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/field/fieldFormatOptions).\n\nFor more information, see [Further Features of the Field](further-features-of-the-field-f49a0f7.md).\n\n\n\n### Filter Fields Within the Value Help Dialog\n\nUse the `SelectionFields` annotation on the entity of the value help to define the filter fields that are to be displayed in the filter panel of the value help dialog. Application developers must ensure that all relevant fields are part of the `SelectionFields`.\n\nBy default, the filter bar is collapsed. If one of the following conditions is met, the filter bar is expanded when the value help is opened:\n\n-   if at least one filter field is mandatory\n\n-   if the entity set of the value help is not search-enabled\n\n-   if the data isn't loaded by default, which happens when the value list annotation `FetchedValues` is set to 2\n\n\n> ### Note:  \n> If no `SelectionFields` are annotated on the entity of the value help, all properties of the entity are displayed as filter fields. If there are no filterable fields \\(see [Filter Restrictions](https://github.com/oasis-tcs/odata-vocabularies/blob/-/vocabularies/Org.OData.Capabilities.V1.xml#L430)\\) within the value help entity, then the filter panel isn't visible.\n\n**Help Icon for Fields Within the Filter Panel**\n\nFilter fields always get a value help icon ‒ irrespective of whether a value list annotation is defined or not. This default value help icon opens up the value help dialog with only the *Define Conditions* tab. If the value list annotation is defined, then the value help dialog also contains the *Select from List* tab. If a `\"ValueListWithFixedValues\"` annotation is defined, then a drop-down menu is provided for the filter field instead of the value help icon. Similarly, a date picker is provided instead of the value help icon if the filter field is a date-based field with a single value.\n\n> ### Note:  \n> -   The *Define Conditions* tab is not visible for filter fields marked with `\"AllowedExpressions : 'SingleValue'\"` or `\"AllowedExpressions : 'MultiValue'\"`.\n> \n> -   The *Select from List* tab only appears if, for the filter field, at least one of the value help annotations described above is found.\n\n**Filter Operators**\n\nThe filter operators offered within the value help dialog \\(under the *Define Conditions* tab\\) can be restricted according to the [Filter Expression Restrictions](https://github.com/oasis-tcs/odata-vocabularies/blob/-/vocabularies/Org.OData.Capabilities.V1.md#FilterExpressionType).\n\nFor each filter expression type, the operators shown in the value help dialog depend on the base type of the property \\(`String`, `Date`, `DateTime`, `Time`, `Boolean`, `Unit`, `Numeric`\\). For filter fields with no defined filter expression type, or if it is incompatible with the base type, the complete default set of operators for the respective base type is used.\n\nFor `Date` and `DateTime` fields that have the filter expression type \"Single Value\" instead of the filter conditions dialog, a `Date` or `DateTime` picker is shown directly in the filter field.\n\n> ### Note:  \n> For a `Date` or `DateTime` field. value help is only available for fields marked with the `MultipleValue` or `MultipleRange` filter restrictions. Value help is not available for a `Date` field that is marked with `SingleValue` or `SingleRange`.\n\nFor more information about filter restrictions, see [Configuring Filter Fields](configuring-filter-fields-f5dcb29.md).\n\n\n\n### Search Field Within a Value Help Dialog\n\nYou can control the visibility of the search field within a value help dialog by using the `Searchable` annotation set for the entity set of the value help.\n\n> ### Sample Code:  \n> ```\n> annotate Customer with @(Capabilities.SearchRestrictions : {\n>     Searchable : true\n> });\n> ```\n\nBy default, the entity set of a value help is searchable.\n\n> ### Tip:  \n> If a field has a `SearchRestriction` annotation with `Searchable : false`, no type-ahead is available for the field.\n\n\n\n### Controlling the Columns to be Displayed in the Type-Ahead List of a Value Help Field\n\nApplication developers can control the number of columns shown in the type-ahead list of a value help field by using the `Importance` annotation on a parameter of the value list. Only those columns that are annotated with `\"@Importance\":#High` are shown. If there is no `\"Importance\"=\"High\"` annotation, the number of columns that are shown corresponds to the number in the value help dialog.\n\n> ### Sample Code:  \n> Controlling the Column Number\n> \n> ```\n> ValueList             : {\n>     Label          : 'Sold-to Party',\n>     CollectionPath : 'Customer',\n>     Parameters     : [\n>         {\n>             $Type             : 'Common.ValueListParameterInOut',\n>             LocalDataProperty : SoldToParty,\n>             ValueListProperty : 'Customer',\n>             \"@UI.Importance\" : #High\n>         },\n>         {\n>             $Type             : 'Common.ValueListParameterDisplayOnly',\n>             ValueListProperty : 'CustomerName',\n>             \"@UI.Importance\" : #High\n>         },\n> ...\n> ```\n\n\n\n### Sorting Within Value Help Dialogs and Dropdown Lists\n\nA default sorting mechanism is applied to the first column of the value help table, as well as to the dropdown list. Text-arrangement annotations for `TextOnly` are also taken into account: If the first column has a `TextOnly` annotation, the sorting is applied to the column to which the text arrangement refers.\n\nYou can change the sorting of the table using the `UI.PresentationVariant`.\n\n> ### Sample Code:  \n> `UI.PresentationVariant`\n> \n> ```\n> <Annotations Target=\"com.c_salesordermanage_sd.SalesOrderItem/Material\">\n>     <Annotation Term=\"Common.FieldControl\" Path=\"fieldControlType_item\"/>\n>     <Annotation Term=\"Common.IsUpperCase\" Bool=\"true\"/>\n>     <Annotation Term=\"Common.Label\" String=\"Material\"/>\n>     <Annotation Term=\"Common.Text\" Path=\"_Material/Material_Text\"/>\n>     <Annotation Term=\"Common.ValueList\">\n>         <Record Type=\"Common.ValueListType\">\n>             <PropertyValue Property=\"CollectionPath\" String=\"C_MaterialBySlsOrgDistrChnl\"/>\n>             <PropertyValue Property=\"Label\" String=\"Materials for Manage Sales Order\"/>\n>             <PropertyValue Property=\"Parameters\">\n>                 <Collection>\n>                     <Record Type=\"Common.ValueListParameterInOut\">\n>                         <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"Material\"/>\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"Material\"/>\n>                     </Record>                \n>                     <Record Type=\"Common.ValueListParameterOut\">\n>                         <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"RequestedQuantityUnit\"/>\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"RequestedQuantityUnit\"/>\n>                     </Record>\n>                     <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"MaterialName\"/>\n>                     </Record>\n>                 </Collection>\n>             </PropertyValue>\n>             <PropertyValue Property=\"PresentationVariantQualifier\" String=\"SortOrderPV\"/>\n>         </Record>\n>     </Annotation>\n> </Annotations>\n>  \n> <Annotations Target=\"com.c_salesordermanage_sd.EntityContainer/C_MaterialBySlsOrgDistrChnl\">\n>     <Annotation Term=\"UI.PresentationVariant\" Qualifier=\"SortOrderPV\">\n>         <Record Type=\"UI.PresentationVariantType\">\n>             <PropertyValue Property=\"Visualizations\">\n>                 <Collection>\n>                     <AnnotationPath>@UI.LineItem</AnnotationPath>\n>                 </Collection>\n>             </PropertyValue>\n>             <PropertyValue Property=\"SortOrder\">\n>                 <Collection>\n>                     <Record Type=\"Common.SortOrderType\">\n>                         <PropertyValue Property=\"Property\" PropertyPath=\"MaterialName\"/>\n>                         <PropertyValue Property=\"Descending\" Bool=\"false\"/>\n>                     </Record>\n>                 </Collection>\n>             </PropertyValue>\n>         </Record>\n>     </Annotation>\n> </Annotations>>\n> ```\n\n> ### Tip:  \n> SAP Fiori elements recommends using a `PresentationVariant`.\n\n\n\n### Hierarchical Display Within a Value Help Dialog\n\nYou can display a hierarchy within a value help dialog.\n\nTo do so, the hierarchy qualifier must be provided through the [`RecursiveHiearchyQualifier`](https://github.com/SAP/odata-vocabularies/blob/0b5633ecc0fb85498720a8da07a46ef24b99ca74/vocabularies/UI.xml#L1175) term within the `PresentationVariant` annotation. The initial expansion level of the hierarchy can be set additionally by using the `InitialExpansionLevel` term, as shown in the following sample code:\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```xml\n> <Annotations Target=\"Self.ArtistsType/CountryOfOrigin\">\n>     <Annotation Term=\"Common.ValueList\">\n>         <Record>\n>             <PropertyValue Property=\"CollectionPath\" String=\"myEntityName\"/>\n>             <PropertyValue Property=\"SearchSupported\" Bool=\"true\"/>\n>             <PropertyValue Property=\"Parameters\">\n>                 <Collection>\n>                     <Record Type=\"Common.ValueListParameterInOut\">\n>                         <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"CountryOfOrigin\"/>\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryCode\"/>\n>                     </Record>\n>                     <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryCode_Text\"/>\n>                     </Record>\n>                     <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                         <PropertyValue Property=\"ValueListProperty\" String=\"CountryIndicator\"/>\n>                     </Record>\n>                 </Collection>\n>             </PropertyValue>\n>             <PropertyValueProperty=\"PresentationVariantQualifier\"String=\"Country_Pres\" />\n>         </Record>\n>     </Annotation>\n>     <Annotation Term=\"UI.PresentationVariant\" Qualifier=\"Country_Pres\">\n>         <Record>\n>             <PropertyValue Property=\"Visualizations\">\n>                 <Collection>\n>                     <AnnotationPath>@UI.LineItem#DefaultLineItem</AnnotationPath>\n>                 </Collection>\n>             </PropertyValue>\n>             <PropertyValue Property=\"InitialExpansionLevel\" Int=\"2\"/>\n>             <PropertyValue Property=\"RecursiveHierarchyQualifier\" String=\"CountryHierarchy\"/>\n>         </Record>\n>     </Annotation>\n> </Annotations>\n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> ```\n> @Consumption.valueHelpDefinition: [\n>     {\n>           entity :{\n>             name    : ' myEntityName', // ValueList CollectionPath (The collection path points to consumption VH entity and will have the ValueListParameterDisplayOnly fields within it)\n>             element : ' CountryCode' // ValueListProperty of ValueListParameterInOut           \n>           },\n>           label  : 'mylabel', // ValueList label\n>           qualifier: 'test'\n>           presentationVariantQualifier: 'Country_Pres'  // value list presentvariantqualifier\n>           }\n> ]\n> @UI.presentationVariant: [\n>     {\n>       visualizations: [\n>         {\n>           type: #AS_LINEITEM,\n>           qualifier: 'DefaultLineItem'\n>         }\n>       ],\n>       initialExpansionLevel: 2,\n>       recursiveHierarchyQualifier: 'CountryHierarchy',\n>       qualifier: 'Country_Pres'\n>     }\n> ]\n> CountryOfOrigin, // LocalDataProperty of ValueListParameterInOut\n> ```\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> entity Artist {\n>     CountryOfOrigin                   : String(40)           @(Common : {\n>    Label        : 'Country',\n>     ValueList    : {\n>         CollectionPath : 'myEntityName',\n>         Parameters     : [\n>         {\n>             $Type             : 'Common.ValueListParameterInOut',\n>             LocalDataProperty : CountryOfOrigin,\n>             ValueListProperty : 'CountryCode'\n>         },\n>         {\n>             $Type             : 'Common.ValueListParameterDisplayOnly',\n>             ValueListProperty : 'CountryCode_Text'\n>         },\n>         {\n>             $Type             : 'Common.ValueListParameterDisplayOnly',\n>             ValueListProperty : 'CountryIndicator'\n>         }\n>         ],\n>         PresentationVariantQualifier: 'Country_Pres'\n>     }\n>     },\n>     UI : {\n>         PresentationVariant #Country_Pres : {\n>             Visualizations : [\n>                 '@UI.LineItem#DefaultLineItem',\n>             ],\n>             InitialExpansionLevel : 2,\n>             RecursiveHierarchyQualifier: 'CountryHierarchy'\n>         }\n>     }\n> );\n> \n> ```\n\nCheck out our live examples in the flexible programming model explorer:\n\n-   Display of a hierarchy within a value help at [Field - Edit Mode](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/field/fieldEdit)\n-   Display of a hierarchy within a value help for a multi-input field at [Field - Multi Value Field](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/field/multiValueField)\n-   Property with a tree table within a value help at [Filter Bar - Overview](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/filterBar/filterBarDefault)\n\n\n\n### Client Validation Against Value Help\n\nYou can use the `ValueListForValidation` annotation to configure that the values of certain fields entered on the UI are checked at the client against the value help \\(`ValueList` or `ValueListMapping`\\) entity set associated to the field.\n\nUse `ValueListForValidation` annotations under property level annotations:\n\n> ### Sample Code:  \n> `Common.ValueListForValidation`\n> \n> ```\n> <Annotations Target=\"com.c_salesordermanage_sd.SalesOrderManage/IncotermsVersion\">\n>     <Annotation Term=\"Common.IsUpperCase\" Bool=\"true\"/>\n>     <Annotation Term=\"Common.Label\" String=\"Incoterms Version\"/>\n>     <Annotation Term=\"Common.Text\" Path=\"_IncotermsVersion/IncotermsVersion_Text\"/>\n>     <Annotation Term=\"Common.ValueListForValidation\" String=\"\"/>\n>     <Annotation Term=\"Common.ValueList\">\n>         ...Definition of ValueList...\n>     </Annotation>\n> </Annotations>\n> ```\n\nThe following sample code shows an example for the usage of the annotation term `Common.ValueListForValidation` with a conditional expression binding:\n\n> ### Sample Code:  \n> `Common.ValueListForValidation` with conditional expression binding\n> \n> ```\n> <Annotations Target=\"com.c_salesordermanage_sd.HeaderPartner/BusinessPartner\">\n>     <Annotation Term=\"com.sap.vocabularies.Common.v1.ValueListForValidation\">\n>         <If>\n>             <Eq>\n>                 <Path>PartnerFunction</Path>\n>                 <String>WE</String>\n>             </Eq>\n>             <String>BusinessPartner</String>\n>             <String />\n>         </If>\n>     </Annotation>\n> </Annotations>\n> ```\n\n> ### Note:  \n> -   Ensure that the `ValueListForValidation` contains the qualifier of the `ValueList` or `ValueListMapping` to be used for validation.\n> \n> -   User input that does not match the entries in the `ValueListForValidation` aren't stored in the back end \\(not even for drafts\\). Use this feature only in cases where the value can't be transferred to the back end.\n> \n> -   App developers have two options to configure the `ValueListForValidation`:\n> \n>     -   the `ValueListForValidation` can be a fixed string \\(which is the qualifier of the value help\\)\n> \n>     -   the value for the `ValueListForValidation` can be a conditional expression that results in the qualifier of the `ValueList` or `ValueListMapping` to be used for validation\n> \n> \n> -   For a conditional expression, ensure that the result contains only one qualifier that points to a valid `ValueList` or `ValueListMapping` at runtime.\n> \n> -   The `ValueListForValidation` annotation with a conditional expression binding must have the If-Then-Else pattern.\n> \n> -   When the field is used in a filter context, such as within a filter bar, and the `ValueListForValidation` is not defined, the default value list \\(without the qualifier\\) is used for validation. In such cases, if the default value list is not found, field help for the field is not displayed.\n\n\n\n### Context-Dependent Value Help\n\nSome scenarios require different value help dialogs based on a context. This context is determined by a property other than the annotated property.\n\nYou can use the annotation term `Common.ValueListRelevantQualifiers` to configure that valid qualifiers for a value help are determined, dependent on the value of another field.\n\n> ### Example:  \n> A sales order has different types of assigned partners. Depending on the partner function, you have to provide different details in the value help to which the partner can be added. If the partner function is `\"WE\"`, the value help with qualifier `\"BusinessPartner\"` should be determined. In all other cases, the value help without a qualifier should be determined.\n\n> ### Sample Code:  \n> `Common.ValueListRelevantQualifiers`\n> \n> ```\n> <Annotations Target=\"com.c_salesordermanage_sd.HeaderPartner/BusinessPartner\">\n>     <Annotation Term=\"com.sap.vocabularies.Common.v1.ValueListRelevantQualifiers\">\n>         <Collection>\n>             <String />\n>             <If>\n>                 <Eq>\n>                     <Path>PartnerFunction</Path>\n>                     <String>WE</String>\n>                 </Eq>\n>                 <String>BusinessPartner</String>\n>             </If>\n>         </Collection>\n>         </Annotation>\n>     <Annotation Term=\"Common.ValueList\" Qualifier=\"BusinessPartner\">\n>         ...Definition of ValueList...\n>     </Annotation>\n>     <Annotation Term=\"Common.ValueList\">\n>         ...Definition of ValueList w/o qualifier...\n>     </Annotation>\n> </Annotations>\n> ```\n\n> ### Note:  \n> All `ValueList` definitions must have the same In/Out parameters.\n\n\n\n### Initial Value for Value Help IN Parameters\n\nThe annotation `InitialValueIsSignificant` allows you to identify an initial value, for example an empty string, as a valid and significant value for value help IN parameters.\n\n> ### Note:  \n> Please note that the annotation below is only supported for parameters of data type `Edm.String`.\n\n> ### Sample Code:  \n> XML Annotation for `InitialValueIsSignificant`\n> \n> ```\n> <Annotation Term=\"Common.ValueList\">\n>     <Record Type=\"Common.ValueListType\">\n>         <PropertyValue Property=\"CollectionPath\" String=\"ShippingCondition\"/>\n>         <PropertyValue Property=\"Label\" String=\"Shipping Condition\"/>\n>         <PropertyValue Property=\"Parameters\">\n>             <Collection>\n>                 <Record Type=\"Common.ValueListParameterInOut\">\n>                     <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"ShippingCondition\"/>\n>                     <PropertyValue Property=\"ValueListProperty\" String=\"ShippingCondition\"/>\n>                 </Record>\n>                 <Record Type=\"Common.ValueListParameterIn\">\n>                     <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"SoldToParty\"/>\n>                     <PropertyValue Property=\"ValueListProperty\" String=\"SoldToParty\"/>\n>                     <PropertyValue Property=\"InitialValueIsSignificant\" Bool=\"true\"/>\n>                 </Record>\n>                 <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                     <PropertyValue Property=\"ValueListProperty\" String=\"ShippingCondition_Text\"/>\n>                 </Record>\n>             </Collection>\n>         </PropertyValue>\n>     </Record>\n> </Annotation>\n> ```\n\n> ### Sample Code:  \n> CDS Annotation for `InitialValueIsSignificant`\n> \n> ```\n> Context-dependent value help currently does not support individual In/Out parameters for the differentShippingCondition             : ShippingCondition : ShippingCondition @(Common : {\n>     Text            : _ShippingCondition.ShippingCondition_Text,\n>     TextArrangement : #TextFirst,\n>     IsUpperCase     : true,\n>     ValueList       : {\n>         Label          : 'Shipping Condition',\n>         CollectionPath : 'ShippingCondition',\n>         Parameters     : [\n>         {\n>             $Type             : 'Common.ValueListParameterInOut',\n>             LocalDataProperty : ShippingCondition,\n>             ValueListProperty : 'ShippingCondition'\n>         },\n>         {\n>             $Type             : 'Common.ValueListParameterIn',\n>             LocalDataProperty : SoldToParty,\n>             ValueListProperty : 'SoldToParty',\n>             InitialValueIsSignificant: true\n>         },\n>         {\n>             $Type             : 'Common.ValueListParameterDisplayOnly',\n>             ValueListProperty : 'ShippingCondition_Text'\n>         }\n>         ]\n>     }\n> });\n> ```\n\n\n\n### Multiple Value Help Dialogs / Collective Search Help\n\nSome scenarios require more than one value help.\n\n> ### Sample Code:  \n> Multiple Value Help Dialogs\n> \n> ```\n> <Annotations Target=\"com.c_salesordermanage_sd.HeaderPartner/BusinessPartner\">\n>     <Annotation Term=\"Common.ValueList\" Qualifier=\"BusinessPartner\">\n>         ...Definition of ValueList...\n>     </Annotation>\n>     <Annotation Term=\"Common.ValueList\" Qualifier=\"SingleColumn\">\n>         ...Definition of ValueList...\n>     </Annotation>\n>     <Annotation Term=\"Common.ValueList\">\n>         ...Definition of ValueList w/o qualifier...\n>     </Annotation>\n> </Annotations>\n> ```\n\n\n\n<a name=\"loioa5608eabcc184aee99e1a7d88b28816c__section_h1j_xt3_5pb\"/>\n\n## Value Help for Draft-Enabled Entities\n\nValue help for draft-enabled entities only shows active documents.\n\n\n\n<a name=\"loioa5608eabcc184aee99e1a7d88b28816c__section_zmj_gw3_5pb\"/>\n\n## Value Help Using the `FetchValuesType`\n\nBy default, a value help requests the data immediately when the dialog is opened. Application developers can use the <code><a href=\"https://github.com/SAP/odata-vocabularies/blob/-/vocabularies/Common.md#FetchValuesType\">FetchValuesType</a></code> to bring up value help for fields, allowing users to choose that a value help doesn't load the data immediately. Users can then first maintain a filter, and then request the data by clicking the *Go* button.\n\nYou achieve this by setting the property \"FetchValues = 2\".\n\n> ### Sample Code:  \n> `ValueList` with `FetchValues`\n> \n> ```\n>  XML<Annotation Term=\"Common.ValueList\">\n>     <Record Type=\"Common.ValueListType\">\n>         <PropertyValue Property=\"CollectionPath\" String=\"ShippingCondition\"/>\n>         <PropertyValue Property=\"Label\" String=\"Shipping Condition\"/>\n>         <PropertyValue Property=\"FetchValues\" Int=\"2\"/>\n>         <PropertyValue Property=\"Parameters\">\n>             <Collection>\n>                 <Record Type=\"Common.ValueListParameterInOut\">\n>                     <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"ShippingCondition\"/>\n>                     <PropertyValue Property=\"ValueListProperty\" String=\"ShippingCondition\"/>\n>                 </Record>\n>                 <Record Type=\"Common.ValueListParameterIn\">\n>                     <PropertyValue Property=\"LocalDataProperty\" PropertyPath=\"SoldToParty\"/>\n>                     <PropertyValue Property=\"ValueListProperty\" String=\"SoldToParty\"/>\n>                 </Record>\n>                 <Record Type=\"Common.ValueListParameterDisplayOnly\">\n>                     <PropertyValue Property=\"ValueListProperty\" String=\"ShippingCondition_Text\"/>\n>                 </Record>\n>             </Collection>\n>         </PropertyValue>\n>     </Record>\n> </Annotation>\n> ```\n\n\n\n<a name=\"loioa5608eabcc184aee99e1a7d88b28816c__section_c4b_x5y_q4b\"/>\n\n## Fixed Values\n\nFor information about fixed values, see [Value Help as a Dropdown List](value-help-as-a-dropdown-list-2a0a630.md).\n\n\n\n<a name=\"loioa5608eabcc184aee99e1a7d88b28816c__section_n45_zgm_s1c\"/>\n\n## History of Recently Entered Values\n\nFilter bar fields can show the history of recently entered values, which is especially useful when end users frequently select the same values from a long list.\n\nWhen enabled, this feature saves the values a user has entered in the field. When the user sets the focus on the field, a list of recently entered values is displayed. When the user starts typing, the list is filtered according to their input. If the field has no previously entered values the list is not displayed, even if this feature is enabled.\n\nTo enable the history of recently entered values, enable the `INPUTFIELD_HISTORY` parameter in SAP Fiori launchpad. For more information, see [Manage Launchpad Settings](https://help.sap.com/docs/SAP_S4HANA_CLOUD/4fc8d03390c342da8a60f8ee387bca1a/22d573aead754b80abca18ec71872fb7.html).\n\n\n\n<a name=\"loioa5608eabcc184aee99e1a7d88b28816c__section_jxp_rtv_s4b\"/>\n\n## Date Picker and Date/Time Picker\n\nBased on the data type of the property, you can also render a date picker or a date/time picker if the filter field is restricted to a single value \\(via the `Capabilities.FilterRestrictions` annotation\\). Otherwise, the corresponding picker is rendered in a value help dialog.\n\nWhen you choose a property with the data type \"`Edm.Date`\", a date picker is rendered:\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```\n> <EntityType Name=\"SalesOrderManage\">\n>    ...<Property Name=\"SalesOrderDate\" Type=\"Edm.Date\"/>\n> </EntityType>\n> ```\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> entity SalesOrderManage {\n> …       SalesOrderDate                       : Date;\n> }\n> ```\n\n![](images/Date_Picker_bba0ad9.png)\n\nWhen you choose a property with the data type \"`Edm.DateTimeOffset`\", a date/time picker is rendered:\n\n> ### Sample Code:  \n> Date/Time Picker\n> \n> ```\n> <EntityType Name=\"SalesOrderManage\">\n>    ...<Property Name=\"LastChangedDateTime\" Type=\"Edm.DateTimeOffset\"/>\n> </EntityType>\n> ```\n\n![](images/Input_Field_Without_a_Timezone_Dialog_b07bbe3.png)\n\nYou can specify a timezone for a field of type \"`Edm.DateTimeOffset`\". If the timezone is specified \\(annotated\\), then the timezone is displayed in the input field and the text field in display mode. You can make the following settings:\n\n-   You can use a fixed value for the annotation `Timezone` in the `@Common` vocabulary, according to the IANA \\(Internet Assigned Numbers Authority\\) standard:\n\n    > ### Sample Code:  \n    > XML Annotation\n    > \n    > ```\n    > <EntityType Name=\"SalesOrderManage\">\n    >    <Property Name=\"timeDefault\" Type=\"Edm.DateTimeOffset\"/>\n    >    <Property Name=\"testTimeFixed\" Type=\"Edm.DateTimeOffset\"/>\n    >    <Property Name=\"testTime\" Type=\"Edm.DateTimeOffset\"/>\n    >    <Property Name=\"testTimezone\" Type=\"Edm.String\"/>\n    > </EntityType>\n    >   \n    > <Annotations Target=\"com.c_salesordermanage_sd.SalesOrderManage/timeDefault\">\n    >    <Annotation Term=\"Common.Label\" String=\"Timestamp with default timezone\"/>\n    > </Annotations>\n    >  \n    > <Annotations Target=\"com.c_salesordermanage_sd.SalesOrderManagerManage/testTimeFixed\">\n    >    <Annotation Term=\"Common.Timezone\" String=\"Asia/Riyadh\"/>\n    >    <Annotation Term=\"Common.Label\" String=\"Timestamp with fixed timezone\"/>\n    > </Annotations>\n    > ```\n\n    > ### Sample Code:  \n    > CAP CDS Annotation\n    > \n    > ```\n    > entity SalesOrderManage {\n    > …\n    > testTimeFixed                     : DateTime @Common : { Timezone : 'Asia/Riyadh' };\n    > …\n    > ```\n\n-   You can base it on another property value:\n\n    > ### Sample Code:  \n    > XML Annotation\n    > \n    > ```\n    > <Annotations Target=\"com.c_salesordermanage_sd.SalesOrderManage/testTime\">\n    >    <Annotation Term=\"Common.Timezone\" Path=\"testTimezone\"/>\n    >    <Annotation Term=\"Common.Label\" String=\"Datetime Stamp with Timezone based on Property\"/>\n    > </Annotations>\n    >   \n    > <Annotations Target=\"com.c_salesordermanage_sd.SalesOrderManager/testTimezone\">\n    >    <Annotation Term=\"Common.Label\" String=\"Timezone Property\"/>\n    > </Annotations>\n    > ```\n\n    > ### Sample Code:  \n    > ABAP CDS Annotation\n    > \n    > ```\n    > @Semantics.timeZoneReference: 'MySAPTimezone'\n    > MyDateTime,\n    >   \n    > @Semantics.timeZone\n    > MySAPTimezone,\n    > ```\n\n    > ### Sample Code:  \n    > CAP CDS Annotation\n    > \n    > ```\n    > entity SalesOrderManage {\n    > …\n    >         testTime                          : DateTime @Common : { Timezone : testTimezone };\n    > …\n    > ```\n\n\nCheck out our live example in the flexible programming model explorer at [Field - Format Options](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/buildingBlocks/field/fieldFormatOptions).\n\nIf you don't explicitly define the timezone, the `DateTimeOffset` field is converted and displayed in the timezone of the UI as determined by SAPUI5.\n\nThe following screenshot shows an input field with no specified timezone or the default timezone:\n\n![](images/Input_Field_with_No_Timezone_or_the_Default_Timezone_a2f5fc8.png)\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> entity SalesOrderManage {\n> …\n>         timeDefault                       : DateTime;\n> …\n> ```\n\nThe following screenshot shows an input field where a timezone has been specified:\n\n![](images/Input_Field_with_Specified_Timezone_b3b7f08.png)\n\nThe following screenshot shows that the timezone is specified for the corresponding input field. The Date/Time Picker doesn't show any timezone in the dialog:\n\n![](images/Input_Field_Without_a_Timezone_Dialog_b07bbe3.png)\n\n> ### Restriction:  \n> Parameterized value help service isn't supported.\n\n",
  "excerpt": "<!-- loioa5608eabcc184aee99e1a7d88b28816c --> Field Help A field can be associated with a helper control, depending on how the field is configured. > Note:   > This topic is only applicable to SAP Fio...",
  "wordCount": 5148,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}