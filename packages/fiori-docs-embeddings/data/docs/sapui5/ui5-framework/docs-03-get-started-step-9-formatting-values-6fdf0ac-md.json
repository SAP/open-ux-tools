{
  "id": "sapui5-docs-03-get-started-step-9-formatting-values-6fdf0ac-md",
  "title": "Step 9: Formatting Values",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-9-formatting-values-6fdf0ac.md",
  "lastModified": "2025-09-01T18:17:10.487Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Formatting",
    "Values"
  ],
  "headers": [
    "Step 9: Formatting Values",
    "Preview",
    "Coding"
  ],
  "content": "<!-- loio6fdf0acd0bc24ffdad327cf7e6f9e7e0 -->\n\n# Step 9: Formatting Values\n\nWe'd also like to provide our users with a way of contacting Harry Hawk, so we're adding a link that sends an e-mail to Harry. To do this, we convert our data in the model to match the `sap.m.URLHelper.normalizeEmail` API. As soon as the user changes the name, the e-mail also changes. We need a custom formatter function for this.\n\n\n\n## Preview\n\n  \n  \n**An e-mail link is added to the address panel**\n\n![The graphic has an explanatory text](images/Tutorial_Data_Binding_Step_9_1161575.png \"An e-mail link is added to the address panel\")\n\n\n\n## Coding\n\nYou can view and download all files in the Demo Kit at [Data Binding - Step 9](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.databinding/sample/sap.ui.core.tutorial.databinding.09).\n\n1.  Create a new folder named `controller` within your `webapp` folder as a general location for all controller files for this app. Next, create a new file named `App.controller.js` with the following content:\n\n    **webapp/controller/App.controller.js \\(New\\)**\n\n    ```js\n    sap.ui.define([\n    \t\"sap/m/library\",\n    \t\"sap/ui/core/mvc/Controller\"\n    ], (mobileLibrary, Controller) => {\n    \t\"use strict\";\n    \n    \treturn Controller.extend(\"ui5.databinding.controller.App\", {\n    \t\tformatMail(sFirstName, sLastName) {\n    \t\t\tconst oBundle = this.getView().getModel(\"i18n\").getResourceBundle();\n    \n    \t\t\treturn mobileLibrary.URLHelper.normalizeEmail(\n    \t\t\t\t`${sFirstName}.${sLastName}@example.com`,\n    \t\t\t\toBundle.getText(\"mailSubject\", [sFirstName]),\n    \t\t\t\toBundle.getText(\"mailBody\"));\n    \t\t}\n    \t});\n    });\n    ```\n\n    In our custom formatter, we set the first and last name currently in the model as function parameters. When a user changes the data in the model by entering a different name in the input fields, our formatter will be invoked automatically by the framework. This ensures that the UI stays in sync with the data model.\n\n    In the `formatMail` function, we use the `sap.m.URLHelper.normalizeEmail` function that expects an e-mail address, a mail subject, and a text body. When a user follows the link, their default email client will open with these parameters.For more information, see [API Reference: `sap.m.URLHelper.normalizeEmail`](https://ui5.sap.com/#/api/sap.m.URLHelper/methods/normalizeEmail). The `mailSubject` resource bundle text contains a placeholder for the recipient's first name \\(see below\\). Therefore, we provide the name with `[sFirstName]`.\n\n    > ### Note:  \n    > For a detailed description of the e-mail link format, see [https://developer.mozilla.org/de/docs/Web/Guide/HTML/Email\\_links](https://developer.mozilla.org/de/docs/Web/Guide/HTML/Email_links).\n\n2.  Enhance the `App.view.xml` file as shown below:\n\n    **webapp/view/App.view.xml**\n\n    ```xml\n    <mvc:View\n    \tcontrollerName=\"ui5.databinding.controller.App\"\n    \txmlns=\"sap.m\"\n    \txmlns:form=\"sap.ui.layout.form\"\n    \txmlns:l=\"sap.ui.layout\"\n    \txmlns:mvc=\"sap.ui.core.mvc\">\n    \t...\n    \t<Panel headerText=\"{i18n>panel2HeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n    \t\t<content>\n    \t\t\t<l:VerticalLayout>\n    \t\t\t\t<Label labelFor=\"address\" text=\"{i18n>address}:\"/>\n    \t\t\t\t<FormattedText class=\"sapUiSmallMarginBottom\"\n    \t\t\t\t\thtmlText=\"{/address/street}&lt;br&gt;{/address/zip} {/address/city}&lt;br&gt;{/address/country}\"\n    \t\t\t\t\tid=\"address\" width=\"200px\"/>\n    \t\t\t\t<Link href=\"{\n    \t\t\t\t\t\tparts: [\n    \t\t\t\t\t\t\t'/firstName',\n    \t\t\t\t\t\t\t'/lastName'\n    \t\t\t\t\t\t],\n    \t\t\t\t\t\tformatter: '.formatMail'\n    \t\t\t\t\t}\"\n    \t\t\t\t\ttext=\"{i18n>sendEmail}\"/>\n    \t\t\t</l:VerticalLayout>\n    \t\t</content>\n    \t</Panel>\n    </mvc:View>\n    ```\n\n    For more complex bindings, we can't use the simple binding syntax with the curly braces anymore. The `href` property of the `Link` element now contains an entire object inside the string value. In this case, the object has two properties:\n\n    -   `parts`\n\n        This is a JavaScript array in which each element is a string representing a `path` property. The number and order of the elements in this array correspond directly to the number and order of parameters expected by the `formatMail` function.\n\n    -   `formatter`\n\n        This is a reference to the function that receives the parameters listed in the `parts` array. Whatever value the formatter function returns becomes the value set for the `href` property. The dot \\(<code><b></b>formatMail</code>\\) at the beginning of the formatter tells SAPUI5 to look for a `formatMail` function on the controller instance of the view. If you don't use the dot, the function will be resolved by looking into the global namespace.\n\n\n    > ### Note:  \n    > When using formatter functions, the binding automatically switches to \"one-way\". Therefore, you can't use a formatter function for \"two-way\" scenarios. However, you can use data types \\(which we explain in the following steps\\).\n\n3.  Add the `# E-mail` section to the `i18n.properties` and `i18n_de.properties` files as shown below.\n\n    **webapp/i18n/i18n.properties**\n\n    ```ini\n    …\n    # Screen titles\n    panel1HeaderText=Data Binding Basics \n    panel2HeaderText=Address Details\n    \n    # E-mail\n    sendEmail=Send Mail\n    mailSubject=Hi {0}!\n    mailBody=How are you?\n    ```\n\n    **webapp/i18n/i18n\\_de.properties**\n\n    ```ini\n    …\n    # Screen titles\n    panel1HeaderText=Data Binding Grundlagen\n    panel2HeaderText=Adressdetails\n    \n    # E-mail\n    sendEmail=E-mail versenden\n    mailSubject=Hallo {0}!\n    mailBody=Wie geht es dir?\n    ```\n\n\n**Related Information**  \n\n\n[Formatting, Parsing, and Validating Data](../04_Essentials/formatting-parsing-and-validating-data-07e4b92.md \"Data that is presented on the UI often has to be converted so that is human readable and fits to the locale of the user. On the other hand, data entered by the user has to be parsed and validated to be understood by the data source. For this purpose, you use formatters and data types.\")\n\n",
  "excerpt": "<!-- loio6fdf0acd0bc24ffdad327cf7e6f9e7e0 --> Step 9: Formatting Values We'd also like to provide our users with a way of contacting Harry Hawk, so we're adding a link that sends an e-mail to Harry. T...",
  "wordCount": 676,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}