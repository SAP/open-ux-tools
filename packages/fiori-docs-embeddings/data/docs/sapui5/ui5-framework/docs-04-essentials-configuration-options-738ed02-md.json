{
  "id": "sapui5-docs-04-essentials-configuration-options-738ed02-md",
  "title": "Configuration Options",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/configuration-options-738ed02.md",
  "lastModified": "2025-09-01T18:17:10.497Z",
  "tags": [
    "ui5-framework",
    "md",
    "Configuration",
    "Options"
  ],
  "headers": [
    "Configuration Options",
    "**Available Options and Default Values**"
  ],
  "content": "<!-- loio738ed025b36e484fa99046d0f80552fd -->\n\n# Configuration Options\n\nThe UI5 test suite module contains the configuration for the UI5 test suite.\n\n\n\n<a name=\"loio738ed025b36e484fa99046d0f80552fd__section_vyx_hpm_sdc\"/>\n\n## **Available Options and Default Values**\n\nThe following options are available on the `defaults` and the individual test configuration objects:\n\n> ### Note:  \n> The values used in the following code are the default values and are used as a fallback for options that are not defined in the configuration file - neither in the `defaults` object, nor in an individual test configuration object.\n\n```\n\n{\n\t/*\n\t * ID(s) of the module(s) to load.\n\t *\n\t * Can either be a single string or an array of strings.\n\t * Each string might start with a leading \"./\" \n\t * when the test module is located in the same folder\n\t * as the testsuite configuration.\n\t * You can use the following placeholder:\n\t *   {name} - name of the current test module\n\t */\n\tmodule: \"./{name}.qunit\",\n\n\n\t/*\n\t * URL of the test page to start for this test.\n\t *\n\t * By default, all tests use the generic starter page which reads the suite\n\t * configuration, finds the tests and starts the configured test components\n\t * before it requires and executes the configured test module(s).\n\t *\n\t * The URL must be relative to the application root and can use the following\n\t * placeholders, enclosed in curly braces:\n\t *   {suite} - name of the testsuite (configuration)\n\t *   {name} - name of the current test module\n\t */\n\tpage: \"resources/sap/ui/test/starter/Test.qunit.html?testsuite={suite}&test={name}\",\n\n\n\t/*\n\t * Title of the test.\n\t * The URL must be relative to the application root and can use the following\n\t * placeholders, enclosed in curly braces:\n\t *   {suite} - name of the testsuite (configuration)\n\t *   {name} - name of the current test module\n\t */\n\ttitle: \"QUnit tests '{name}' of suite '{suite}'\",\n\n\n\t/*\n\t * QUnit configuration.\n\t *\n\t * Either can be a null or false or an object with the properties documented below.\n\t * The values null and false are equivalent to the object { version: null }\n\t */\n\tqunit: {\n\t\t/*\n\t\t * Version of QUnit that should be loaded.\n\t\t * If set to a null, QUnit won't be loaded.\n\t\t * If set to \"edge\", the newest available version of QUnit will be used.\n\t\t * If set to a number, the corresponding version of QUnit will be used if supported.\n\t\t * Currently supported versions are 1 and 2, an error will be thrown for unsupported versions.\n\t\t */\n\t\tversion: \"edge\",\n\n\t\t/*\n\t\t * Most statically configurable options from QUnit.config can be configured,\n\t\t * e.g. reorder, blocking etc.\n\t\t * Note that 'autostart' is an exception. To avoid timing issues with asynchronous test\n\t\t * loading, 'autostart' will always be set to false. Only after all tests have been loaded,\n\t\t * QUnit.start() will be called, either by the generic test starter or by the test module itself,\n\t\t * see the general test option 'autostart' below.\n\t\t */\n\t\t// reorder: true // only serves as an example, not part of the internal defaults of the starter\n\t},\n\n\t/*\n\t * Sinon.JS configuration.\n\t *\n\t * Either can be a null or false or an object with the properties documented below.\n\t * The values null and false are equivalent to the object { version: null }\n\t */\n\tsinon: {\n\n\t\t/*\n\t\t * Version of Sinon.JS that should be loaded.\n\t\t * If set to null, Sinon won't be loaded.\n\t\t * If set to \"edge\", the newest available version of Sinon will be used.\n\t\t * If set to a number, the corresponding version of Sinon will be used if supported.\n\t\t * Currently supported are versions 1 and 4, an error will be thrown for unsupported versions.\n\t\t */\n\t\tversion: \"edge\",\n\n\t\t/*\n\t\t * Whether one of the sinon-qunit bridges will be loaded.\n\t\t * When set to true, the sap/ui/thirdparty/sinon-qunit bridge will be loaded for Sinon 1\n\t\t * and the sap/ui/qunit/sinon-qunit-bridge will be loaded for newer versions of Sinon.\n\t\t *\n\t\t * The bridge will only be loaded after both, QUnit and Sinon.JS have been loaded.\n\t\t * If either QUnit or Sinon.JS are not loaded, no bridge will be loaded.\n\t\t *\n\t\t * If Sinon.JS is not loaded, but QUnit, the bridge will not be loaded, but a shim\n\t\t * with dependencies will be configured. This allows tests to load Sinon.JS/the bridge on\n\t\t * their own without taking care of the bridge dependencies. \n\t\t */\n\t\tqunitBridge: true,\n\n\n\t\t/*\n\t\t * Any other statically configurable Sinon option can be specified as well.\n\t\t * Note that they only play a role when a sandbox is used.\n\t\t */\n\t\tuseFakeTimers: false,\n\t\tuseFakeServer: false\n\t},\n\n\n\t/*\n\t * Code coverage options.\n\t * The qunit-coverage module will always be loaded after QUnit has been loaded to enable the coverage\n\t * option. When the 'coverage' parameter is set in the URL (e.g. because the coverage checkbox has been\n\t * clicked), then blanket will be loaded before qunit-coverage to avoid synchronous loading of it.\n\t */\n\tcoverage: {\n\t\tonly: null,\n\t\tnever: null,\n\t\tbranchTracking: false\n\t},\n\n\t/*\n\t * UI5 runtime configuration options.\n\t *\n\t * All properties will be copied to window[\"sap-ui-config\"].\n\t * If window[\"sap-ui-config\"] doesn't support it or if the value is of a type\n\t * not supported for window[\"sap-ui-config\"], executing the UI5 Core might fail.\n\t *\n\t * Only exception for now: the libs property can be an array of library names,\n\t * not only a comma separated string.\n\t *\n\t * To ease test development, the following defaults are defined by the test starter:\n\t */\n\tui5: {\n\t\tnoConflict: true,\n\t\tlibs: [],\n\t\ttheme: \"default\"\n\t},\n\n\t/*\n\t * UI5 Loader configuration.\n\t *\n\t * The provided configuration will be passed to `sap.ui.loader.config` and can be used to \n\t * configure paths, shims, and other loader configuration.\n\t */\n\tloader: {},\n\n\t/*\n\t * Whether the test starter should call QUnit.start() after all prerequisites have been fulfilled\n\t * (e.g. QUnit, Sinon, a bridge, have been loaded, coverage tooling has been loaded and configured,\n\t * the Core has been booted, the test modules have been loaded and executed).\n\t */\n\tautostart: true,\n\n\n\t/*\n\t * Whether the test starter should skip a test file. Such tests will remain in the overview list,\n\t * but won't be executed in the test suite.\n\t */\n\tskip: false\n};\n```\n\n",
  "excerpt": "<!-- loio738ed025b36e484fa99046d0f80552fd --> Configuration Options The UI5 test suite module contains the configuration for the UI5 test suite. <a name=\"loio738ed025b36e484fa99046d0f80552fd__section_...",
  "wordCount": 1008,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}