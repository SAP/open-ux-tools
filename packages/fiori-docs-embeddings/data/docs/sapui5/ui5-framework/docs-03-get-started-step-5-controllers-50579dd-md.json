{
  "id": "sapui5-docs-03-get-started-step-5-controllers-50579dd-md",
  "title": "Step 5: Controllers",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-5-controllers-50579dd.md",
  "lastModified": "2025-09-01T18:17:10.477Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Controllers"
  ],
  "headers": [
    "Step 5: Controllers",
    "Preview",
    "Coding",
    "webapp/view/App.view.xml",
    "webapp/controller/App.controller.js \\(New\\)",
    "Conventions"
  ],
  "content": "<!-- loio50579ddf2c934ce789e056cfffe9efa9 -->\n\n# Step 5: Controllers\n\nIn this step, we replace the text with a button and show the \"Hello World\" message when the button is pressed. The handling of the button's `press` event is implemented in the controller of the view.\n\n\n\n## Preview\n\n![A Say Hello button is added](images/UI5_Walkthrough_Step_05_cedfdf8.png)\n\n\n\n<a name=\"loio50579ddf2c934ce789e056cfffe9efa9__section_yqd_crc_syb\"/>\n\n## Coding\n\nYou can view and download all files at [Walkthrough - Step 5](https://ui5.sap.com/#/entity/sap.m.tutorial.walkthrough/sample/sap.m.tutorial.walkthrough.05).\n\n\n\n<a name=\"loio50579ddf2c934ce789e056cfffe9efa9__section_zqd_crc_syb\"/>\n\n## webapp/view/App.view.xml\n\n```xml\n<mvc:View\n   controllerName=\"ui5.walkthrough.controller.App\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <Button\n      text=\"Say Hello\"\n      press=\".onShowHello\"/>\n</mvc:View>\n```\n\nWe add a reference to the controller and replace the text control with a button with text \"Say Hello\". The button triggers the `.onShowHello` event handler function when being pressed. We also have to specify the name of the controller that is connected to the view and holds the `.onShowHello` function by setting the `controllerName` attribute of the view. The `controllerName` is a combination of the namespace of your application followed by the actual name of the controller. We'll also use it in the next step when defining the controller.\n\nA view does not necessarily need an explicitly assigned controller. You do not have to create a controller if the view is just displaying information and no additional functionality is required. If a controller is specified, it is instantiated after the view is loaded.\n\n\n\n## webapp/controller/App.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\"\n], (Controller) => {\n   \"use strict\";\n\n   return Controller.extend(\"ui5.walkthrough.controller.App\", {\n      onShowHello() {\n         // show a native JavaScript alert\n         alert(\"Hello World\");\n      }\n   });\n});\n```\n\nWe create the folder `webapp/controller` and a new file `App.controller.js` inside. We define the app controller in its own file by extending the UI5-provided `sap/ui/core/mvc/Controller`. In the beginning, it holds only a single function called `onShowHello` that handles the button's `press` event by showing an alert.\n\n\n\n## Conventions\n\n-   Controller names are capitalized\n\n-   Controllers carry the same name as the related view \\(if there is a 1:1 relationship\\)\n\n-   Event handlers are prefixed with `on`\n\n-   Controller names always end with `*.controller.js`\n\n\n**Related Information**  \n\n\n[Model View Controller \\(MVC\\)](../04_Essentials/model-view-controller-mvc-91f2334.md \"The Model View Controller (MVC) concept is used in SAPUI5 to separate the representation of information from the user interaction. This separation facilitates development and the changing of parts independently.\")\n\n[Controller](../04_Essentials/controller-121b8e6.md \"A controller contains methods that define how models and views interact.\")\n\n",
  "excerpt": "<!-- loio50579ddf2c934ce789e056cfffe9efa9 --> Step 5: Controllers In this step, we replace the text with a button and show the \"Hello World\" message when the button is pressed. The handling of the but...",
  "wordCount": 377,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}