{
  "id": "sapui5-docs-03-get-started-step-2-steady-128214a-md",
  "title": "Step 2: Steady...",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-2-steady-128214a.md",
  "lastModified": "2025-09-01T18:17:10.461Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Steady"
  ],
  "headers": [
    "Step 2: Steady...",
    "Preview",
    "Coding",
    "webapp/index.js",
    "webapp/App.view.xml \\(New\\)",
    "webapp/App.controller.js \\(New\\)"
  ],
  "content": "<!-- loio128214a9b2754b15aec5e365780b03fd -->\n\n# Step 2: Steady...\n\nNow we extend our minimalist HTML page to a basic app with a view and a controller.\n\n\n\n<a name=\"loio128214a9b2754b15aec5e365780b03fd__section_dxj_gxh_1gb\"/>\n\n## Preview\n\n  \n  \n**The browser shows a Steady button in an app**\n\n![](images/Tutorial_Quick_Start_Step_2_240ef53.png \"The browser shows a Steady button in an app \")\n\n\n\n<a name=\"loio128214a9b2754b15aec5e365780b03fd__section_rcp_yxh_1gb\"/>\n\n## Coding\n\nYou can view and download all files at [Quick Start - Step 2](https://ui5.sap.com/#/sample/sap.m.tutorial.quickstart.02/preview).\n\n\n\n## webapp/index.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/core/mvc/XMLView\"\n], (XMLView) => {\n\t\"use strict\";\n\n\tXMLView.create({\n\t\tviewName: \"ui5.quickstart.App\"\n\t}).then((oView) => oView.placeAt(\"content\"));\n});\n```\n\nNow we replace most of the code in this file: We remove the inline button from the previous step, and introduce a proper XML view to separate the presentation from the controller logic. We prefix the view name `Quickstart.App` with our newly defined namespace. The view is loaded asynchronously.\n\nSimilar to the step before, the view is placed in the element with the `content` ID after it has finished loading.\n\n\n\n<a name=\"loio128214a9b2754b15aec5e365780b03fd__section_zgg_rl3_1gb\"/>\n\n## webapp/App.view.xml \\(New\\)\n\n```xml\n<mvc:View\n\tcontrollerName=\"ui5.quickstart.App\"\n\tdisplayBlock=\"true\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<App>\n\t\t<Page title=\"My App\">\n\t\t\t<Button\n\t\t\t\ttext=\"Steady...\"\n\t\t\t\tpress=\".onPress\"\n\t\t\t\ttype=\"Emphasized\"\n\t\t\t\tclass=\"sapUiSmallMargin\"/>\n\t\t</Page>\n\t</App>\n</mvc:View>\n```\n\nThe presentation logic is now defined declaratively in an XML view.\n\nUI controls are located in libraries that we define in the `View` tag. In our case, we use the bread-and-butter controls from `sap.m`.\n\nThe new controls in the view are an `App` and a `Page`. They define a Web app with a header bar and a title.\n\nThe button from the previous examples now also defines a `type` and a `class` attribute. This improves the layout of our button and makes it stand out more.\n\nWe outsource the controller logic to an app controller. The `.onPress` event now references a function in the controller.\n\n\n\n<a name=\"loio128214a9b2754b15aec5e365780b03fd__section_rc3_gm3_1gb\"/>\n\n## webapp/App.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\"\n], (Controller, MessageToast) => {\n\t\"use strict\";\n\n\treturn Controller.extend(\"ui5.quickstart.App\", {\n\t\tonPress() {\n\t\t\tMessageToast.show(\"Hello App!\");\n\t\t}\n\t});\n\n});\n```\n\nIn our controller, we load the `Controller` base class and extend it to define the behavior of our app. We also add the event handler for our button.\n\nThe `MessageToast` is also loaded as a dependency. When the button is pressed, we now display a \"Hello App\" message.\n\nNow reload your `index.html` file. You can see a title bar and a blue button that reacts to your input. Congratulations, you have created our very first app.\n\n**Related Information**  \n\n\n[XML View](../04_Essentials/xml-view-91f2928.md \"The XML view type is defined in an XML file, with a file name ending in .view.xml. The file name and the folder structure together specify the name of the view that equals the SAPUI5 module name.\")\n\n[Controller](../04_Essentials/controller-121b8e6.md \"A controller contains methods that define how models and views interact.\")\n\n",
  "excerpt": "<!-- loio128214a9b2754b15aec5e365780b03fd --> Step 2: Steady... Now we extend our minimalist HTML page to a basic app with a view and a controller. <a name=\"loio128214a9b2754b15aec5e365780b03fd__secti...",
  "wordCount": 440,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}