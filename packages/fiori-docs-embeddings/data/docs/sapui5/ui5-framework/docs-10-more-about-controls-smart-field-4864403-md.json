{
  "id": "sapui5-docs-10-more-about-controls-smart-field-4864403-md",
  "title": "Smart Field",
  "category": "ui5-framework",
  "path": "docs/10_More_About_Controls/smart-field-4864403.md",
  "lastModified": "2025-09-01T18:17:10.702Z",
  "tags": [
    "ui5-framework",
    "md",
    "Smart",
    "Field"
  ],
  "headers": [
    "Smart Field",
    "Overview",
    "Details",
    "Binding",
    "Configuration",
    "Text",
    "TextArrangement",
    "Field Control"
  ],
  "content": "<!-- loio4864403f08c64ca08a2b0ee1fa9cb5e2 -->\n\n# Smart Field\n\nThe `sap.ui.comp.smartfield.SmartField` control offers a wrapper for other controls using OData metadata to determine which control has to be instantiated and makes it possible to add input-enabled fields to an application.\n\nThe frequently asked questions section aims at answering some basic questions that you might have when using this control.For more information, see the FAQ in the [API Reference](https://ui5.sap.com/#/api/sap.ui.comp.smartfield.SmartField%23faq).\n\nFor more information about this control, see the [API Reference](https://ui5.sap.com/#/api/sap.ui.comp.smartfield.SmartField) and the [samples](https://ui5.sap.com/#/entity/sap.ui.comp.smartfield.SmartField). \n\nFor more information about annotations for this control, see the [API Reference](https://ui5.sap.com/#/api/sap.ui.comp.smartfield.SmartField/annotations/Summary).\n\n\n\n## Overview\n\nThe `SmartField` control provides an efficient way to add input-enabled fields to an SAP Fiori application. The control automatically adjusts to the metadata of the underlying OData service, for example, by doing the following:\n\n-   Hosting controls for editing and displaying values of OData properties\n\n-   Providing value help automatically\n\n-   Performing input checks\n\n\nIn addition, the `SmartField` control implements field control and supports message handling.\n\nThe `SmartField` control can be used in the following ways:\n\n-   As a standalone control, for example, in XML views\n\n-   In combination with a `SmartForm` control\n\n-   In combination with a `SmartTable` control\n\n    Used in particular as cell editor in editing scenarios.\n\n\nThe `SmartField` control selects a control for displaying and a control for editing the OData property to which they are bound. The main criterion for selecting nested controls is the EDM type of the OData property to which a `SmartField` control is bound.\n\n\n\n## Details\n\n\n\n### Binding\n\nThe OData property that a `SmartField` control manages is determined by the binding of the value property of the control. Properties of a complex type are not supported.\n\nThe `SmartField` control allows for binding of navigation properties.\n\nThe entity set to which the bindings are related is either specified in the `entitySet` attribute of the control or derived from the binding context at runtime.\n\nWhen binding the `SmartField` control against the OData service property of type `Edm.Boolean`, and if the `SmartField` control is in read-only mode, static texts are used for visual representation. In addition, a configuration parameter in the `SmartField` control can define the properties of the static texts of the `CheckBox`, such as `Yes/No` or `True/False`. For the `SmartForm` control, the custom data can be used for this purpose.\n\n\n\n### Configuration\n\nThe `configuration` aggregation of `SmartField` provides the option to overwrite the default behavior of the `SmartField` control.\n\nUsing the `controlType` property, you can select the appropriate control for your use case.\n\nThe following control types are available:\n\n-   Check box\n\n-   Date picker\n\n-   Dropdown list \\(combo box\\)\n\n-   Input\n\n-   Select dropdown list \\(`sap.m.Select`\\)\n\n\nIt depends on the related data types and configurations **which** control types are rendered, for example:\n\n-   If the relevant OData property is of type `Edm.String`, the `SmartField` control can be configured to render a combo box or a select dropdown list.\n\n-   If the relevant OData property is of type `Edm.Boolean`, the `SmartField` control can be configured to render a combo box.\n\n-   If the relevant OData property is of type `Edm.DateTime`, the `SmartField` control can be configured to render a date picker.\n\n\nThe table below shows which controls are used if you **don't** overwrite the control type.\n\n**Control Selection**\n\n\n<table>\n<tr>\n<th valign=\"top\" colspan=\"2\">\n\nEditing Use Cases\n\n</th>\n<th valign=\"top\" colspan=\"2\">\n\nDisplay Use Cases\n\n</th>\n</tr>\n<tr>\n<th valign=\"top\">\n\nEDM Type\n\n</th>\n<th valign=\"top\">\n\nControl\n\n</th>\n<th valign=\"top\">\n\nEDM Type\n\n</th>\n<th valign=\"top\">\n\nControl\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Boolean` \n\n</td>\n<td valign=\"top\">\n\n`sap.m.CheckBox` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Boolean` \n\n</td>\n<td valign=\"top\" rowspan=\"14\">\n\n`sap.m.Text`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Int16` \n\n</td>\n<td valign=\"top\" rowspan=\"10\">\n\n`sap.m.Input` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Int16` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Int32` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Int32` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Int64` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Int64` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.SByte` \n\n</td>\n<td valign=\"top\">\n\n`Edm.SByte` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Byte` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Byte` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Single` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Single` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Float` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Float` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Double` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Double` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Decimal` \n\n</td>\n<td valign=\"top\">\n\n`Edm.Decimal` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.String` \n\n</td>\n<td valign=\"top\">\n\n`Edm.String` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.Time` \n\n</td>\n<td valign=\"top\" rowspan=\"3\">\n\n`sap.m.DateTimePicker`\n\n</td>\n<td valign=\"top\">\n\n`Edm.Time` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.DateTime` \n\n</td>\n<td valign=\"top\">\n\n`Edm.DateTime` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Edm.DateTimeOffset` \n\n</td>\n<td valign=\"top\">\n\n`Edm.DateTimeOffset` \n\n</td>\n</tr>\n</table>\n\nUsing the `displayBehaviour` property, you can define how an ID and a description or Boolean values are represented in read-only mode.\n\nYou have the following options:\n\n-   `sap.ui.comp.smartfield.DisplayBehaviour.descriptionAndId`: Description and ID are displayed for available values.\n\n-   `sap.ui.comp.smartfield.DisplayBehaviour.descriptionOnly`: Only the description of the available values is displayed.\n\n-   `sap.ui.comp.smartfield.DisplayBehaviour.idAndDescription`: ID and description are displayed for available values.\n\n-   `sap.ui.comp.smartfield.DisplayBehaviour.idOnly`: Shows the ID only.\n\n-   `sap.ui.comp.smartfield.DisplayBehaviour.OnOff`: Shows Boolean value as `On/Off`\n\n-   `sap.ui.comp.smartfield.DisplayBehaviour.TrueFalse`: Shows Boolean value as `True/False`\n\n-   `sap.ui.comp.smartfield.DisplayBehaviour.YesNo`: Shows Boolean value as `Yes/No`\n\n\nUsing the `preventInitialDataFetchInValueHelpDialog` property, you can prevent the query from being fired immediately when the value help dialog is opened.\n\n\n\n### Text\n\nThe `Text` annotation defines the field description and where it is taken from. It can be configured with V2 or V4 annotations. For more information, see the [API Reference: `Text`](https://ui5.sap.com/#/api/sap.ui.comp.smartfield.SmartField%23annotations/Text).\n\nThe configuration takes place as follows:\n\n-   For the local text annotation – it's set at a property level. The description is derived from the local text or navigational property.\n-   For the `ValueList` text annotation \\(with applied `ValueList` annotation\\) – it's set at the `ValueList` `Collection` level. The text is derived from the `ValueList` `Collection` text configuration. If a local text annotation is applied, it will be taken into consideration at the start as initial text value. This prevents the initial call for description from taking place. If the value is changed, the description is taken accordingly from the `ValueList` `Collection` item.\n\n> ### Note:  \n> The local text annotation won't be considered in the scenario where the `SmartField` is in `edit` mode and is configured with fixed values \\(rendered as a dropdown list\\).\n\nWith the `textInEditModeSource` property of the `SmartField`, you can additionally configure the control at view level where the text is taken from.\n\nFor more information, see the [API Reference: `TextInEditModeSource`](https://ui5.sap.com/#/api/sap.ui.comp.smartfield.SmartField%23controlProperties). \n\n\n\n### TextArrangement\n\nThe `TextArrangement` annotation describes the arrangement of an ID value and its description. For more information, see the [API Reference: `TextArrangement`](https://ui5.sap.com/#/api/sap.ui.comp.smartfield.SmartField%23annotations/TextArrangement). \n\n\n\n### Field Control\n\nThe field control handles the visual representation of `SmartField` controls, such as:\n\n-   Whether input is mandatory\n\n-   Whether the controls are read-only\n\n-   Whether the controls are hidden as defined by the SAP Fiori user interface programming model\n\n    The following attributes are available to implement field control:\n\n    -   `Enabled`\n\n        Toggles from display to edit mode.\n\n    -   `Visible`\n\n        Hides the `SmartField` control.\n\n    -   `Mandatory`\n\n        Determines whether input is required.\n\n\n\nConsumers of the `SmartField` control can further adapt the runtime behavior by binding these attributes.\n\nThe behavior can only be made more restrictive on client side, for example, if an OData property is mandatory, this cannot be overwritten on `SmartField` control level.\n\n",
  "excerpt": "<!-- loio4864403f08c64ca08a2b0ee1fa9cb5e2 --> Smart Field The sap.ui.comp.smartfield.SmartField control offers a wrapper for other controls using OData metadata to determine which control has to be in...",
  "wordCount": 1173,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}