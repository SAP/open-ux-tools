{
  "id": "sapui5-docs-04-essentials-ids-in-declarative-fragments-0715706-md",
  "title": "IDs in Declarative Fragments",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/ids-in-declarative-fragments-0715706.md",
  "lastModified": "2025-09-01T18:17:10.519Z",
  "tags": [
    "ui5-framework",
    "md",
    "IDs",
    "Declarative",
    "Fragments"
  ],
  "headers": [
    "IDs in Declarative Fragments"
  ],
  "content": "<!-- loio0715706772ed43f389d2ab9b381ef8ec -->\n\n# IDs in Declarative Fragments\n\nIf a fragment with a control ID is instantiated twice without giving an ID, a duplicate ID error occurs.\n\nGiven the following XML fragment example:\n\n```xml\n<HBox xmlns=\"sap.m\">\n   <Button                    text=\"Hello World\" />\n   <Button id=\"btnInFragment\" text=\"Hello World\" />\n</HBox>\n```\n\nSince 1.93 the `loadFragment` method is available on every controller instance \\(`sap.ui.core.mvc.Controller` or subclasses\\). Using this API makes accessing the resulting controls much easier, because the IDs of the fragment content is automatically prefixed by the view ID.\n\n```js\nsap.ui.define([\"sap/ui/core/Controller\"], function(Controller){\n\n   return Controller.extend({\n\n      onInit: function(){\n         this.loadFragment({\n            name: \"my.useful.UiPartZ\"\n         }).then(function(oFragment){\n            // ...\n         }); // Button ID will be prefixed by the view ID\n      }\n   })\n  \n});\n```\n\nYou can also pass an additional ID for the fragment content:\n\n```js\nsap.ui.define([\"sap/ui/core/Controller\"], function(Controller){\n\n   return Controller.extend({\n\n      onInit: function(){\n         this.loadFragment({\n            id: \"myFragment\"\n            name: \"my.useful.UiPartZ\",\n         }).then(function(oFragment){\n            // ...\n         }); // Button ID will be prefixed by the view ID and the fragment ID\n      }\n   })\n  \n});\n```\n\nIn case the fragment should be called by a non-controller instance artefact, you have to choose the already existing `Fragment.load` API. Here, you have more flexibility with more options to configure.\n\nThe first button will always have a generated ID, as, for instance, `__button2`. This is regardless of how the fragment is instantiated or whether it resides inside a view.\n\nThe second button will either have the ID `btnInFragment`, in case the fragment is instantiated without giving an ID. This approach is easy to use, but implies the risk of ID collisions when instantiated multiple times:\n\n```js\nsap.ui.require([\"sap/ui/core/Fragment\"], function(Fragment){\n   Fragment.load({\n      name: \"my.useful.UiPartZ\"\n   }).then(function(oFragment){\n      // ...\n   }); // Button ID will not be prefixed\n});\n```\n\nThe other possible ID of the second button is `myFragment--btnInFragment`, in case the fragment is instantiated giving the ID `myFragment`. You should not rely on the exact syntax of this prefixing.\n\n```js\nsap.ui.require([\"sap/ui/core/Fragment\"], function(Fragment){\n   Fragment.load({\n      name: \"my.useful.UiPartZ\",\n      id: \"myFragment\"\n   }).then(function(oFragment){\n      // ...\n   });\n});\n```\n\nIt is, however, possible that a containing view may add its prefix. For more information, see [IDs of Fragments in Views](ids-of-fragments-in-views-f10bf70.md).\n\n",
  "excerpt": "<!-- loio0715706772ed43f389d2ab9b381ef8ec --> IDs in Declarative Fragments If a fragment with a control ID is instantiated twice without giving an ID, a duplicate ID error occurs. Given the following ...",
  "wordCount": 340,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}