{
  "id": "sapui5-docs-03-get-started-step-2-data-access-and-client-server-communication-e9de002-md",
  "title": "Step 2: Data Access and Client-Server Communication",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-2-data-access-and-client-server-communication-e9de002.md",
  "lastModified": "2025-09-01T18:17:10.460Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Data",
    "Access",
    "and",
    "Client",
    "Server",
    "Communication"
  ],
  "headers": [
    "Step 2: Data Access and Client-Server Communication",
    "Preview",
    "Coding",
    "webapp/controller/App.controller.js",
    "webapp/view/App.view.xml",
    "webapp/i18n/i18n.properties",
    "Under the Hood"
  ],
  "content": "<!-- loioe9de002ddf1e478fbb9232bfba83dcf0 -->\n\n# Step 2: Data Access and Client-Server Communication\n\nIn this step, we see how the `Table` that is bound to the `People` entity set initially requests its data, and how the data can be refreshed. We use the *Console* tab in the browser developer tools to monitor the communication between the browser and the server. We see the initial request as well as the requests for refreshing the data.\n\n\n\n<a name=\"loioe9de002ddf1e478fbb9232bfba83dcf0__section_bt4_fxc_z1b\"/>\n\n## Preview\n\n  \n  \n**App with a toolbar that contains a Refresh button**\n\n![](images/Tutorial_OData_V4_Step_2_0abcbb6.png \"App with a toolbar that contains a Refresh\n\t\t\t\t\tbutton\")\n\n\n\n<a name=\"loioe9de002ddf1e478fbb9232bfba83dcf0__section_tsr_gxc_z1b\"/>\n\n## Coding\n\nYou can view and download all files at [OData V4 - Step 2](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.odatav4/sample/sap.ui.core.tutorial.odatav4.02).\n\n\n\n<a name=\"loioe9de002ddf1e478fbb9232bfba83dcf0__section_pvc_fyc_z1b\"/>\n\n## webapp/controller/App.controller.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/m/MessageToast\",\n\t\"sap/m/MessageBox\",\n\t\"sap/ui/model/json/JSONModel\"\n], function (Controller, MessageToast, MessageBox, JSONModel) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.core.tutorial.odatav4.controller.App\", {\n\n\t\tonInit : function () {\n\t\t\tvar oJSONData = {\n\t\t\t\tbusy : false\n\t\t\t};\n\t\t\tvar oModel = new JSONModel(oJSONData);\n\t\t\tthis.getView().setModel(oModel, \"appView\");\n\t\t},\n\n\t\tonRefresh : function () {\n\t\t\tvar oBinding = this.byId(\"peopleList\").getBinding(\"items\");\n\n\t\t\tif (oBinding.hasPendingChanges()) {\n\t\t\t\tMessageBox.error(this._getText(\"refreshNotPossibleMessage\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\toBinding.refresh();\n\t\t\tMessageToast.show(this._getText(\"refreshSuccessMessage\"));\n\t\t},\n\n\t\t_getText : function (sTextId, aArgs) {\n\t\t\treturn this.getOwnerComponent().getModel(\"i18n\").getResourceBundle().getText(sTextId, aArgs);\n\n\t\t}\n\t});\n});\n```\n\nWe add the event handler `onRefresh` to the controller. In this method, we retrieve the current data binding of the table. If the binding has unsaved changes, we display an error message, otherwise we call `refresh()` and display a success message.\n\n> ### Note:  \n> At this stage, our app cannot have unsaved changes. We will change this in Step 6.\n\nWe also add the private method `_getText` to retrieve translatable texts from the resource bundle \\(`i18n` model\\).\n\n\n\n<a name=\"loioe9de002ddf1e478fbb9232bfba83dcf0__section_pp2_mxc_z1b\"/>\n\n## webapp/view/App.view.xml\n\n```xml\n...\n<Page title=\"{i18n>peoplePageTitle}\">\n\t<content>\n\t\t<Table\n\t\t\tid=\"peopleList\"\n\t\t\tgrowing=\"true\"\n\t\t\tgrowingThreshold=\"10\"\n\t\t\titems=\"{\n\t\t\t\tpath: '/People'\n\t\t\t}\">\n\t\t\t<headerToolbar>\n\t\t\t\t<OverflowToolbar>\n\t\t\t\t\t<content>\n\t\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tid=\"refreshUsersButton\"\n\t\t\t\t\t\t\ticon=\"sap-icon://refresh\"\n\t\t\t\t\t\t\ttooltip=\"{i18n>refreshButtonText}\"\n\t\t\t\t\t\t\tpress=\".onRefresh\"/>\n\t\t\t\t\t\t</content>\n\t\t\t\t\t</OverflowToolbar>\n\t\t\t\t</headerToolbar>\n\n\t\t\t\t<columns>\n...\n```\n\nWe add the `headerToolbar` with a single `Button` to the `Table`. The button has a `press` event to which we attach an event handler called `onRefresh`.\n\n\n\n<a name=\"loioe9de002ddf1e478fbb9232bfba83dcf0__section_etg_fyc_z1b\"/>\n\n## webapp/i18n/i18n.properties\n\n```\n# App Descriptor\n...\n\n# Toolbar\n#XTOL: Tooltip for refresh data\nrefreshButtonText=Refresh Data\n\n# Table Area\n...\n\n# Messages\n#XMSG: Message for refresh failed\nrefreshNotPossibleMessage=Before refreshing, please save or revert your changes\n\n#XMSG: Message for refresh succeeded\nrefreshSuccessMessage=Data refreshed\n```\n\nWe add the tooltip and message texts to the `properties` file.\n\n\n\n<a name=\"loioe9de002ddf1e478fbb9232bfba83dcf0__section_kk1_cq1_mcb\"/>\n\n## Under the Hood\n\nTo get more insight into the client-server communication, we open the *Console* tab of the browser developer tools and then reload the app.\n\n> ### Note:  \n> To monitor the client-server communication in a productive app, you would use the *Network* tab of the developer tools.\n> \n> In this tutorial, we are using a mock server instead of a real OData service so that we can run the code in every environment. The mock server does not generate any network traffic, so we use the *Console* tab to monitor the communication.\n> \n> If you want to switch to the real service, do the following:\n> \n> 1.  In the `index.html` file, remove the line `data-sap-ui-on-init=\"module:sap/ui/core/tutorial/odatav4/initMockServer\"`.\n> \n> 2.  Check the URI of the default data source in the `manifest.json` file. Depending on the environment, change it to something that avoids cross-origin resource sharing \\(CORS\\) problems. For more information, see [Request Fails Due to Same-Origin Policy \\(Cross-Origin Resource Sharing - CORS\\)](../04_Essentials/request-fails-due-to-same-origin-policy-cross-origin-resource-sharing-cors-5bb388f.md)\n\nWe search for the following mock server requests:\n\n-   [https://services.odata.org/TripPinRESTierService/\\(S\\(id\\)\\)/$metadata](https://services.odata.org/TripPinRESTierService/(S(id))/$metadata)\n\n    This first request fetches the metadata that describes the entities of the service \\(see also [OData Version 4.0. Part 3: Common Schema Definition Language \\(CSDL\\) Plus Errata 03](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html)\\).\n\n    The server responds with an XML file that describes the entities, for example, entity type `\"Person\"` has several properties such as `UserName`, `FirstName`, `LastName`, and `Age`.\n\n    > ### Note:  \n    > The URL contains the session ID `(S(id))`. Since the public *TripPin* service can be used by multiple persons at the same time, the session ID separates read and write requests from different sources. You could use a different ID or request the service without a specified session ID. In the latter case, you will get a response with a new, random session ID.\n\n-   [https://services.odata.org/TripPinRESTierService/\\(S\\(id\\)\\)/People?$select=Age,FirstName,LastName,UserName&$skip=0&$top=10](https://services.odata.org/TripPinRESTierService/(S(id))/People?$select=Age,FirstName,LastName,UserName&$skip=0&$top=10).\n\n    The second request fetches the first 10 entities from the OData service. The `growingThreshold=\"10\"` setting in the implementation of the `Table` control in the `App.view.xml` file defines that only 10 entities are fetched at the same time from the `'/people'` path. Further data is only loaded when requested from the user interface \\(`growing=\"true\"`\\). Therefore, there are only 10 entities requested at the same time by using `$skip=0&$top=10` \\(see [System Query Option $top and $skip](http://www.odata.org/getting-started/basic-tutorial/#topskip) in the Basic Tutorial on the OData home page.\\)\n\n    This request explicitly lists the fields that should be included in the response by using the `$select` query option. Although the *TripPin* service has more fields in its `People` entity set, only those four are included in the response. This is a feature of the OData V4 Model called \"automatic determination of `$select`\", or \"auto-`$select`\". It helps restricting the size of responses to what is really needed. The `ODataModel` computes the required fields from binding paths specified for controls. This feature is not active by default. In our case, this is activated by setting the `autoExpandSelect` property to `true` when instantiating the model in the `manifest.json` descriptor file .\n\n\n**Related Information**  \n\n\n[Bindings](../04_Essentials/bindings-54e0ddf.md \"Bindings connect SAPUI5 view elements to model data, allowing changes in the model to be reflected in the view element and vice versa.\")\n\n[API Reference: `sap.ui.model.odata.v4.ODataMetaModel`](https://ui5.sap.com/#/api/sap.ui.model.odata.v4.ODataMetaModel)\n\n[API Reference: `sap.ui.model.odata.v4.ODataListBinding.refresh`](https://ui5.sap.com/#/api/sap.ui.model.odata.v4.ODataListBinding/methods/refresh)\n\n[Troubleshooting Tutorial Step 1: Browser Developer Tools](step-1-browser-developer-tools-eadd60a.md \"In this step, you will learn how to use your browser's developers tools to troubleshoot your SAPUI5 app.\")\n\n",
  "excerpt": "<!-- loioe9de002ddf1e478fbb9232bfba83dcf0 --> Step 2: Data Access and Client-Server Communication In this step, we see how the Table that is bound to the People entity set initially requests its data,...",
  "wordCount": 929,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}