{
  "id": "sapui5-docs-04-essentials-concept-and-basic-setup-22f50c0-md",
  "title": "Concept and Basic Setup",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/concept-and-basic-setup-22f50c0.md",
  "lastModified": "2025-09-01T18:17:10.497Z",
  "tags": [
    "ui5-framework",
    "md",
    "Concept",
    "and",
    "Basic",
    "Setup"
  ],
  "headers": [
    "Concept and Basic Setup",
    "The UI5 Test Suite",
    "The UI5 Test Suite Page",
    "The UI5 Test Suite Module",
    "The Generic Test Page"
  ],
  "content": "<!-- loio22f50c0f0b104bf3ba84620880793d3f -->\n\n# Concept and Basic Setup\n\nTo apply the test starter concept to your SAPUI5 project, you need to create a test suite and a generic test page that allows for the running of one or multiple test modules.\n\n> ### Note:  \n> For SAPUI5 applications, the test suite and the generic test page are typically placed in the `webapp/test` folder. The code samples in the next sections use `<NAMESPACE>` as a placeholder for your SAPUI5 project namespace. Please replace this placeholder with your SAPUI5 project namespace defined in the `sap.app/id` property in the `manifest.json` file by replacing the '.' with '/', for example `my.ui5app` becomes `my/ui5app`. However, for the `<NAMESPACE-WITH-DOTS>` in `data-sap-ui-resource-roots`, use the exact value of `sap.app/id` \\(separated by dots\\).\n\n\n\n\n\n<a name=\"loio22f50c0f0b104bf3ba84620880793d3f__section_v1s_4qg_vcc\"/>\n\n## The UI5 Test Suite\n\nA test suite configures the environment for the tests. It consists of a `*.qunit.html` page often named `testsuite.qunit.html` and a corresponding `*.qunit.js` module.\n\nThe default naming convention for the test suite is `testsuite.qunit.html` and `testsuite.qunit.js`.\n\nThere can be multiple test suites in a project. When adding more test suites, the naming must follow the pattern `testsuite.<name>.qunit.html` / `testsuite.<name>.qunit.js`.\n\n\n\n### The UI5 Test Suite Page\n\nThe test suite page uses the `sap/ui/test/starter/createSuite.js` script to initialize the test suite in a way which is compliant to the content security policy, based on the externalized test configuration provided in the test suite module.\n\nUnlike with the UI5 bootstrap, this script only accepts a limited set of configuration options:\n\n-   The `data-sap-ui-testsuite` attribute specifies the test suite module.\n\n-   The`data-sap-ui-resource-roots` attribute registers the project-specific namespaces, allowing the test suite modules to load from the correct locations. Note that, unlike module names, this configuration requires namespaces to be separated by dots.\n\n```\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>QUnit test suite for NAMESPACE</title>\n    <script\n        src=\"../resources/sap/ui/test/starter/createSuite.js\"\n        data-sap-ui-testsuite=\"test-resources/<NAMESPACE>/testsuite.qunit\"\n        data-sap-ui-resource-roots='{\n            \"test-resources.<NAMESPACE-WITH-DOTS>\": \"./\"\n        }'\n    ></script>\n</head>\n<body>\n</body>\n</html>\n\n```\n\n\n\n\n\n### The UI5 Test Suite Module\n\nThe test suite module represents the configuration file for the UI5 test suite. The module must return a configuration object in the following basic structure:\n\n-   The `name` property represents the name of the test suite and is displayed in the test suite overview page as title.\n\n-   The `defaults` object contains the default [Configuration Options](configuration-options-738ed02.md) for tests.\n\n-   The `tests` object contains the definition and configuration for the individual test modules. Configuration of the individual test modules can override the default configuration. For more information on how to add a defined test module to an existing test suite, see [Creating a QUnit Test](creating-a-qunit-test-7080029.md).\n\n    ```\n    sap.ui.define(() => {\n    \t\"use strict\";\n    \n    \treturn {\n    \t\tname: \"QUnit test suite for NAMESPACE\",\n    \t\tdefaults: {},\n    \t\ttests: {}\n    \t};\n    });\n    ```\n\n\nHere is an example of a test suite module that provides default configuration for third-party modules QUnit and `sinon`. We recommend setting the version manually to prevent test failures when SAPUI5 upgrades a third-party module to a new major version with breaking changes. By default, the latest available versions are used.\n\nIt also provides [Configuration of the SAPUI5 Runtime](configuration-of-the-sapui5-runtime-91f08de.md) at `ui5` to set the theme to `sap_horizon`. The `loader.paths` configuration is used to map the project-specific namespace to the correct location. Unlike the `data-sap-ui-resource-roots` configuration in the test suite page which only registers the`test-resources` namespace, this configuration maps the productive namespace to the parent folder \\(assuming the test suite is placed within `webapp/fitest`\\). The generic test `page` mentioned in the next section uses query parameters to run individual tests. The placeholders `{suite}` and `{name}` are replaced with the suite and test names, respectively.\n\n```\n\nsap.ui.define(function () {\n\t\"use strict\";\n\n\treturn {\n\t\tname: \"QUnit test suite for NAMESPACE\",\n\t\tdefaults: {\n\t\t\tpage: \"ui5://test-resources/<NAMESPACE>/Test.qunit.html?testsuite={suite}&test={name}\",\n\t\t\tqunit: {\n\t\t\t\tversion: 2,\n\t\t\t},\n\t\t\tsinon: {\n\t\t\t\tversion: 4,\n\t\t\t},\n\t\t\tui5: {\n\t\t\t\ttheme: \"sap_horizon\",\n\t\t\t},\n\t\t\tloader: {\n\t\t\t\tpaths: {\n\t\t\t\t\t\"<NAMESPACE>\": \"../\",\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\ttests: {},\n\t};\n});\n```\n\nThe `tests` object is empty for now. For more information on how to add a defined test module to an existing test suite, see [Adding a QUnit Test Module to a Test Suite](creating-a-qunit-test-7080029.md#loio708002929ea548fd9433954a9275eb5f__section_hp4_xhn_vcc).\n\n\n\n<a name=\"loio22f50c0f0b104bf3ba84620880793d3f__section_gts_ptg_vcc\"/>\n\n## The Generic Test Page\n\nThe generic test page is used to run individual tests. Typically, this file is named `Test.qunit.html`.\n\nIt includes the `sap/ui/test/starter/runTest.js` script which is responsible for loading the test suite configuration and starting the test. In the test suite module, the page is configured as `page`. It receives test suite and test name through query parameters to run a test.\n\nUnlike the UI5 bootstrap, the generic test page only accepts the `data-sap-ui-resource-roots` configuration where project-specific namespaces should be registered. All other UI5 configuration must be provided in the test suite module as described above \\(`ui5` property\\).\n\n```\n\n<!DOCTYPE html>\n<html>\n<head>\n\t<meta charset=\"utf-8\">\n\t<script\n\t\tsrc=\"../resources/sap/ui/test/starter/runTest.js\"\n\t\tdata-sap-ui-resource-roots='{\n\t\t\t\"test-resources.<NAMESPACE-WITH-DOTS>\": \"./\"\n\t\t}'\n\t></script>\n</head>\n<body class=\"sapUiBody\">\n\t<div id=\"qunit\"></div>\n\t<div id=\"qunit-fixture\"></div>\n</body>\n</html>\n```\n\n",
  "excerpt": "<!-- loio22f50c0f0b104bf3ba84620880793d3f --> Concept and Basic Setup To apply the test starter concept to your SAPUI5 project, you need to create a test suite and a generic test page that allows for ...",
  "wordCount": 793,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}