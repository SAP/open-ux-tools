{
  "id": "sapui5-docs-04-essentials-sorting-grouping-and-filtering-for-list-binding-ec79a5d-md",
  "title": "Sorting, Grouping, and Filtering for List Binding",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/sorting-grouping-and-filtering-for-list-binding-ec79a5d.md",
  "lastModified": "2025-09-01T18:17:10.544Z",
  "tags": [
    "ui5-framework",
    "md",
    "Sorting",
    "Grouping",
    "and",
    "Filtering",
    "for",
    "List",
    "Binding"
  ],
  "headers": [
    "Sorting, Grouping, and Filtering for List Binding",
    "Initial Sorting, Grouping and Filtering for List Binding",
    "Manual Sorting and Filtering for List Binding",
    "Using Complex Syntax to Add Filters and Sorters"
  ],
  "content": "<!-- loioec79a5d5918f4f7f9cbc2150e66778cc -->\n\n# Sorting, Grouping, and Filtering for List Binding\n\n\n\n<a name=\"loioec79a5d5918f4f7f9cbc2150e66778cc__section_606348F7CECC432C9E18DACEFB3127CF\"/>\n\n## Initial Sorting, Grouping and Filtering for List Binding\n\nTo provide initial **sorting and grouping** in an XML view, proceed as follows:\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.sample.App\"\n\txmlns=\"sap.m\"\n\txmlns:l=\"sap.ui.layout\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\t\t\n\t<List items=\"{ path: '/companies', \n\t\tsorter: { path: 'county', descending: false, group: '.getCounty'}, \n\t\tgroupHeaderFactory: '.getGroupHeader'}\">\n\t\t<items>\n\t\t\t<StandardListItem\n\t\t\t\ttitle=\"{name}\"\n\t\t\t\tdescription=\"{city}\"\n\t\t\t/>\n\t\t</items>\n\t</List>\n\t\n</mvc:View>\n```\n\nThe `this` context of a group header factory function is generally set to the control \\(or managed object\\) that owns the binding. However, in XML views, the reference to the group header factory is done in the view controller by putting a dot \\(`.`\\) in front of the name of the group header factory function \\(`{ groupHeaderFactory:'.myGroupHeader' }`\\). In this case, the group header factory's this context is bound to the controller.\n\nThe list uses a sorter which sorts the list of companies in ascending order by the `county` column. It also groups its rows using the App.controller's `getCounty` method to provide the captions and the `getGroupHeader` function to provide non-standard group header controls, as shown here:\n\n```js\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/m/GroupHeaderListItem \"\n], function (Controller, JSONModel, GroupHeaderListItem) {\n\t\"use strict\";\n\treturn Controller.extend(\"sap.ui.sample.App\", {\n\t\tonInit : function () {\n\t\t\tâ€¦\n\t\t},\t\n\n\t\tgetCounty: function(oContext) {\n\t\t\treturn oContext.getProperty('county');\n\t\t},\n\t\t\n\t\tgetGroupHeader: function(oGroup) {\n\t\t\treturn new GroupHeaderListItem({\n\t\t\t\ttitle : oGroup.key\n\t\t\t}\n\t\t);\n\t},   \n});\n```\n\nAs you can see, `getCounty` generates the key for a division into groups as well as a group caption, which in this case is the county of the current companies. `getGroupHeader` serves as a group header factory function. After sorting and grouping, the company list looks like this:\n\n![](images/Aggregation_Binding_cdd0973.png)\n\nThe following XML snippet provides initial filtering:\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.sample.App\"\n\txmlns=\"sap.m\"\n\txmlns:l=\"sap.ui.layout\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\t\t\n\t<List items=\"{ path: '/companies', \n\t\tfilters: [{path: 'city', operator: 'StartsWith', value1: 'B'},\n\t\t\t{path: 'revenue', operator: 'LT', value1: 150000000}]}\">\t\t\n\t\t<items>\n\t\t\t<StandardListItem\n\t\t\t\ttitle=\"{name}\"\n\t\t\t\tdescription=\"{city}\"\n\t\t\t/>\n\t\t</items>\n\t</List>\t  \n</mvc:View>\n```\n\nThe example shown here will only display companies whose city name begins with a 'b' and whose revenue is less than 150 million. As you can see, you can provide more than one filter, each of which may refer to different columns using different filter operators. For a complete list of permitted filter operators, see [sap.ui.model.FilterOperator](https://ui5.sap.com/#/api/sap.ui.model.FilterOperator) in the *API Reference* part of the Demo Kit.\n\nAs shown below, initial sorting, grouping and filtering can of course also be provided using JavaScript.\n\nYou can define a sorter and/or filters:\n\n```js\nsap.ui.define([\n    \"sap/ui/model/Sorter\",\n    \"sap/ui/model/Filter\"\n], function(Sorter, Filter) {\n//returns group header captions\nvar fnGetCounty = function(oContext) {\n    return oContext.getProperty('county');\n}\n\nvar oSorter = new Sorter({\n    path: 'county', \n    descending: false, \n    group: fnGetCounty});\n\nvar oFilterCity = new Filter(\"city\",\n    sap.ui.model.FilterOperator.StartsWith, \"B\"),\n    oFilterRevenue = new sap.ui.model.Filter(\"revenue\",\n        sap.ui.model.FilterOperator.LT, 150000000);\n);\n\n});\n\n```\n\nYou can pass sorters and filters to the list binding:\n\n```js\n\nvar oList = new sap.m.List({\n\titems: {path: \"/companies\", template: oItemTemplate, \n\t\tsorter: oSorter, filters:[oFilterCity, oFilterRevenue]  \n\t}\n});\n```\n\nYou can also use the other list binding possibilities \\(for example `bindAggregation` or `bindItems`\\) and provide the sorter and filters as parameters.\n\n\n\n<a name=\"loioec79a5d5918f4f7f9cbc2150e66778cc__section_N100CF_N10013_N10001\"/>\n\n## Manual Sorting and Filtering for List Binding\n\nYou can sort or filter data manually after the list binding is complete by getting the corresponding binding and calling the sort/filter function:\n\n```js\n// manual sorting\noList.getBinding(\"items\").sort(oSorter);\n\n// manual filtering\noList.getBinding(\"items\").filter([oFilterCity, oFilterRevenue]);\n```\n\n> ### Note:  \n> `getBinding` requires the name of the bound list. In this example, we are looking at the `items` of the `sap.m.List` control.\n\nFor more information about the various sorting and filter methods and operators, see the documentation for Filter, Sorter, and Filter operations under [sap.ui.model](https://ui5.sap.com/#/api/sap.ui.model) in the *API Reference* part of the Demo Kit.\n\n\n\n<a name=\"loioec79a5d5918f4f7f9cbc2150e66778cc__section_jxn_fmp_rcb\"/>\n\n## Using Complex Syntax to Add Filters and Sorters\n\nComplex syntax can be used to add filters and sorters for list binding. One or multiple objects can be defined.\n\n```js\n\n<table:Table rows=\"{\n    path: '/table', \n    filters: [{\n        path: 'field3', \n        operator: 'EQ',\n        value1: 'test'\n    }],\n    sorter: [{\n        path: 'field1', \n        descending: false\n    }, {\n        path: 'field2', \n        descending: true\n    }]\n }\">\n...\n</table:Table>\n\n```\n\n",
  "excerpt": "<!-- loioec79a5d5918f4f7f9cbc2150e66778cc --> Sorting, Grouping, and Filtering for List Binding <a name=\"loioec79a5d5918f4f7f9cbc2150e66778cc__section_606348F7CECC432C9E18DACEFB3127CF\"/> Initial Sorti...",
  "wordCount": 662,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}