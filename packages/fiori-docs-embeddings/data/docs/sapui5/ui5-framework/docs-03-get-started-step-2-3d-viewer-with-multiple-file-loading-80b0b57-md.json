{
  "id": "sapui5-docs-03-get-started-step-2-3d-viewer-with-multiple-file-loading-80b0b57-md",
  "title": "Step 2: 3D Viewer With Multiple File Loading",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-2-3d-viewer-with-multiple-file-loading-80b0b57.md",
  "lastModified": "2025-09-01T18:17:10.457Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Viewer",
    "With",
    "Multiple",
    "File",
    "Loading"
  ],
  "headers": [
    "Step 2: 3D Viewer With Multiple File Loading",
    "Preview",
    "Coding",
    "index.html",
    "Component.js",
    "i18n.properties",
    "manifest.json",
    "App.view.xml",
    "App.controller.js",
    "Testing the Application"
  ],
  "content": "<!-- loio80b0b57480e54a50a08daf468453aa33 -->\n\n# Step 2: 3D Viewer With Multiple File Loading\n\nIn this step, you will be creating a Viewer application that allows a user to load multiple 3D resources stored locally.\n\nThe content in this tutorial step references [Step 1: 3D Viewer With Single File Loading](step-1-3d-viewer-with-single-file-loading-0e21912.md) for comparative purposes.\n\n\n\n## Preview\n\n  \n  \n**Viewer application with multiple file loading capability**\n\n![](images/3D_Viewer_Tutorial_Step_02_-_Preview_9425f9f.png \"Viewer application with multiple file loading capability\")\n\n\n\n## Coding\n\nYou can view and download all files at [3D Viewer - Step 2 - 3D Viewer With Multiple File Loading](https://ui5.sap.com/#/entity/sap.ui.vk.tutorial.VIT/sample/sap.ui.vk.tutorial.VIT.02) .\n\n\n\n### index.html\n\nUpdate the `index.html` file to reference the `multipleFiles` namespace, which will be the namespace we'll use for the sample application in this step.\n\n```html\n<!DOCTYPE HTML>\n<html>\n  <head> \n      <meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" /> \n        <script  \n          id=\"sap-ui-bootstrap\" \n          src=\"https://ui5.sap.com/resources/sap-ui-core.js\"\n        data-sap-ui-theme=\"sap_horizon\"\n        data-sap-ui-compat-version=\"edge\"\n        data-sap-ui-async=\"true\"\n        data-sap-ui-libs=\"sap.ui.vk, sap.m\"\n          data-sap-ui-resource-roots='{ \n                  \"multipleFiles\": \"./\"  \n            }'> \n      </script> \n      <script> \n          sap.ui.getCore().attachInit(function () { \n              new sap.m.Shell({ \n                  app: new sap.ui.core.ComponentContainer({ \n                      name: \"multipleFiles\" \n                  }) \n              }).placeAt(\"content\"); \n          }); \n      </script> \n  </head> \n  <body id=\"content\" class=\"sapUiBody\"> \n  </body> \n</html>\n```\n\n\n\n### Component.js\n\nUpdate the `Component.js` file to reference the namespace specified for this application.\n\n```js\nsap.ui.define([\n    \"sap/ui/core/UIComponent\" \n], function (UIComponent) { \n    \"use strict\"; \n    return UIComponent.extend(\"multipleFiles.Component\", { \n        metadata: { \n            manifest: \"json\" \n        }, \n\n        init: function () { \n            // call the init function of the parent  \n            UIComponent.prototype.init.apply(this, arguments); \n        } \n    }); \n});\n```\n\n\n\n### i18n.properties\n\nIn the `i18n.properties` file, we have labels for the toolbar, the page title, the three input fields, the *Load* button, and the error message that is displayed when the user attempts to load a model without specifying one to load.\n\n```ini\n\n# App Descriptor\nappTitle=App title \nappDescription=This is a description coming from the i18n as specified in manifest.json   \n\n# Viewer Descriptor  \nviewerToolbarTitle=Upload multiple files   \n\n# Page Descriptor  \npageTitle=Multiple File   \n\n# Form Descriptor  \nformRemoteURL1=Remote Model URL 1  \nformRemoteURL2=Remote Model URL 2  \nformRemoteURL3=Remote Model URL 3  \nbuttonLoadModel=Load   \n\n# Message Toast   \nmissingUrl=Please specify at least one URL   \n```\n\n\n\n### manifest.json\n\nUpdate the `manifest.json` file so that it references the correct files.\n\n```js\n{ \n    \"_version\": \"1.8.0\", \n    \"sap.app\": { \n        \"id\": \"multipleFiles\", \n        \"type\": \"application\", \n        \"i18n\": \"i18n/i18n.properties\", \n        \"title\": \"{{appTitle}}\", \n        \"description\": \"{{appDescription}}\", \n        \"applicationVersion\": { \n            \"version\": \"1.0.0\" \n        } \n    }, \n    \"sap.ui\": { \n        \"technology\": \"UI5\", \n        \"deviceTypes\": { \n            \"desktop\": true, \n            \"tablet\": true, \n            \"phone\": true \n        } \n    }, \n    \"sap.ui5\": { \n        \"rootView\": \"multipleFiles.view.App\", \n        \"dependencies\": { \n            \"minUI5Version\": \"1.30\", \n            \"libs\": { \n                \"sap.m\": {} \n            } \n        }, \n        \"models\": { \n            \"i18n\": { \n                \"type\": \"sap.ui.model.resource.ResourceModel\", \n                \"settings\": { \n                    \"bundleName\": \"multipleFiles.i18n.i18n\" \n                } \n            } \n        } \n    } \n} \n\n \n```\n\n\n\n### App.view.xml\n\nThis file specifies how the page in the application will be laid out. We only have one `formElement` in the form container, which contains the fields for loading 3D resources that are stored locally. In the element, we have specified three input text fields and one button for loading. The labels to use for each of the fields are specified in the text attributes.\n\n```xml\n<mvc:View \n   controllerName=\"multipleFiles.controller.App\" \n   xmlns=\"sap.m\" \n   xmlns:mvc=\"sap.ui.core.mvc\" \n   xmlns:vk=\"sap.ui.vk\" \n   xmlns:l=\"sap.ui.layout\" \n   xmlns:f=\"sap.ui.layout.form\" \n   xmlns:u=\"sap.ui.unified\" \n   displayBlock=\"true\"> \n    <App id=\"multipleFiles\"> \n        <Page \n            title=\"{i18n>pageTitle}\"> \n            <vk:Viewer \n                id=\"viewer\" \n                toolbarTitle=\"{i18n>viewerToolbarTitle}\" \n                width=\"100%\" \n                height=\"85%\" \n                       /> \n            <f:Form editable=\"true\"> \n                <f:layout> \n                    <f:ResponsiveGridLayout/> \n                </f:layout> \n                <f:formContainers> \n                    <f:FormContainer> \n                        <f:formElements> \n                            <f:FormElement>        \n                                <f:fields> \n                                    <Input \n                                           value=\"{source>/url1}\" \n                                           valueLiveUpdate=\"true\" \n                                           placeholder=\"{i18n>formRemoteURL1}\"> \n                                        <layoutData> \n                                            <l:GridData span=\"L12 M12 S12\" /> \n                                        </layoutData> \n                                    </Input> \n                                    <Input \n                                           value=\"{source>/url2}\" \n                                           valueLiveUpdate=\"true\" \n                                           placeholder=\"{i18n>formRemoteURL2}\"> \n                                        <layoutData> \n                                            <l:GridData span=\"L12 M12 S12\" /> \n                                        </layoutData> \n                                    </Input> \n                                    <Input \n                                           value=\"{source>/url3}\" \n                                           valueLiveUpdate=\"true\" \n                                           placeholder=\"{i18n>formRemoteURL3}\"> \n                                        <layoutData> \n                                            <l:GridData span=\"L12 M12 S12\" /> \n                                        </layoutData> \n                                    </Input> \n                                    <Button \n                                            text=\"{i18n>buttonLoadModel}\" \n                                            press=\"onPressLoadRemoteModels\"> \n                                        <layoutData> \n                                            <l:GridData span=\"L2 M2 S2\" /> \n                                        </layoutData> \n                                    </Button> \n                                </f:fields> \n                            </f:FormElement> \n                        </f:formElements> \n                    </f:FormContainer> \n                </f:formContainers> \n            </f:Form> \n        </Page> \n    </App> \n</mvc:View> \n```\n\n\n\n### App.controller.js\n\nSince we now have a different layout for the Viewer application compared to the sample Viewer application in [Step 1: 3D Viewer With Single File Loading](step-1-3d-viewer-with-single-file-loading-0e21912.md), we will need to change the logic for the application to accommodate for multiple file loading.\n\nAdd the `checkIfAllInputsEmpty` function to check whether the user has entered text into any of the input fields in the application. The `checkIfAllInputsEmpty` function returns the value `true` if the user hasn't entered any input at all, and the existing `handleEmptyUrl` function is called to display a message on the screen.\n\nUpdate the `onInit` function so that we are specifying an empty data structure with three properties \\(`url1`, `url2`, and `url3`\\).\n\nReplace the `loadModelIntoViewer` and `onPressLoadRemoteModel` functions with the following functions:\n\n-   `loadModelsIntoViewer` - loads the models into Viewer\n-   `onPressLoadRemoteModels` - handles the click event on the *Load* button\n\nRemove the following functions:\n\n-   `onPressLoadRemoteImage` \\(since we are only loading 3D resources\\)\n-   `onChangeFileUploader` \\(since we are not using the FileUploader control for this application\\)\n\n```js\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/ui/model/json/JSONModel\",\n    \"sap/ui/vk/ContentResource\",\n    \"sap/m/MessageToast\"\n], function (Controller, JSONModel, ContentResource, MessageToast) {\n    \"use strict\";\n     \n    //throws a Message Toast alert on the screen\n    //when the user tries to load a model but there's no url specified\n    var handleEmptyUrl = function (view) {\n        var oBundle = view.getModel(\"i18n\").getResourceBundle();\n        var msg = oBundle.getText(\"missingUrl\");\n        MessageToast.show(msg);\n    };\n     \n    //checks if all URL input fields are empty or not\n    var checkIfAllInputsEmpty = function (urls) {\n        var allEmpty = true;\n        for (var i = 0; i < urls.length; i++) {\n            if (urls[i]) {\n                allEmpty = false;\n                break;\n            }\n        }\n        return allEmpty;\n    }\n     \n    //loads the models from the URLs into the viewer\n    var loadModelsIntoViewer = function (viewer, urls, sourceType) {\n        //clears all the models currently loaded in the viewer\n        viewer.destroyContentResources();\n         \n        //iterates through all URLs\n        //and loads all models into the viewer\n        for (var i = 0; i < urls.length; i++) {\n            if (urls[i]) {\n                var nameParts = urls[i].split(\"/\"); \n                var contentResource = new ContentResource({\n                    source: urls[i],\n                    sourceType: sourceType,\n                    sourceId: \"abc\",\n                   name: nameParts[nameParts.length - 1]\n                });\n                //add current model to the viewer\n                viewer.addContentResource(contentResource);\n            }\n        }\n    };\n    return Controller.extend(\"multipleFiles.controller.App\", {\n        //when the controller is initialized,\n        //we declare an empty structure and\n        //we set this as model for the URLs\n        onInit: function () {\n            var sourceData = {\n                url1: \"\",\n                url2: \"\",\n                url3: \"\"\n            };\n            var model = new JSONModel();\n            model.setData(sourceData);\n            this.getView().setModel(model, \"source\");\n        },\n         \n        //onPressLoadRemoteModels handles the click event on the LOAD button\n        onPressLoadRemoteModels: function (event) {\n            var view = this.getView();\n            //set the source model to a variable\n            var sourceData = view.getModel(\"source\").getData();\n\n             \n            //get the current viewer control\n            var viewer = view.byId(\"viewer\");\n             \n            //create the list of URLs from the input fields\n            var urls = [sourceData.url1, sourceData.url2, sourceData.url3];\n             \n            //if all URL inputs are empty show an alert on the screen\n            //if at least one URL is specified, then take the URL list\n            //and load all existing ones into the viewer\n            if (checkIfAllInputsEmpty(urls)) {\n                handleEmptyUrl(view);\n            } else {\n                loadModelsIntoViewer(viewer, urls, \"vds4\");\n                        } \n                    } \n                }); \n            }\n        }\n    });\n});\n```\n\n\n\n### Testing the Application\n\nTo test that the application works, we will load three 3D resources into the Viewer application.\n\nDownload the following VDS files from the *Samples* in the Demo Kit:\n\n-   `cooper.vds`\n-   `boxTestModel.vds`\n-   `cylinderTestModel.vds`\n\nType in the file path of the VDS files into each of the input text fields, and click on the *Load* button to load the 3D models. The content of all three files will overlap with each other, so to see box and cylinder you have to hide cooper. Your screen should look like the following:\n\n  \n  \n**Viewer application loaded with three VDS files**\n\n![](images/Image_SAPUI5_Viewer_2_50c1c17.png \"Viewer application loaded with three VDS files\")\n\n",
  "excerpt": "<!-- loio80b0b57480e54a50a08daf468453aa33 --> Step 2: 3D Viewer With Multiple File Loading In this step, you will be creating a Viewer application that allows a user to load multiple 3D resources stor...",
  "wordCount": 1141,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}