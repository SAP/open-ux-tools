{
  "id": "sapui5-docs-03-get-started-step-8-navigate-with-flip-transition-3e5f6f3-md",
  "title": "Step 8: Navigate with Flip Transition",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-8-navigate-with-flip-transition-3e5f6f3.md",
  "lastModified": "2025-09-01T18:17:10.485Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Navigate",
    "with",
    "Flip",
    "Transition"
  ],
  "headers": [
    "Step 8: Navigate with Flip Transition",
    "Preview",
    "Coding",
    "webapp/view/employee/Employee.view.xml",
    "webapp/controller/employee/Employee.controller.js",
    "webapp/manifest.json",
    "webapp/view/employee/Resume.view.xml \\(New\\)",
    "webapp/controller/employee/Resume.controller.js \\(New\\)",
    "webapp/view/employee/ResumeProjects.view.xml \\(New\\)",
    "webapp/i18n/i18n.properties"
  ],
  "content": "<!-- loio3e5f6f3e163f46ecaef376950258e5e4 -->\n\n# Step 8: Navigate with Flip Transition\n\nIn this step, we want to illustrate how to navigate to a page with a custom transition animation. Both forward and backward navigation will use the \"flip\" transition but with a different direction. We will create a simple link on the *Employee* view that triggers a flip navigation to a page that displays the resume data of a certain employee. Pressing the *Back* button will navigate back to the *Employee* view with a reversed flip transition.\n\n\n\n## Preview\n\n  \n  \n**Employee Details page with Flip to Resume link**\n\n![](images/Tutorial_Navigation_and_Routing_Step_08a_e56a3f0.png \"Employee Details page with Flip to\n\t\t\t\t\t\tResume link\")\n\n  \n  \n**Resume page with multiple tabs**\n\n![](images/Tutorial_Navigation_and_Routing_Step_08b_6ab9122.png \"Resume page with multiple tabs\")\n\n  \n  \n**Not Found page for resume**\n\n![](images/Tutorial_Navigation_and_Routing_Step_08c_36aff02.png \"Not Found page for resume\")\n\n\n\n## Coding\n\nYou can view and download all files in the *Samples* in the Demo Kit at [Routing and Navigation - Step 8](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.navigation/sample/sap.ui.core.tutorial.navigation.08).\n\n  \n  \n**Folder structure for this step**\n\n![](images/Tutorial_Navigation_and_Routing_Step_08d_2ca76d0.png \"Folder structure for this step\")\n\n\n\n## webapp/view/employee/Employee.view.xml\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.Employee\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:f=\"sap.ui.layout.form\"\n\tbusyIndicatorDelay=\"0\">\n\t<Page\n\t\tid=\"employeePage\"\n\t\ttitle=\"{i18n>EmployeeDetailsOf} {FirstName} {LastName}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<Panel\n\t\t\t\tid=\"employeePanel\"\n\t\t\t\twidth=\"auto\"\n\t\t\t\tclass=\"sapUiResponsiveMargin sapUiNoContentPadding\">\n\t\t\t\t<headerToolbar>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Title text=\"{i18n>EmployeeIDColon} {EmployeeID}\" level=\"H2\"/>\n\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t\t<Link text=\"{i18n>FlipToResume}\" tooltip=\"{i18n>FlipToResume.tooltip}\" press=\".onShowResume\"/>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</headerToolbar>\n\t\t\t\t<content>\n\t\t\t\t\t...\n\t\t\t\t</content>\n\t\t\t</Panel>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\nFirst we add the *Flip to Resume* link to the *Employee Details* view to trigger the navigation to the resume of the employee that is currently displayed.\n\n\n\n## webapp/controller/employee/Employee.controller.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.Employee\", {\n\t\t...\n\t\t_onBindingChange : function (oEvent) {\n\t\t\t// No data for the binding\n\t\t\tif (!this.getView().getBindingContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"notFound\");\n\t\t\t}\n\t\t}\n\t\t\t...\n\t\t},\n\t\tonShowResume : function (oEvent) {\n\t\t\tvar oCtx = this.getView().getElementBinding().getBoundContext();\n\n\t\t\tthis.getRouter().navTo(\"employeeResume\", {\n\t\t\t\temployeeId : oCtx.getProperty(\"EmployeeID\")\n\t\t\t});\n\t\t}\n\n\t});\n});\n```\n\nThen we change the `Employee.controller.js` file by adding the press handler `onShowResume` for the *Flip to Resume* link. The handler simply navigates to a new route `employeeResume` and fills the mandatory parameter `employeeId` with the property `EmployeeID` from the view's bound context. The route `employeeResume` is not available yet, so we will have to add it to our routing configuration.\n\n\n\n## webapp/manifest.json\n\n```js\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}\",\n\t\t\t\t\"name\": \"employee\",\n\t\t\t\t\"target\": \"employee\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}/resume\",\n\t\t\t\t\"name\": \"employeeResume\",\n\t\t\t\t\"target\": \"employeeResume\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t\"home\": {\n\t\t\t\t\t\"id\": \"home\",\n\t\t\t\t\t\"name\": \"Home\",\n\t\t\t\t\t\"level\" : 1\n\t\t\t\t},\n\t\t\t\t\"notFound\": {\n\t\t\t\t\t\"id\": \"notFound\",\n\t\t\t\t\t\"name\": \"NotFound\",\n\t\t\t\t\t\"transition\": \"show\"\n\t\t\t\t},\n\t\t\t\t\"employees\": {\n\t\t\t\t\t\"id\": \"employees\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"EmployeeList\",\n\t\t\t\t\t\"level\" : 2\n\t\t\t\t},\n\t\t\t\t\"employee\": {\n\t\t\t\t\t\"id\": \"employee\",\n\t\t\t\t\t\"name\": \"employee.Employee\",\n\t\t\t\t\t\"level\" : 3\n\t\t\t\t},\n\t\t\t\t\"employeeResume\": {\n\t\t\t\t\t\"id\": \"resume\",\n\t\t\t\t\t\"name\": \"employee.Resume\",\n\t\t\t\t\t\"level\" : 4,\n\t\t\t\t\t\"transition\": \"flip\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nIn the routing configuration, we add a new route `employeeResume` which references a target with the same name. The route's pattern expects an `{employeeId}` as a mandatory parameter and ends with the static string `/resume`.\n\nThe target `employeeResume` references the view `employee.Resume` that we are about to create. The target's `level` is `4`; compared to the employee target this is one level lower again. To configure a flip navigation, we simply set the transition of our target to `flip`. Together with the correct `level` configuration this will trigger the correct forward and backward flip navigation whenever the target is displayed.\n\n> ### Note:  \n> Possible values for the `transition` parameter are:\n> \n> -   `slide` \\(default\\)\n> \n> -   `flip`\n> \n> -   `show`\n> \n> -   `fade`\n> \n> \n> You can also implement your own transitions and add it to a control that extends `sap.m.NavContainer` \\(for example, `sap.m.App` or `sap.m.SplitApp`\\). For more information, see the [API Reference: `NavContainer`](https://ui5.sap.com/#/api/sap.m.NavContainer). \n\n\n\n## webapp/view/employee/Resume.view.xml \\(New\\)\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.Resume\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\ttitle=\"{i18n>ResumeOf} {FirstName} {LastName}\"\n\t\tid=\"employeeResumePage\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\">\n\t\t<content>\n\t\t\t<IconTabBar\n\t\t\t\tid=\"iconTabBar\"\n\t\t\t\theaderBackgroundDesign=\"Transparent\"\n\t\t\t\tclass=\"sapUiResponsiveContentPadding\"\n\t\t\t\tbinding=\"{Resume}\">\n\t\t\t\t<items>\n\t\t\t\t\t<IconTabFilter id=\"infoTab\" text=\"{i18n>tabInfo}\" key=\"Info\">\n\t\t\t\t\t\t<Text text=\"{Information}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"projectsTab\" text=\"{i18n>tabProjects}\" key=\"Projects\">\n\t\t\t\t\t\t<mvc:XMLView viewName=\"sap.ui.demo.nav.view.employee.ResumeProjects\"></mvc:XMLView>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"hobbiesTab\" text=\"{i18n>tabHobbies}\" key=\"Hobbies\">\n\t\t\t\t\t\t<Text text=\"{Hobbies}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t\t<IconTabFilter id=\"notesTab\" text=\"{i18n>tabNotes}\" key=\"Notes\">\n\t\t\t\t\t\t<Text text=\"{Notes}\"/>\n\t\t\t\t\t</IconTabFilter>\n\t\t\t\t</items>\n\t\t\t</IconTabBar>\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\nCreate a file `Resume.view.xml` inside the `webapp/view/employee` folder. The view uses an `IconTabBar` to display the resume data. Therefore, its binding attribute is set to `{Resume}`.\n\nIn the `IconTabBar` we display four tabs. Three of them simply use a `Text` control to display the data from the service. The *Projects* tab uses a nested XML view to display the projects of the employee. SAPUI5 takes care of loading the XML view automatically when the user navigates to the *Resume* page.\n\n\n\n## webapp/controller/employee/Resume.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.Resume\", {\n\t\tonInit: function () {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\toRouter.getRoute(\"employeeResume\").attachMatched(this._onRouteMatched, this);\n\t\t},\n\t\t_onRouteMatched : function (oEvent) {\n\t\t\tvar oArgs, oView;\n\t\t\toArgs = oEvent.getParameter(\"arguments\");\n\t\t\toView = this.getView();\n\t\t\toView.bindElement({\n\t\t\t\tpath : \"/Employees(\" + oArgs.employeeId + \")\",\n\t\t\t\tevents : {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t_onBindingChange : function (oEvent) {\n\t\t\t// No data for the binding\n\t\t\tif (!this.getView().getBindingContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"notFound\");\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\nCreate a file `Resumee.controller.js` in the `webapp/controller/employee` folder. In this controller, we make sure to bind the view to the correct employee whenever the `employeeResume` route has matched. We have already used this approach in the previous step so you should be able to recognize the building blocks in the code above. Again, in case the user cannot be found we display the `notFound` target.\n\n\n\n## webapp/view/employee/ResumeProjects.view.xml \\(New\\)\n\n```xml\n\n<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\">\n\t<Text text=\"{Projects}\"/>\n</mvc:View>\n```\n\nCreate a file `ResumeProjects.view.xml` in the `webapp/view/employee` folder. This view does not have a controller as we don't need it. It just displays a `Text` control with the projects text of the selected employee. It illustrates that using nested views works just fine in combination with navigation and routing in SAPUI5.\n\n> ### Note:  \n> For more complex applications, the performance is significantly increased if parts of the UI are only loaded when the user is actively selecting it. In this example, the view is always loaded even though the user never decided to display the project information. In the next steps, we will extend the UI so that the content is loaded \"lazy\" by SAPUI5 only when the filter item is clicked. The back-end service will fetch the data only on request and the UI will only have to be updated with the selected data instead of loading all data.\n\n\n\n## webapp/i18n/i18n.properties\n\n```ini\n...\nResumeOf=Resume of\ntabInfo=Info\ntabProjects=Projects\ntabHobbies=Hobbies\ntabNotes=Notes\nFlipToResume=Flip to Resume\nFlipToResume.tooltip=See the resume of this employee\n```\n\nAdd the new texts to the `i18n.properties` file.\n\nYou can go to `webapp/index.html#/employees/3` and click on the *Flip to Resume* link to be redirected with a nice flip transition to the employee's resume. The back navigation uses a reverse flip navigation to get back to the *Employee Details* page. You can also directly navigate to `webapp/index.html#/employees/3/resume` or `webapp/index.html#/employees/33/resume` to see what happens.\n\n**Related Information**  \n\n\n[API Reference: `sap.m.NavContainer`](https://ui5.sap.com/#/api/sap.m.NavContainer)\n\n[API Overview and Samples: `sap.m.NavContainer` ](https://ui5.sap.com/#/entity/sap.m.NavContainer)\n\n",
  "excerpt": "<!-- loio3e5f6f3e163f46ecaef376950258e5e4 --> Step 8: Navigate with Flip Transition In this step, we want to illustrate how to navigate to a page with a custom transition animation. Both forward and b...",
  "wordCount": 1185,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}