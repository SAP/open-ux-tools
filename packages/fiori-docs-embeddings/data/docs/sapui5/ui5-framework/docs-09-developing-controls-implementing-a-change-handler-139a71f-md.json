{
  "id": "sapui5-docs-09-developing-controls-implementing-a-change-handler-139a71f-md",
  "title": "Implementing a Change Handler",
  "category": "ui5-framework",
  "path": "docs/09_Developing_Controls/implementing-a-change-handler-139a71f.md",
  "lastModified": "2025-09-01T18:17:10.678Z",
  "tags": [
    "ui5-framework",
    "md",
    "Implementing",
    "Change",
    "Handler"
  ],
  "headers": [
    "Implementing a Change Handler"
  ],
  "content": "<!-- loio139a71f866ad4692a3af9023c089998a -->\n\n# Implementing a Change Handler\n\nHere's how you write a change handler.\n\nThe custom change handler resides in the library of the control. Implement the following methods to write a change handler for a control:\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nMethod\n\n</th>\n<th valign=\"top\">\n\nParameter\n\n</th>\n<th valign=\"top\">\n\nDescription\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\" rowspan=\"4\">\n\n`applyChange(oChange, oControl, mPropertyBag)`\n\n`revertChange(oChange, oControl, mPropertyBag)`\n\n</td>\n<td valign=\"top\">\n\n\\-\\>\n\n</td>\n<td valign=\"top\">\n\nUsed at runtime to apply and revert the change. A change can be applied or reverted on a pure XML view or with the available SAPUI5 controls.\n\nWhen the user clicks *Undo* in the in the UI adaptation header bar, the `revertChange` method is called. When the user clicks *Redo* in the in the UI adaptation header bar, the `applyChange` method is called again.\n\nAlways use the modifier from `mPropertyBag` to change the controls as this hides the difference between the XML node and real SAPUI5 controls.\n\nThe method is also used at design time to create the change and record the *undo* behavior.\n\nIt also interprets change data that have been created using `completeChangeContent()` and the change parameters of the control.\n\nIf a new control is created during the process, it needs to be returned, otherwise no return value is needed.\n\nIf the change doesn't pass a validation or if there's a problem, an error has to be thrown. This error is handled and shown in the console.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oChange`\n\n</td>\n<td valign=\"top\">\n\nInstance of a SAPUI5 flexibility change.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oControl`\n\n</td>\n<td valign=\"top\">\n\nInstance of a control or XML node representing the control from the change selector.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`mPropertyBag`\n\n</td>\n<td valign=\"top\">\n\nContains the following:\n\n```\n{\n     modifier: <JSControlTreeModifier or XMLTreeModifier>,\n     view: <view instance of an XML view node>,\n     appComponent: <instance of an application component>\n}\n```\n\n\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\" rowspan=\"3\">\n\n`completeChangeContent(oChange, mChangeSpecificInfo)`\n\n</td>\n<td valign=\"top\">\n\n\\-\\>\n\n</td>\n<td valign=\"top\">\n\nConverts the change-specfic information into the content of the change.\n\n**Never store control IDs in the change!** They contain app component prefixes that prevent applying such changes if the component prefix changes. Instead, store selectors and mark controls as dependent.\n\nIf there are texts in your change content, such as labels from the *rename* action, make sure to add them to the text section of the control using the following code:\n\n`oChange.setText(sKey, sText, sTranslationTextType)`\n\n`sap.ui.fl.changeHandler.Base.setTextInChange(oChange, sKey, sText, sType)`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oChange`\n\n</td>\n<td valign=\"top\">\n\nInstance of an SAPUI5 flexibility change containing the raw information.\n\nThe change content has to be filled in this method.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`mChangeSpecificInfo`\n\n</td>\n<td valign=\"top\">\n\nObject containing the action-specific information for the current change.\n\nThe concrete format is change-specific.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\" rowspan=\"15\">\n\n`[getCondenserInfo(oChange, mPropertyBag)]` \\(optional\\)\n\n</td>\n<td valign=\"top\">\n\n\\-\\>\n\n</td>\n<td valign=\"top\">\n\nEnables the [Condensing](condensing-f4e064b.md) information for the change handler.\n\nHas to return an object with all necessary information depending on the classification.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oChange`\n\n</td>\n<td valign=\"top\">\n\nInstance of an SAPUI5 flexibility change.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`mPropertyBag`\n\n</td>\n<td valign=\"top\">\n\nSee `applyChange`.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.affectedControl`\n\n</td>\n<td valign=\"top\">\n\nSelector \\(object containing `id` and the `idIsLocal` flag\\) of the affected control, for example the moved control in case of a *move* action.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.classification`\n\n</td>\n<td valign=\"top\">\n\nUse the `sap.ui.fl.changeHandler.condenser.Classification` enum.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.uniqueKey`\n\n</td>\n<td valign=\"top\">\n\nUnique identifier.\n\nHas to be unique per classification per control.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.sourceContainer`\n\n</td>\n<td valign=\"top\">\n\nSelector pointing to the source container.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.targetContainer`\n\n</td>\n<td valign=\"top\">\n\nSelector pointing to the target container.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.sourceIndex`\n\n</td>\n<td valign=\"top\">\n\nSource index.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.sourceAggregation`\n\n</td>\n<td valign=\"top\">\n\nSource aggregation name.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.targetAggregation`\n\n</td>\n<td valign=\"top\">\n\nTarget aggregation name.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.setTargetIndex`\n\n</td>\n<td valign=\"top\">\n\nFunction to set the target index in the change content.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.getTargetIndex`\n\n</td>\n<td valign=\"top\">\n\nFunction to get the target index from the change content.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.updateContent`\n\n</td>\n<td valign=\"top\">\n\nContent that is passed to the update function of the receiving change.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oReturn.update`\n\n</td>\n<td valign=\"top\">\n\nFunction to update the change with the content passed to this function.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\" rowspan=\"3\">\n\n`[onAfterXMLChangeProcessing(oElement, mPropertyBag)]` \\(optional\\)\n\n</td>\n<td valign=\"top\">\n\n\\-\\>\n\n</td>\n<td valign=\"top\">\n\nOptional hook that is called for every control on each change handler that applied a change on that control during XML change application.\n\nCalled once all changes for the control have been processed.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oElement`\n\n</td>\n<td valign=\"top\">\n\nThe HTML element on which the change was applied.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`mPropertyBag`\n\n</td>\n<td valign=\"top\">\n\nSee `applyChange`.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\" rowspan=\"3\">\n\n`[getChangeVisualizationInfo(oChange, oAppComponent)]` \\(optional\\)\n\n</td>\n<td valign=\"top\">\n\n\\-\\>\n\n</td>\n<td valign=\"top\">\n\nSee [Change Visualization](change-visualization-46e29bb.md).\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`oChange`\n\n</td>\n<td valign=\"top\">\n\nInstance of an SAPUI5 flexibility change.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`appComponent`\n\n</td>\n<td valign=\"top\">\n\nComponent instance used to retrieve IDs \\(if needed\\).\n\n</td>\n</tr>\n</table>\n\n",
  "excerpt": "<!-- loio139a71f866ad4692a3af9023c089998a --> Implementing a Change Handler Here's how you write a change handler. The custom change handler resides in the library of the control. Implement the follow...",
  "wordCount": 861,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}