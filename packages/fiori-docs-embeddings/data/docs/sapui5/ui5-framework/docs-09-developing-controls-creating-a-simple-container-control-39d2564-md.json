{
  "id": "sapui5-docs-09-developing-controls-creating-a-simple-container-control-39d2564-md",
  "title": "Creating a Simple Container Control",
  "category": "ui5-framework",
  "path": "docs/09_Developing_Controls/creating-a-simple-container-control-39d2564.md",
  "lastModified": "2025-09-01T18:17:10.674Z",
  "tags": [
    "ui5-framework",
    "md",
    "Creating",
    "Simple",
    "Container",
    "Control"
  ],
  "headers": [
    "Creating a Simple Container Control"
  ],
  "content": "<!-- loio39d25641086c42aaa745028e15562ba8 -->\n\n# Creating a Simple Container Control\n\nExample of a container control with arbitrary child controls that are rendered in a row and a colored box around each child\n\n```js\nsap.ui.core.Control.extend(\"ColorBoxContainer\", { // call the new Control type \"ColorBoxContainer\"\n    // and let it inherit from sap.ui.core.Control\n\n    // the Control API:\n    metadata : {\n        properties : {            // setter and getter are created behind the scenes,\n            // incl. data binding and type validation\n            \"boxColor\" : \"string\"  // the color to use for the frame around each child Control\n        },\n        aggregations: {\n            content: {singularName: \"content\"} // default type is \"sap.ui.core.Control\", multiple is \"true\"\n        }\n    },\n\n\n    // the part creating the HTML:\n    renderer : function(oRm, oControl) { // static function, so use the given \"oControl\" instance\n        // instead of \"this\" in the renderer function\n        oRm.write(\"<div\");\n        oRm.writeControlData(oControl);  // writes the Control ID and enables event handling - important!\n        oRm.writeClasses();              // there is no class to write, but this enables\n                                         // support for ColorBoxContainer.addStyleClass(...)\n        oRm.write(\">\");\n\n        var aChildren = oControl.getContent();\n        for (var i = 0; i < aChildren.length; i++) { // loop over all child Controls,\n            // render the colored box around them\n            oRm.write(\"<div\");\n            oRm.addStyle(\"display\", \"inline-block\");\n            oRm.addStyle(\"border\", \"3px solid \" + oControl.getBoxColor()); // specify the border around the child\n            oRm.writeStyles();\n            oRm.write(\">\");\n\n            oRm.renderControl(aChildren[i]);   // render the child Control\n                                               // (could even be a big Control tree, but you don't need to care)\n\n\n            oRm.write(\"</div>\"); // end of the box around the respective child\n        }\n\n        oRm.write(\"</div>\"); // end of the complete Control\n    }\n});\n```\n\nAs the control itself has no appearance, no additional CSS is required.\n\nYou can use this container control like any SAPUI5 container:\n\n```js\nvar oButton = new sap.m.Button({text:'Hello World'});\nvar oInput = new sap.m.Input({placeholder:'edit text here'});\n\nvar container = new ColorBoxContainer({\n    boxColor: \"#ff7700\",\n    content:[\n        oButton,\n        oInput\n    ]});\ncontainer.placeAt('content');\n```\n\n",
  "excerpt": "<!-- loio39d25641086c42aaa745028e15562ba8 --> Creating a Simple Container Control Example of a container control with arbitrary child controls that are rendered in a row and a colored box around each ...",
  "wordCount": 298,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}