{
  "id": "sapui5-docs-03-get-started-step-3-using-dynamic-page-for-the-list-view-0830bce-md",
  "title": "Step 3: Using Dynamic Page for the List View",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-3-using-dynamic-page-for-the-list-view-0830bce.md",
  "lastModified": "2025-09-01T18:17:10.468Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Using",
    "Dynamic",
    "Page",
    "for",
    "the",
    "List",
    "View"
  ],
  "headers": [
    "Step 3: Using Dynamic Page for the List View",
    "Preview",
    "Coding",
    "webapp/manifest.json \\[MODIFY\\]",
    "webapp/index.html \\[MODIFY\\]",
    "webapp/Component.js \\[MODIFY\\]",
    "webapp/view/List.view.xml \\[NEW\\]",
    "webapp/view/App.view.xml \\[MODIFY\\]",
    "webapp/controller/List.controller.js \\[NEW\\]"
  ],
  "content": "<!-- loio0830bce271bf42d98c2740bed43d435d -->\n\n# Step 3: Using Dynamic Page for the List View\n\nIn this step, we create the list view of the app using `sap.f.DynamicPage` control.\n\n\n\n<a name=\"loio0830bce271bf42d98c2740bed43d435d__section_ed2_4dd_lbb\"/>\n\n## Preview\n\n  \n  \n**List page with sap.f.DynamicPage**\n\n![](images/DynamicPage_for_the_Master_View_Fiori_2_0_Tutorial_b31948b.gif \"List page with sap.f.DynamicPage\")\n\n\n\n<a name=\"loio0830bce271bf42d98c2740bed43d435d__section_fd2_4dd_lbb\"/>\n\n## Coding\n\nYou can view and download all files at [Flexible Column Layout App - Step 3](https://ui5.sap.com/#/sample/sap.f.tutorial.fcl.03/preview).\n\n\n\n<a name=\"loio0830bce271bf42d98c2740bed43d435d__section_hlh_rjj_l4b\"/>\n\n## webapp/manifest.json \\[MODIFY\\]\n\n```json\n{\n\t\"_version\": \"1.38.0\",\n\t\"sap.app\": {\n\t\t\"id\": \"sap.ui.demo.fcl\",\n\t\t\"type\": \"application\",\n\t\t\"applicationVersion\": {\n\t\t\t\"version\": \"1.0.0\"\n\t\t}\n\t},\n\t\"sap.ui5\": {\n\t\t\"rootView\": {\n\t\t\t\"viewName\": \"sap.ui.demo.fcl.view.App\",\n\t\t\t\"type\": \"XML\",\n\t\t\t\"async\": true,\n\t\t\t\"id\": \"fcl\"\n\t\t},\n\t\t\"dependencies\": {\n\t\t\t\"minUI5Version\": \"1.98.0\",\n\t\t\t\"libs\": {\n\t\t\t\t\"sap.f\": {},\n\t\t\t\t\"sap.m\": {},\n\t\t\t\t\"sap.ui.core\": {}\n\t\t\t\t}\n\t\t},\n\t\t\"config\": {\n\t\t\t\"fullWidth\": true\n\t\t}\n\t}\n}\n```\n\nFirst, we add the `sap.m` library as a dependency in the `manifest.json`.\n\n> ### Note:  \n> We also need to modify the `ui5.yaml` file located in the root folder by adding the `sap.m` and `sap.f` libraries as a dependency. For more information, see the section about UI5 tooling in [The UI5 Ecosystem](../02_Read-Me-First/the-ui5-ecosystem-b72ccb5.md#loiob72ccb50eda94ac9b9be454a03ca4213).\n\n\n\n<a name=\"loio0830bce271bf42d98c2740bed43d435d__section_ddz_pjj_l4b\"/>\n\n## webapp/index.html \\[MODIFY\\]\n\n```html\n\t...\n\t<script id=\"sap-ui-bootstrap\"\n\t\tsrc=\"resources/sap-ui-core.js\"\n\t\tdata-sap-ui-theme=\"sap_horizon\"\n\t\tdata-sap-ui-resourceroots='{\n\t\t\t\"sap.ui.demo.fcl\": \"./\",\n\t\t\t\"sap.ui.demo.mock\": \"test-resources/sap/ui/documentation/sdk/\"\n\t\t}'\n\t\tdata-sap-ui-oninit=\"module:sap/ui/core/ComponentSupport\"\n\t\tdata-sap-ui-compatversion=\"edge\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-frameoptions=\"trusted\">\n\t</script>\n\t...\n```\n\nWe add the link to the mock data that is used in the app.\n\n\n\n<a name=\"loio0830bce271bf42d98c2740bed43d435d__section_h5w_4jj_l4b\"/>\n\n## webapp/Component.js \\[MODIFY\\]\n\n```js\nsap.ui.define([\n\t'sap/ui/core/UIComponent',\n\t'sap/ui/model/json/JSONModel'\n], function(UIComponent, JSONModel) {\n\t'use strict';\n\n\treturn UIComponent.extend('sap.ui.demo.fcl.Component', {\n\n\t\tmetadata: {\n\t\t\tmanifest: 'json'\n\t\t},\n\n\t\tinit: function () {\n\t\t\tvar oProductsModel;\n\n\t\t\tUIComponent.prototype.init.apply(this, arguments);\n\n\t\t\t// set products demo model on this sample\n\t\t\toProductsModel = new JSONModel(sap.ui.require.toUrl('sap/ui/demo/mock/products.json'));\n\t\t\toProductsModel.setSizeLimit(1000);\n\t\t\tthis.setModel(oProductsModel, 'products');\n\t\t}\n\t});\n});\n```\n\nWe create the `init` method in the `Component.js` to set the model.\n\n\n\n<a name=\"loio0830bce271bf42d98c2740bed43d435d__section_shq_mjj_l4b\"/>\n\n## webapp/view/List.view.xml \\[NEW\\]\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.fcl.controller.List\"\n\txmlns=\"sap.m\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:f=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<f:DynamicPage id=\"dynamicPageId\" toggleHeaderOnTitleClick=\"false\">\n\t\t<!-- DynamicPage Title -->\n\t\t<f:title>\n\t\t\t<f:DynamicPageTitle>\n\t\t\t\t<f:heading>\n\t\t\t\t\t<Title text=\"Products ({products>/ProductCollectionStats/Counts/Total})\"/>\n\t\t\t\t</f:heading>\n\t\t\t</f:DynamicPageTitle>\n\t\t</f:title>\n\n\t\t<!-- DynamicPage Content -->\n\t\t<f:content>\n\t\t\t<VBox fitContainer=\"true\">\n\t\t\t\t<OverflowToolbar class=\"sapFDynamicPageAlignContent\">\n\t\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t\t<SearchField search=\".onSearch\" width=\"17.5rem\"/>\n\t\t\t\t\t<OverflowToolbarButton icon=\"sap-icon://add\" text=\"Add\" type=\"Transparent\" press=\".onAdd\"/>\n\t\t\t\t\t<OverflowToolbarButton icon=\"sap-icon://sort\" text=\"Sort\" type=\"Transparent\" press=\".onSort\"/>\n\t\t\t\t</OverflowToolbar>\n\t\t\t\t<Table\n\t\t\t\t\tid=\"productsTable\"\n\t\t\t\t\tinset=\"false\"\n\t\t\t\t\titems=\"{\n\t\t\t\t\t\tpath: 'products>/ProductCollection',\n\t\t\t\t\t\tsorter: {\n\t\t\t\t\t\t\tpath: 'Name'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\"\n\t\t\t\t\tclass=\"sapFDynamicPageAlignContent\"\n\t\t\t\t\twidth=\"auto\">\n\t\t\t\t\t<columns>\n\t\t\t\t\t\t<Column width=\"12em\">\n\t\t\t\t\t\t\t<Text text=\"Product\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t\t<Column\thAlign=\"End\">\n\t\t\t\t\t\t\t<Text text=\"Price\"/>\n\t\t\t\t\t\t</Column>\n\t\t\t\t\t</columns>\n\t\t\t\t\t<items>\n\t\t\t\t\t\t<ColumnListItem type=\"Navigation\">\n\t\t\t\t\t\t\t<cells>\n\t\t\t\t\t\t\t\t<ObjectIdentifier title=\"{products>Name}\" text=\"{products>ProductId}\"/>\n\t\t\t\t\t\t\t\t<ObjectNumber\n\t\t\t\t\t\t\t\t\tcore:require=\"{\n\t\t\t\t\t\t\t\t\t\tCurrency: 'sap/ui/model/type/Currency'\n\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\t\t\t\t\tparts:[\n\t\t\t\t\t\t\t\t\t\t\t{path:'products>Price'},\n\t\t\t\t\t\t\t\t\t\t\t{path:'products>CurrencyCode'}\n\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\ttype: 'Currency',\n\t\t\t\t\t\t\t\t\t\tformatOptions: {showMeasure: false}\n\t\t\t\t\t\t\t\t\t}\"\n\t\t\t\t\t\t\t\t\tunit=\"{products>CurrencyCode}\"/>\n\t\t\t\t\t\t\t</cells>\n\t\t\t\t\t\t</ColumnListItem>\n\t\t\t\t\t</items>\n\t\t\t\t</Table>\n\t\t\t</VBox>\n\t\t</f:content>\n\n\t\t<!-- DynamicPage Footer -->\n\t\t<f:footer>\n\t\t\t<OverflowToolbar>\n\t\t\t\t<ToolbarSpacer/>\n\t\t\t\t<Button type=\"Accept\" text=\"Accept\"/>\n\t\t\t\t<Button type=\"Reject\" text=\"Reject\"/>\n\t\t\t</OverflowToolbar>\n\t\t</f:footer>\n\t</f:DynamicPage>\n</mvc:View>\n```\n\nWe create the list view using `sap.f.DynamicPage`. The page consists of a list with all products.\n\n\n\n<a name=\"loio0830bce271bf42d98c2740bed43d435d__section_zrl_ljj_l4b\"/>\n\n## webapp/view/App.view.xml \\[MODIFY\\]\n\n```xml\n<mvc:View\n\tdisplayBlock=\"true\"\n\theight=\"100%\"\n\txmlns=\"sap.f\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<FlexibleColumnLayout id=\"flexibleColumnLayout\" backgroundDesign=\"Solid\">\n\t\t<beginColumnPages>\n\t\t\t<mvc:XMLView id=\"beginView\" viewName=\"sap.ui.demo.fcl.view.List\"/>\n\t\t</beginColumnPages>\n\t</FlexibleColumnLayout>\n</mvc:View>\n```\n\nWe add the list view in `FlexibleColumnLayout's` `beginColumnPages` aggregation.\n\n\n\n<a name=\"loio0830bce271bf42d98c2740bed43d435d__section_ovn_jjj_l4b\"/>\n\n## webapp/controller/List.controller.js \\[NEW\\]\n\n```js\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/MessageBox\"\n], function (Controller, Filter, FilterOperator, Sorter, MessageBox) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.fcl.controller.List\", {\n\t\tonInit: function () {\n\t\t\tthis.oView = this.getView();\n\t\t\tthis._bDescendingSort = false;\n\t\t\tthis.oProductsTable = this.oView.byId(\"productsTable\");\n\t\t},\n\n\t\tonSearch: function (oEvent) {\n\t\t\tvar oTableSearchState = [],\n\t\t\t\tsQuery = oEvent.getParameter(\"query\");\n\n\t\t\tif (sQuery && sQuery.length > 0) {\n\t\t\t\toTableSearchState = [new Filter(\"Name\", FilterOperator.Contains, sQuery)];\n\t\t\t}\n\n\t\t\tthis.oProductsTable.getBinding(\"items\").filter(oTableSearchState, \"Application\");\n\t\t},\n\n\t\tonAdd: function () {\n\t\t\tMessageBox.information(\"This functionality is not ready yet.\", {title: \"Aw, Snap!\"});\n\t\t},\n\n\t\tonSort: function () {\n\t\t\tthis._bDescendingSort = !this._bDescendingSort;\n\t\t\tvar oBinding = this.oProductsTable.getBinding(\"items\"),\n\t\t\t\toSorter = new Sorter(\"Name\", this._bDescendingSort);\n\n\t\t\toBinding.sort(oSorter);\n\t\t}\n\t});\n});\n\n```\n\nWe create the list controller that provides a basic search and sort functionality for the products listed in the list page.\n\n",
  "excerpt": "<!-- loio0830bce271bf42d98c2740bed43d435d --> Step 3: Using Dynamic Page for the List View In this step, we create the list view of the app using sap.f.DynamicPage control. <a name=\"loio0830bce271bf42...",
  "wordCount": 564,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}