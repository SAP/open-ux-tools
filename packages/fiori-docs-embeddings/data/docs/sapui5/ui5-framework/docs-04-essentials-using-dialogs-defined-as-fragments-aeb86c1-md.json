{
  "id": "sapui5-docs-04-essentials-using-dialogs-defined-as-fragments-aeb86c1-md",
  "title": "Using Dialogs Defined as Fragments",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/using-dialogs-defined-as-fragments-aeb86c1.md",
  "lastModified": "2025-09-01T18:17:10.552Z",
  "tags": [
    "ui5-framework",
    "md",
    "Using",
    "Dialogs",
    "Defined",
    "Fragments"
  ],
  "headers": [
    "Using Dialogs Defined as Fragments",
    "Context"
  ],
  "content": "<!-- loioaeb86c181b9742a2bf88049abf9ccb95 -->\n\n# Using Dialogs Defined as Fragments\n\nThe fragment instantiation function always returns the fragment's root control, which is a dialog control that can be used like any dialog.\n\n\n\n## Context\n\nIn the following example, the dialog is opened immediately:\n\n```js\n// \"this\" has to be the controller instance of a controller extending module \"sap/ui/core/mvc/Controller\"\nasync openDialog() {\n\tthis.oDialog ??= await this.loadFragment({\n\t\tname: \"testdata.fragments.XMLFragmentDialog\"\n\t});\n\tthis.oDialog.open();\n}\n```\n\n> ### Note:  \n> Any global model and any models set on the controller's view are automatically available for data binding within this dialog. The fragment content is automatically added to the view's `dependents` aggregation. In consequence, the dialog is also automatically destroyed once the view is destroyed.\n\n",
  "excerpt": "<!-- loioaeb86c181b9742a2bf88049abf9ccb95 --> Using Dialogs Defined as Fragments The fragment instantiation function always returns the fragment's root control, which is a dialog control that can be u...",
  "wordCount": 119,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}