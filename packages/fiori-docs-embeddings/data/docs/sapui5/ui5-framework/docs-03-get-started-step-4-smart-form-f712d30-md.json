{
  "id": "sapui5-docs-03-get-started-step-4-smart-form-f712d30-md",
  "title": "Step 4: Smart Form",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-4-smart-form-f712d30.md",
  "lastModified": "2025-09-01T18:17:10.475Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Smart",
    "Form"
  ],
  "headers": [
    "Step 4: Smart Form",
    "Preview",
    "Coding",
    "SmartForm.view.xml",
    "SmartForm.controller.js",
    "metadata.xml",
    "Products.json"
  ],
  "content": "<!-- loiof712d30f9e2d4abd9670263f89542f2b -->\n\n# Step 4: Smart Form\n\nThe `SmartForm` control is used to obtain a form-like layout for several controls.\n\n`SmartForm` internally uses the `sap.ui.layout.form.Form` control. When using the `SmartForm` control in combination with the `SmartField` controls, the `view.xml` file remains very compact since required information about labels and headers is automatically extracted from the OData metadata. In addition, you can specify in `SmartForm` that it is toggle-editable in which case you get the option to switch between read-only and edit mode. In this case, the powerful features of the `SmartField` control really come to life, such as the value help and the smart links.\n\n\n\n## Preview\n\n  \n  \n**Smart Form with Several Smart Fields \\(Initial Read-Only Mode\\)**\n\n![](images/Smart_Controls_Tutorial_Step_04a_3127199.png \"Smart Form with Several Smart Fields (Initial Read-Only Mode)\")\n\nWhen you press the pencil icon, the dialog for `SmartForm` becomes editable:\n\n  \n  \n**Smart Form with Several Smart Fields \\(Edit Mode\\)**\n\n![](images/Smart_Controls_Tutorial_Step_04b_0fd542d.png \"Smart Form with Several Smart Fields (Edit Mode)\")\n\nWhen pressing the eyeglasses icon, you return to the display view of `SmartForm`.\n\n\n\n## Coding\n\nYou can view and download all files in the *Samples* in the Demo Kit at [Smart Controls - Step 4 - Smart Form](https://ui5.sap.com/#/entity/sap.ui.comp.tutorial.smartControls/sample/sap.ui.comp.tutorial.smartControls.04).\n\n\n\n## SmartForm.view.xml\n\n```xml\n<mvc:View \n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tcontrollerName=\"sap.ui.demo.smartControls.SmartForm\"\n\txmlns:smartForm=\"sap.ui.comp.smartform\" \n\txmlns:smartField=\"sap.ui.comp.smartfield\">\n\t<smartForm:SmartForm \n\t\tid=\"smartForm\"\n\t\teditTogglable=\"true\" \n\t\ttitle=\"{Name}\"\n\t\tflexEnabled=\"false\">\n\t\t<smartForm:Group label=\"Product\">\n\t\t\t<smartForm:GroupElement>\n\t\t\t\t<smartField:SmartField value=\"{ProductId}\" />\n\t\t\t</smartForm:GroupElement>\n\t\t\t<smartForm:GroupElement>\n\t\t\t\t<smartField:SmartField value=\"{Name}\" />\n\t\t\t</smartForm:GroupElement>\n\t\t\t<smartForm:GroupElement elementForLabel=\"1\">\n\t\t\t\t<smartField:SmartField value=\"{CategoryName}\" />\n\t\t\t\t<smartField:SmartField value=\"{Description}\" />\n\t\t\t</smartForm:GroupElement>\n\t\t\t<smartForm:GroupElement>\n\t\t\t\t<smartField:SmartField value=\"{Price}\" />\n\t\t\t</smartForm:GroupElement>\n\t\t</smartForm:Group>\n\t\t<smartForm:Group label=\"Supplier\">\n\t\t\t<smartForm:GroupElement>\n\t\t\t\t<smartField:SmartField value=\"{SupplierName}\" />\n\t\t\t</smartForm:GroupElement>\n\t\t</smartForm:Group>\n\t</smartForm:SmartForm>\n</mvc:View>\n```\n\nWe see that we have several new elements here. `Group` instructs the `SmartForm` to add a container for the child elements. In this case, we have two top-level containers of elements, one for `Product` and one for `Supplier`. With the `GroupElement` added as a wrapper control for `SmartFields`, we instruct the `SmartForm` to inspect the OData metadata and automatically add the labels found there. Within such `GroupElements`, we can even define a compound field having exactly one label in front. We do this in the example above in order to combine `CategoryName` with `Description`. With `elementForLabel=\"1\"` we define that the label `Description` for `SmartField` \\(found in the OData metadata\\) is used for both fields. `flexEnabled=\"false\"` is set to deactivate SAPUI5 flexibility, since these features are not part of this tutorial.\n\n\n\n## SmartForm.controller.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/core/mvc/Controller\" \n], function(Controller) {\n\t\"use strict\";\n\n\treturn Controller.extend(\"sap.ui.demo.smartControls.SmartForm\", {\n\t\tonInit: function() {\n\t\t\tthis.getView().byId(\"smartFormPage\").bindElement(\"/Products('4711')\");\n\t\t}\n\t});\n\n});\n```\n\nThe controller follows the pattern that we already know.\n\n\n\n## metadata.xml\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<edmx:Edmx Version=\"1.0\"\n\txmlns:edmx=\"http://schemas.microsoft.com/ado/2007/06/edmx\"\n\txmlns:m=\"http://schemas.microsoft.com/ado/2007/08/dataservices/metadata\"\n\txmlns:sap=\"http://www.sap.com/Protocols/SAPData\">\n\t<edmx:DataServices m:DataServiceVersion=\"2.0\">\n\t\t<Schema Namespace=\"com.sap.wt04\" \n\t\t\tsap:schema-version=\"1\" xmlns=\"http://schemas.microsoft.com/ado/2008/09/edm\">\n\t\t\t<EntityType Name=\"Product\">\n\t\t\t\t<Key>\n\t\t\t\t\t<PropertyRef Name=\"ProductId\" />\n\t\t\t\t</Key>\n\t\t\t\t<Property Name=\"ProductId\" Type=\"Edm.String\" Nullable=\"false\"\n\t\t\t\t\tsap:updatable=\"false\" MaxLength=\"20\" sap:label=\"Product ID\" />\n\t\t\t\t<Property Name=\"Name\" Type=\"Edm.String\" Nullable=\"false\"\n\t\t\t\t\tMaxLength=\"30\" sap:label=\"Name\" />\n\t\t\t\t<Property Name=\"CategoryName\" Type=\"Edm.String\" sap:label=\"Category Description\"\n\t\t\t\t\tsap:updatable=\"true\" />\n\t\t\t\t<Property Name=\"Description\" Type=\"Edm.String\" MaxLength=\"256\"\n\t\t\t\t\tsap:label=\"Description\" sap:updatable=\"true\" />\n\t\t\t\t<Property Name=\"Price\" Type=\"Edm.String\" Nullable=\"false\"\n\t\t\t\t\tsap:unit=\"CurrencyCode\" MaxLength=\"3\" sap:label=\"Price\"\n\t\t\t\t\tsap:updatable=\"true\" />\n\t\t\t\t<Property Name=\"CurrencyCode\" Type=\"Edm.String\" Nullable=\"true\"\n\t\t\t\t\tMaxLength=\"3\" sap:label=\"Currency\" sap:semantics=\"currency-code\"\n\t\t\t\t\tsap:updatable=\"true\" />\n\t\t\t\t<Property Name=\"SupplierName\" Type=\"Edm.String\" Nullable=\"false\"\n\t\t\t\t\tsap:label=\"Supplier\" sap:updatable=\"true\" />\n\t\t\t</EntityType>\n\t\t\t<EntityContainer m:IsDefaultEntityContainer=\"true\"\n\t\t\t\tsap:supported-formats=\"atom json\">\n\t\t\t\t<EntitySet Name=\"Products\" EntityType=\"com.sap.wt04.Product\" />\n\t\t\t</EntityContainer>\n\t\t</Schema>\n\t</edmx:DataServices>\n</edmx:Edmx>\t\n```\n\nWith `Nullable=\"false\"` we define that the field is mandatory and therefore cannot be null. The label for the mandatory field is then marked with \\* on the UI. Other than that, there are no substantial differences in the metadata file. We only notice that the `sap:label` attributes defined here appear in the final form as explained before.\n\n\n\n## Products.json\n\n```js\n[{\t\n\t\"ProductId\": \"4711\",\n\t\"Name\": \"Power Projector 4711\",\n\t\"CategoryName\": \"Projector\",\n\t\"SupplierName\": \"Titanium\",\n\t\"Description\": \"A very powerful projector with special features for Internet usability, USB\",\n\t\"Price\": 856.49,\n\t\"CurrencyCode\": \"EUR\"\n}]\n```\n\nWe see that a few attributes have been changed and added to the JSON file, reflecting the fact that, in this step, more data is shown.\n\n**Related Information**  \n\n\n[Smart Form](../10_More_About_Controls/smart-form-99e33bd.md \"The sap.ui.comp.smartform.SmartForm control makes it possible to render a form. Depending on user authorizations, the form enables users, for example, to switch from display to edit mode, add and group fields, rename field labels, and implement a user input check.\")\n\n",
  "excerpt": "<!-- loiof712d30f9e2d4abd9670263f89542f2b --> Step 4: Smart Form The SmartForm control is used to obtain a form-like layout for several controls. SmartForm internally uses the sap.ui.layout.form.Form ...",
  "wordCount": 659,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}