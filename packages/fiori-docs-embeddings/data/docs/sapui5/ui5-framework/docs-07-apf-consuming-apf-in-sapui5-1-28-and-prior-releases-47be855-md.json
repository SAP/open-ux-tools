{
  "id": "sapui5-docs-07-apf-consuming-apf-in-sapui5-1-28-and-prior-releases-47be855-md",
  "title": "Consuming APF in SAPUI5 1.28 and Prior Releases",
  "category": "ui5-framework",
  "path": "docs/07_APF/consuming-apf-in-sapui5-1-28-and-prior-releases-47be855.md",
  "lastModified": "2025-09-01T18:17:10.665Z",
  "tags": [
    "ui5-framework",
    "md",
    "Consuming",
    "APF",
    "SAPUI5",
    "and",
    "Prior",
    "Releases"
  ],
  "headers": [
    "Consuming APF in SAPUI5 1.28 and Prior Releases",
    "Footer Content",
    "Creating Filters for the Footer Content",
    "Security Considerations"
  ],
  "content": "<!-- loio47be85530a5df37ae10000000a44176d -->\n\n# Consuming APF in SAPUI5 1.28 and Prior Releases\n\nThe following code snippet is an example of how to consume APF in a UI5 based application up until SAPUI5 1.28:\n\n```\n\nsap.ui.define([\"sap/apf/Component\"], function(Component) {\n    return Component.extend(\"myApp.Component\", {\n        metadata : {\n            name : <name>,\n            version : <version>\n        },\n        /**\n        * Initialize the application\n        *\n        * @returns\n        */\n        init : function() {\n            // Initialize application here. No APF specific operation done here, since APF API is not yet available.\n            // Call APF Component init\n            Component.prototype.init.apply(this, arguments);\n        },\n        /**\n        * Creates the application layout and returns the outer layout of APF\n        *\n        * @returns {sap.ui.core.Control} the content\n        */\n        createContent : function() {\n            // Attach APF start-up callbacks\n            this.getApi().setCallbackBeforeApfStartup(this.onBeforeApfStartup);\n            this.getApi().setCallbackAfterApfStartup(this.onAfterApfStartup);\n \n            // Prepare path to application configuration file\n            var modPath = sap.ui.require.toUrl('myApp');\n            var configFilePath = modPath + \"/config/myApplicationConfiguration.json\";\n            this.getApi().loadApplicationConfig(configFilePath);\n \n            // Return whatever is returned by parent (APF Component) createContent method\n            return Component.prototype.createContent.apply(this, arguments);\n        },\n\n        onBeforeApfStartup: function() {       //optional\n            // Code executed before APF startup\n        },\n\n        onAfterApfStartup: function() {        //optional\n            // Code executed after APF startup\n        },\n        destroy : function() {\n            // Destroy application instances\n\n            // Call destroy on APF Component\n            Component.prototype.destroy.apply(this, arguments);\n        }\n    });\n});\n```\n\nReplace *myApp* with the application-specific namespace.\n\nMethod `this.getApi()` provides a reference to the APF instance.\n\nWhen you use the start parameter `sap-apf-app-config-path`, APF executes method `loadApplicationConfig()` in the `init()` method of `sap.apf.Component`, that is, before `createContent()` of the application component is executed. APF ensures that method `loadApplicationConfig()` is executed not more than once.\n\nThe function registered through `onBeforeApfStartup` is executed after the execution of method `init()`, at the beginning of method `createContent()` of `sap.apf.Component`. This registered function is useful, for example, for defining application-specific filters.\n\nThe function registered through `onAfterApfStartup` is executed after all asynchronous startup operations have been terminated, that is, at the end of method `createContent()` of `sap.apf.Component`. This registered function is useful, for example, for adding footer content to the APF UI.\n\n\n\n## Footer Content\n\nYou can add footer content to your APF-based application, for example, to allow users to make settings such as defining a reporting currency or adjusting the exchange rate settings.\n\nTo add footer content, attach the following APF start-up callbacks at APF API level in the `Component.js` file inside the `createContent()` method:\n\n1.  `setCallbackBeforeApfStartup`, where you can build footer controls.\n\n2.  `setCallbackAfterApfStartup`, where you can insert the footer content into the UI layout using the `addMasterFooterContent` API.\n\n\nFooter controls need to register a listener to the `contextChanged` event of APF to listen to context changes at startup or when a saved path is opened. The event listener for the `contextChanged` event is defined as follows: `oApi.setEventCallback(oApi.constants.eventTypes.contextChanged,fnCallbackForContextChange);`\n\n\n\n### Creating Filters for the Footer Content\n\nTo ensure that the filters you create as footer content are recognized by APF, create them in the following format:\n\n```\nvar oFilter = this.oApi.createFilter();\nvar orExpression = oFilter.getTopAnd().addOr();\norExpression.addExpression({\n    name : \"<name>\",\n    operator : \"<operator>\",\n    value : \"<value>\",\n  });\n```\n\nFor example, if you want to configure a filter for the exchange rate type, the filter expression looks as follows:\n\n```\norExpression.addExpression({\n    name : \"P_ExchangeRateType\",\n    operator : \"EQ\",\n    value : \"USD\", \n  });\n```\n\nUse the API `addPathFilter()` to ensure that the created filter is applied to the analysis path. When the API `addPathFilter()` is called with the filter created above as a parameter, it returns an ID. The filter can be updated using the API `updatePathFilter()` by passing the filter ID and the filter as parameters:\n\n> ### Source Code:  \n> ```\n> var sFilterId = this.oApi.addPathFilter(oFilter);\n> this.oApi.updatePathFilter(sFilterId, oFilter);\n> \n> ```\n\nTo retrieve the filter that was applied to the analysis path, use the API getPathFilter\\(\\) and pass the filter ID as a parameter:\n\n```\nvar oFilter = this.oApi.getPathFilter(sFilterId);\nvar sValue = oFilter.getInternalFilter().getFilterTerms()[0].getValue();\n\n```\n\n\n\n## Security Considerations\n\nFor any application extension, ensure that both the extension and its libraries are trustworthy.\n\n**Related Information**  \n\n\n[Components](../04_Essentials/components-958ead5.md \"Components are independent and reusable parts used in SAPUI5 applications.\")\n\n",
  "excerpt": "<!-- loio47be85530a5df37ae10000000a44176d --> Consuming APF in SAPUI5 1.28 and Prior Releases The following code snippet is an example of how to consume APF in a UI5 based application up until SAPUI5 ...",
  "wordCount": 652,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}