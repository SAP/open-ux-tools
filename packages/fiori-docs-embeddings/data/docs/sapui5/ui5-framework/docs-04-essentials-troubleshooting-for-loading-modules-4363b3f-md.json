{
  "id": "sapui5-docs-04-essentials-troubleshooting-for-loading-modules-4363b3f-md",
  "title": "Troubleshooting for Loading Modules",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/troubleshooting-for-loading-modules-4363b3f.md",
  "lastModified": "2025-09-01T18:17:10.550Z",
  "tags": [
    "ui5-framework",
    "md",
    "Troubleshooting",
    "for",
    "Loading",
    "Modules"
  ],
  "headers": [
    "Troubleshooting for Loading Modules",
    "Why was my Module Not Loaded Correctly?",
    "The module name is given in `sap.ui.define`",
    "Using multiple `sap.ui.define` calls with unnamed modules",
    "Combining conditional modules with `sap.ui.define`",
    "Mixing old and new loader APIs",
    "Using `sap.ui.require` instead of `sap.ui.define` on the top level",
    "Defining \\(unnamed\\) modules via inline scripts",
    "Avoiding synchronous access to a module definition export",
    "Avoid synchronous probing after module definition",
    "What is wrong with the way I am addressing the modules?",
    "Case insensitivity when addressing modules",
    "Manual loading of UI5 modules via script tags",
    "How can I remove project structures with cyclic dependencies?"
  ],
  "content": "<!-- loio4363b3fe3561414ca1b030afc8cd30ce -->\n\n# Troubleshooting for Loading Modules\n\nThe following sections give examples that you must avoid because they cause problems when loading your module.\n\n\n\n<a name=\"loio4363b3fe3561414ca1b030afc8cd30ce__section_moduleloading\"/>\n\n## Why was my Module Not Loaded Correctly?\n\nThe following list contains possible reasons why your module does not load. To see how it is done correctly, see [Best Practices for Loading Modules - How to Define Modules](best-practices-for-loading-modules-00737d6.md#loio00737d6c1b864dc3ab72ef56611491c4__section_DefineModules).\n\n\n\n### The module name is given in `sap.ui.define`\n\nIf you explicitly give the module name in `sap.ui.define`, you introduce additional complexity to the project structure which may cause inconcistencies and clashing module names. This problem is difficult to detect and can easily and proactively be avoided by omitting the module name in `sap.ui.define`.\n\nThe following example shows how it must *not* be done: The library file structure of `myLib` does not fit the module name. If there is another module named `MyModule` in the `myLib` library, the module would be hard to address. If you use an unnamed module instead, the module names would reflect the library file structure. By this, you reduce the probability of module name conflicts. In general, when addressing UI5 modules, make sure you separate all parts of the module's name with slashes instead of dots, for example `myLib/MyModule` instead of `myLib.MyModule`.\n\n`myLib/myAdditionalPathSegment/MyModule.js`\n\n```js\n// CAUTION: BAD EXAMPLE - DON'T DO THIS\nsap.ui.define(\"myLib.MyModule\", [], function(){\n    ...\n});\n```\n\n\n\n### Using multiple `sap.ui.define` calls with unnamed modules\n\nIf you have more than one `sap.ui.define` call in a JavaScript file, the module loader does not know which definition actually represents the module. As there is no scenario that requires multiple module definitions in one file and in order to comply with the AMD specification \\(see [https://github.com/amdjs/amdjs-api/wiki/AMD](https://github.com/amdjs/amdjs-api/wiki/AMD)\\), the async variant of the SAPUI5 module loader does *not* tolerate multiple definitions anymore and throws an error.\n\n**Example**: The `myModule` module is defined twice. This was most probably done by accident. To resolve this, the two module definitions have to be split into two separate modules.\n\n`myModule.js`\n\n```js\n// BAD EXAMPLE - DON'T DO THIS\nsap.ui.define([], function(){\n    ...\n});\nsap.ui.define([], function(){\n    ...\n});\n```\n\n\n\n### Combining conditional modules with `sap.ui.define`\n\nConditional module definitions should *not* be used because of the following reasons:\n\n-   The modules cannot be required with parameters because the check conditions are related to globals.\n\n-   The export value is not consistent. This makes it difficult to consume the module.\n\n-   The module dependencies are unclear. This prevents an efficient module bundling.\n\n\n**Example**: The export value of `myModule` depends on the global `myProperty` property. In this case, it makes sense to split the two definitions into separate files for example into the two variants `myModuleA` and `myModuleB`. Another module can then make the required `myProperty` check and require the variant of `myModule` via `sap.ui.require`.\n\n`myModule.js`\n\n```js\n// BAD EXAMPLE - DON'T DO THIS\nif (myProperty){\n    sap.ui.define([], function(){\n        ... \n    });\nelse {\n    sap.ui.define([], function(){\n        ... \n    });\n}\n```\n\n\n\n### Mixing old and new loader APIs\n\nUsing deprecated APIs is not recommended and mixing old and new loader APIs is even worse: If the synchronicity has changed between older and newer APIs, mixing them will cause timing-related issues as well as general inconsistencies.\n\n**Example**: The namespace `myLib.myModule` is registered through the `jQuery.sap.declare` call. Besides actually defining the module export value, the subsequent `sap.ui.define` call does the same registration. So, the `jQuery.sap.declare` in this example is unnecessary and must be omitted in this example.\n\n`myLib/MyModule.js`\n\n```js\n// BAD EXAMPLE - DON'T DO THIS\njQuery.sap.declare(\"myLib.myModule\");\nsap.ui.define([], function(){\n    ...\n});\n```\n\n\n\n### Using `sap.ui.require` instead of `sap.ui.define` on the top level\n\nAlthough the API signature for `sap.ui.define` and `sap.ui.require` looks similar, you must use the `sap.ui.define` API to define a reusable JavaScript object \\(that is, a module\\). Note the following differences between `sap.ui.require` and `sap.ui.define`:\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nAction\n\n</th>\n<th valign=\"top\">\n\nsap.ui.require\n\n</th>\n<th valign=\"top\">\n\nsap.ui.define\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\nValue export\n\n</td>\n<td valign=\"top\">\n\nNot possible\n\n</td>\n<td valign=\"top\">\n\nThe callback function defines an export to provide functionality to other modules.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nModule name registration\n\n</td>\n<td valign=\"top\">\n\nNot possible\n\n</td>\n<td valign=\"top\">\n\nThe module name is registered at the loader registry and can be used to address the module.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nRelative dependencies\n\n</td>\n<td valign=\"top\">\n\nThis is not possible, because no module name is registered and a reference point is missing.\n\n</td>\n<td valign=\"top\">\n\nCan be used.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\nExecution order\n\n</td>\n<td valign=\"top\">\n\nDependent modules can be executed before the `sap.ui.require` callback has been executed. Therefore, using `sap.ui.require` instead of `sap.ui.define` can break the intended dependency graph and module execution order.\n\n</td>\n<td valign=\"top\">\n\nThe dependent modules are waiting for the module callback execution to be finished.\n\n</td>\n</tr>\n</table>\n\n**Example**: The file for module C has one top-level `sap.ui.require` instead of a top-level `sap.ui.define` call. The module callback evaluation order starts with module B, because it has no dependencies. Afterwards, the framework can execute module A or module C, because the intended module C is not a module from the module loader perspective. Furthermore, the undefined export value of module C will most probably lead to errors in module A. If module C is defined correctly via a top-level `sap.ui.define` call, the module callback execution order is clear: B - C - A.\n\n![](images/Image_Module_Loading_BP_4_87c101d.png)\n\n\n\n### Defining \\(unnamed\\) modules via inline scripts\n\nIt is unclear how modules that are defined via inline scripts can by addresses by other modules. Therefore, the inline scripts must be omitted.\n\n**Example**: Module A is defined after bootstrapping UI5 and before the actual app is started. As the module is not addressable, the module definition must be moved to a separate file.\n\n`startMyApp.html`\n\n```html\n<!-- BAD EXAMPLE - DON'T DO THIS -->\n<html>\n...  \n    <script>  \n        //Boot UI5  \n    </script>  \n    <script>  \n        //Definition for Module A  \n        sap.ui.define(function(){  \n            ...  \n        });  \n    </script>  \n    <script>  \n        // Start UI5 Application  \n    </script>  \n...  \n</html>\n```\n\n\n\n### Avoiding synchronous access to a module definition export\n\nNever do a synchronous access to the export of a module definition because the module definition could be done asynchronously. Never rely on the synchronicity of a module definition, even if a module has no dependencies.\n\n**Example**: The `sap.ui.define` call for the `myModule` module is made and the export value is synchronously used by creating a new object of that export. Although this may work in some scenarios, never do it this way, because it is unclear whether the module definition is already done. Instead, use the export of `myModule` in a separate module with a correctly maintained dependency to the `myModule` module.\n\n`myLib/MyModule.js`\n\n```js\n// BAD EXAMPLE - DON'T DO THIS\nsap.ui.define([], function(){\n    ...\n});  \n...  \nvar oMyModule = new myLib.MyModule();  \n...\n```\n\nFor more information, see the API Reference for [sap.ui.define - Asynchronuous Contract](https://ui5.sap.com/#/api/sap.ui/methods/sap.ui.define).\n\n\n\n### Avoid synchronous probing after module definition\n\nSimilar to the synchronous access of a module's export value, you also must omit the synchronous probing for modules defined in the same browser task.\n\n**Example**: The `sap.ui.define` call for the `myModule` module is made and is synchronously checked by probing through calling `sap.ui.require`. Instead, the probing for `myModule` must be done in a separate module with a correctly maintained dependency to `myModule`.\n\n`myLib/MyModule.js`\n\n```js\n// BAD EXAMPLE - DON'T DO THIS\nsap.ui.define([], function(){\n    ...\n});\nvar MyModule = sap.ui.require('myLib/MyModule');\n```\n\n\n\n<a name=\"loio4363b3fe3561414ca1b030afc8cd30ce__section_moduleaddressing\"/>\n\n## What is wrong with the way I am addressing the modules?\n\nThe following examples show how you should *not* address a module. To see how it is done correctly, see [Best Practices for Loading Modules - How to Address Modules](best-practices-for-loading-modules-00737d6.md#loio00737d6c1b864dc3ab72ef56611491c4__section_AddressModules).\n\n\n\n### Case insensitivity when addressing modules\n\nAddressing a module inconsistently can cause various side-effects. If the server is not case sensitive, for example, the same resource can be addressed with URLs that differ only in case sensitivity. Besides that, it is bad from a performance perspective if the same resource is loaded twice and the same module is defined twice. This is similar to the example for multiple definitions above: multiple definitions of the same module can cause several issues, such as failing checks of `instanceof`.\n\n**Example**: If we assume a server that is *not* case-sensitive, the `sap.m` library's `Button` control is loaded and evaluated twice.\n\n`myView.xml`\n\n```xml\n<!-- BAD EXAMPLE - DON'T DO THIS -->\n<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns:m=\"sap.m\">\n    ...\n    <m:Button></m:Button>\n    <m:button></m:button>\n    ...\n</mvc:View>\n```\n\n`myModule.js`\n\n```js\n...\n    // BAD EXAMPLE - DON'T DO THIS\n    sap.ui.require(['sap/m/button'], function(){\n        ...\n    });\n    sap.ui.require(['sap/m/Button'], function(){\n        ...\n    });\n...\n```\n\n\n\n### Manual loading of UI5 modules via script tags\n\nWhen you load modules manually, the module loader cannot know how the module shall be named. Therefore, UI5 modules must always be loaded and evaluated via the UI5 module loader APIs.\n\nExample: The `myModule` module is loaded via a script tag. Instead, use a `sap.ui.require` call to loading the module.\n\n`startMyApp.js`\n\n```html\n<html>\n...\n    <script src=\"https://myhost/mypath/myModule.js\"></script>\n...\n</html>\n```\n\n\n\n<a name=\"loio4363b3fe3561414ca1b030afc8cd30ce__section_cyclicdependencies\"/>\n\n## How can I remove project structures with cyclic dependencies?\n\nWhen you use cyclic dependencies in the project structure, the module dependencies cannot be resolved. The UI5 module load detects the cycle and returns an undefined value instead of the correct module export.\n\nAs an exception, in specific scenarios, you may make the involved modules robust enough to handle undefined module exports at module callback execution time and use the export value via probing later. However, if you use the async variant of the loader, all modules that belong to a cycle must be able to handle undefined exports.\n\nTo see how to set up a correct project structure, see [Best Practices for Loading Modules - How to Structure a Project](best-practices-for-loading-modules-00737d6.md#loio00737d6c1b864dc3ab72ef56611491c4__section_StructureProject).\n\n**Example**: All modules have exactly one dependency, which cannot be resolved correctly.\n\n![](images/Image_Module_Loading_BP2_01905ac.png)\n\n*Solution 1 – Resolved cycle*: The following figure shows how the cycle can be resolved by moving the functionality of module A, which is used by module B, to a separate module \\(module A2\\). In general, resolving cyclic dependencies can require a larger refactoring of all involved modules, especially when multiple cycles have to be resolved.\n\n![](images/Image_Module_Loading_BP_3_544e019.png)\n\n*Solution 2 – Probing modules*: In the example given in the following figure, the cycle is not resolved, but the involved modules do not access the dependent modules directly when the module callback is executed. They access them later via probing.\n\n![](images/Image_LoadingModules_TS_e598bbc.png)\n\n",
  "excerpt": "<!-- loio4363b3fe3561414ca1b030afc8cd30ce --> Troubleshooting for Loading Modules The following sections give examples that you must avoid because they cause problems when loading your module. <a name...",
  "wordCount": 1705,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}