{
  "id": "sapui5-docs-03-get-started-step-11-assign-multiple-targets-b01840e-md",
  "title": "Step 11: Assign Multiple Targets",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-11-assign-multiple-targets-b01840e.md",
  "lastModified": "2025-09-01T18:17:10.451Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Assign",
    "Multiple",
    "Targets"
  ],
  "headers": [
    "Step 11: Assign Multiple Targets",
    "Preview",
    "Coding",
    "webapp/view/Home.view.xml",
    "webapp/controller/Home.controller.js",
    "webapp/manifest.json",
    "webapp/view/employee/overview/EmployeeOverview.view.xml \\(New\\)",
    "webapp/controller/employee/overview/EmployeeOverview.controller.js \\(New\\)",
    "webapp/view/employee/overview/EmployeeOverviewTop.view.xml \\(New\\)",
    "webapp/view/employee/overview/EmployeeOverviewContent.view.xml \\(New\\)",
    "webapp/controller/employee/overview/EmployeeOverviewContent.controller.js \\(New\\)",
    "webapp/i18n/i18n.properties"
  ],
  "content": "<!-- loiob01840ec42ef48e6bfd2bc12612f501f -->\n\n# Step 11: Assign Multiple Targets\n\nIn this step, we will add a new button to the home page to illustrate the usage of multiple targets for a route. When the button is pressed, a new page opens that contains two parts: a header part at the top and a content part. The content part displays a table of employees that can be sorted and searched. We will use the array notation in the routing configuration to assign multiple targets to a route - a feature that we have not yet introduced.\n\n\n\n## Preview\n\n  \n  \n**New button Show Employee Overview**\n\n![](images/Tutorial_Navigation_and_Routing_Step_11a_02350a2.png \"New button Show Employee Overview\")\n\n  \n  \n**Employee Overview with search field**\n\n![](images/Tutorial_Navigation_and_Routing_Step_11b_bf4ffb5.png \"Employee Overview with search field\")\n\n  \n  \n**Sort options for the Employee Overview**\n\n![](images/Tutorial_Navigation_and_Routing_Step_11c_0842e39.png \"Sort options for the Employee Overview\")\n\n\n\n## Coding\n\nYou can view and download all files in the Demo Kit at [Routing and Navigation - Step 11](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.navigation/sample/sap.ui.core.tutorial.navigation.11) .\n\n  \n  \n**Folder Structure for this Step**\n\n\n\n\n\n## webapp/view/Home.view.xml\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.Home\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page title=\"{i18n>homePageTitle}\" class=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<Button id=\"displayNotFoundBtn\" text=\"{i18n>DisplayNotFound}\" press=\".onDisplayNotFound\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t<Button id=\"employeeListBtn\" text=\"{i18n>ShowEmployeeList}\" press=\".onNavToEmployees\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t<Button id=\"employeeOverviewBtn\" text=\"{i18n>ShowEmployeeOverview}\" press=\".onNavToEmployeeOverview\" class=\"sapUiTinyMarginEnd\"/>\n\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\nFirst we add a new button to the `Home` view and add an event handler for the `press` event.\n\n\n\n## webapp/controller/Home.controller.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.Home\", {\n\t\t...\n\t\tonNavToEmployees : function () {\n\t\t\tthis.getRouter().navTo(\"employeeList\");\n\t\t},\n\t\tonNavToEmployeeOverview : function ()  {\n\t\t\tthis.getRouter().navTo(\"employeeOverview\");\n\t\t}\n\n\t});\n});\n```\n\nAs you know already from the previous steps, we add the `press` event handler `onNavToEmployeeOverview`. It navigates to the route `employeeOverview` which does not exist yet, so let's create it.\n\n\n\n## webapp/manifest.json\n\n```js\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/overview\",\n\t\t\t\t\"name\": \"employeeOverview\",\n\t\t\t\t\"target\": [\"employeeOverviewTop\", \"employeeOverviewContent\"]\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}\",\n\t\t\t\t\"name\": \"employee\",\n\t\t\t\t\"target\": \"employee\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}/resume:?query:\",\n\t\t\t\t\"name\": \"employeeResume\",\n\t\t\t\t\"target\": \"employeeResume\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t...\n\t\t\t\t\"resumeTabNotes\": {\n\t\t\t\t\t\"id\": \"resumeNotes\",\n\t\t\t\t\t\"parent\": \"employeeResume\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"ResumeNotes\",\n\t\t\t\t\t\"controlId\": \"notesTab\",\n\t\t\t\t\t\"controlAggregation\": \"content\"\n\t\t\t\t},\n\t\t\t\t\"employeeOverview\": {\n\t\t\t\t\t\"id\": \"employeeOverview\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee.overview\",\n\t\t\t\t\t\"name\": \"EmployeeOverview\",\n\t\t\t\t\t\"level\" : 2\n\t\t\t\t},\n\t\t\t\t\"employeeOverviewTop\": {\n\t\t\t\t\t\"id\": \"employeeOverviewTop\",\n\t\t\t\t\t\"parent\": \"employeeOverview\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee.overview\",\n\t\t\t\t\t\"name\": \"EmployeeOverviewTop\",\n\t\t\t\t\t\"controlId\": \"EmployeeOverviewParent\",\n\t\t\t\t\t\"controlAggregation\": \"content\"\n\t\t\t\t},\n\t\t\t\t\"employeeOverviewContent\": {\n\t\t\t\t\t\"id\": \"employeeOverviewContent\",\n\t\t\t\t\t\"parent\": \"employeeOverview\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee.overview\",\n\t\t\t\t\t\"name\": \"EmployeeOverviewContent\",\n\t\t\t\t\t\"controlId\": \"EmployeeOverviewParent\",\n\t\t\t\t\t\"controlAggregation\": \"content\"\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nWe extend our current routing configuration with a new route `employeeOverview`. Note that this route has to be configured before the `employee` route, else the `employee` route would be matched with a hash like `/#/employees/overview`. The new route `employeeOverview` references two targets at the same time with an array notation: `employeeOverviewTop` and `employeeOverviewContent`. As you can see here, a route can reference an arbitrary number of targets that will be displayed when the route is matched.\n\nBoth targets `employeeOverviewTop` and `employeeOverviewContent` reference the target `employeeOverview` as their parent target because we want to place them both inside the parent. Please also note that we also introduce a new layer `overview` in the `path` property.\n\n> ### Note:  \n> The order of the routing configuration matters here, because the router stops matching additional routes when the first match is found. You can override this behavior if you set parameter `greedy` to `true` on the route. Then the route will always be matched when the pattern matches the current URL, even if another route has been matched before. The `greedy` option comes from the underlying `Crossroads.js` library, a popular routing library. A common use case for using `greedy` is configuring targets without views and then listening for route-matched events.\n\nNow we create both targets `employeeOverviewTop` and `employeeOverviewContent` as well as their parent target `employeeOverview`. On the parent target we set `level` to `2` to ensure a correct transition animation. In the targets, we also configure where the corresponding views of the children shall be displayed by setting the parameters `controlId` and `controlAggregation` to a control ID of a `sap.ui.layout.HorizontalLayout` that we are about to create in a new view. You should be familiar with this configuration from the last step.\n\nThe router makes sure that the parent view is loaded in addition to the target view when a corresponding route has been matched and the targets are displayed. The referenced views are displayed automatically at the configured place in the parent's view, in our case in the content aggregation of the page control. We have mentioned three different views that we still need to add to the app to make the configuration work:\n\n-   `EmployeeOverview`\n\n-   `EmployeeOverviewTop`\n\n-   `EmployeeOverviewContent`\n\n\n\n\n## webapp/view/employee/overview/EmployeeOverview.view.xml \\(New\\)\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverview\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page id=\"EmployeeOverviewParent\" title=\"{i18n>EmployeeOverview}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<!-- inserted by routing -->\n\t\t</content>\n\t</Page>\n</mvc:View>\n\n```\n\nFirst we create the parent view by creating the folder `overview` under `webapp/view/employee` and placing the file `EmployeeOverview.view.xml` into that folder. This view contains a `Page` control that is referenced from the targets in our `manifest.json` descriptor file. The content aggregation of the page will be filled by the router with the top and content part when the corresponding route has been hit.\n\n\n\n## webapp/controller/employee/overview/EmployeeOverview.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverview\", {\n\t});\n});\n```\n\nThe controller does not contain any logic yet, but we will add back navigation features here in the next steps.\n\n\n\n## webapp/view/employee/overview/EmployeeOverviewTop.view.xml \\(New\\)\n\n```xml\n<mvc:View xmlns=\"sap.m\" xmlns:mvc=\"sap.ui.core.mvc\" class=\"sapUiMediumMarginBottom\">\n\t<Title text=\"{i18n>EmployeeOverviewTop}\"/>\n</mvc:View>\n\n```\n\nCreate the file `EmployeeOverviewTop.view.xml` and place it in the `webapp/view/employee/overview` folder. This view displays a static text for illustration purposes. Change it according to your own requirements. We don't need a controller for this view\n\n\n\n## webapp/view/employee/overview/EmployeeOverviewContent.view.xml \\(New\\)\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Table id=\"employeesTable\"\n\t\titems=\"{/Employees}\">\n\t\t<headerToolbar>\n\t\t\t<Toolbar>\n\t\t\t\t<Title text=\"{i18n>Employees}\" level=\"H2\"/>\n\t\t\t\t<ToolbarSpacer />\n\t\t\t\t<SearchField id=\"searchField\" search=\".onSearchEmployeesTable\" width=\"50%\"/>\n\t\t\t\t<Button icon=\"sap-icon://sort\" press=\".onSortButtonPressed\"/>\n\t\t\t</Toolbar>\n\t\t</headerToolbar>\n\t\t<columns>\n\t\t\t<Column id=\"employeeIDCol\"><Text text=\"{i18n>EmployeeID}\"/></Column>\n\t\t\t<Column id=\"firstNameCol\" demandPopin=\"true\"><Text text=\"{i18n>FirstName}\"/></Column>\n\t\t\t<Column id=\"lastNameCol\" demandPopin=\"true\"><Text text=\"{i18n>LastName}\"/></Column>\n\t\t\t<Column id=\"addressCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>Address}\"/></Column>\n\t\t\t<Column id=\"cityCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>City}\"/></Column>\n\t\t\t<Column id=\"regionCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>Region}\"/></Column>\n\t\t\t<Column id=\"postalCodeCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>PostalCode}\"/></Column>\n\t\t\t<Column id=\"countryCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\"><Text text=\"{i18n>Country}\"/></Column>\n\t\t\t<Column id=\"homePhoneCol\" minScreenWidth=\"Tablet\" demandPopin=\"true\" hAlign=\"Right\"><Text text=\"{i18n>Phone}\"/></Column>\n\t\t</columns>\n\t\t<items>\n\t\t\t<ColumnListItem>\n\t\t\t\t<cells>\n\t\t\t\t\t<Text text=\"{EmployeeID}\"/>\n\t\t\t\t\t<Text text=\"{FirstName}\"/>\n\t\t\t\t\t<Text text=\"{LastName}\"/>\n\t\t\t\t\t<Text text=\"{Address}\"/>\n\t\t\t\t\t<Text text=\"{City}\"/>\n\t\t\t\t\t<Text text=\"{Region}\"/>\n\t\t\t\t\t<Text text=\"{PostalCode}\"/>\n\t\t\t\t\t<Text text=\"{Country}\"/>\n\t\t\t\t\t<Text text=\"{HomePhone}\"/>\n\t\t\t\t</cells>\n\t\t\t</ColumnListItem>\n\t\t</items>\n\t</Table>\n</mvc:View>\n\n```\n\nCreate the file EmployeeOverviewContent.view.xml in the `webapp/view/employee/overview` folder. This view displays a responsive table with several columns containing employee data like *Employee ID*, *First Name*, *Last Name* and so on. In the `headerToolbar`, we add the `SearchField` and a `Button`. The `SearchField` in the header area allows to search in the table. The `Button` next to it opens a dialog to adjust the sorting of the table.\n\n\n\n## webapp/controller/employee/overview/EmployeeOverviewContent.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\",\n\t\"sap/ui/model/Filter\",\n\t\"sap/ui/model/FilterOperator\",\n\t\"sap/ui/model/Sorter\",\n\t\"sap/m/ViewSettingsDialog\",\n\t\"sap/m/ViewSettingsItem\"\n], function(\n\tBaseController,\n\tFilter,\n\tFilterOperator,\n\tSorter,\n\tViewSettingsDialog,\n\tViewSettingsItem\n) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.overview.EmployeeOverviewContent\", {\n\n\t\tonInit: function () {\n\t\t\tthis._oTable = this.byId(\"employeesTable\");\n\t\t\tthis._oVSD = null;\n\t\t\tthis._sSortField = null;\n\t\t\tthis._bSortDescending = false;\n\t\t\tthis._aValidSortFields = [\"EmployeeID\", \"FirstName\", \"LastName\"];\n\t\t\tthis._sSearchQuery = null;\n\n\t\t\tthis._initViewSettingsDialog();\n\t\t},\n\n\t\tonSortButtonPressed : function () {\n\t\t\tthis._oVSD.open();\n\t\t},\n\n\t\tonSearchEmployeesTable : function (oEvent) {\n\t\t\tthis._applySearchFilter( oEvent.getSource().getValue() );\n\t\t},\n\n\t\t_initViewSettingsDialog : function () {\n\t\t\tthis._oVSD = new ViewSettingsDialog(\"vsd\", {\n\t\t\t\tconfirm: function (oEvent) {\n\t\t\t\t\tvar oSortItem = oEvent.getParameter(\"sortItem\");\n\t\t\t\t\tthis._applySorter(oSortItem.getKey(), oEvent.getParameter(\"sortDescending\"));\n\t\t\t\t}.bind(this)\n\t\t\t});\n\n\t\t\t// init sorting (with simple sorters as custom data for all fields)\n\t\t\tthis._oVSD.addSortItem(new ViewSettingsItem({\n\t\t\t\tkey: \"EmployeeID\",\n\t\t\t\ttext: \"Employee ID\",\n\t\t\t\tselected: true\t\t\t// by default the MockData is sorted by EmployeeID\n\t\t\t}));\n\n\t\t\tthis._oVSD.addSortItem(new ViewSettingsItem({\n\t\t\t\tkey: \"FirstName\",\n\t\t\t\ttext: \"First Name\",\n\t\t\t\tselected: false\n\t\t\t}));\n\n\t\t\tthis._oVSD.addSortItem(new ViewSettingsItem({\n\t\t\t\tkey: \"LastName\",\n\t\t\t\ttext: \"Last Name\",\n\t\t\t\tselected: false\n\t\t\t}));\n\t\t},\n\n\t\t_applySearchFilter : function (sSearchQuery) {\n\t\t\tvar aFilters, oFilter, oBinding;\n\n\t\t\t// first check if we already have this search value\n\t\t\tif (this._sSearchQuery === sSearchQuery) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._sSearchQuery = sSearchQuery;\n\t\t\tthis.byId(\"searchField\").setValue(sSearchQuery);\n\n\t\t\t// add filters for search\n\t\t\taFilters = [];\n\t\t\tif (sSearchQuery && sSearchQuery.length > 0) {\n\t\t\t\taFilters.push(new Filter(\"FirstName\", FilterOperator.Contains, sSearchQuery));\n\t\t\t\taFilters.push(new Filter(\"LastName\", FilterOperator.Contains, sSearchQuery));\n\t\t\t\toFilter = new Filter({ filters: aFilters, and: false });  // OR filter\n\t\t\t} else {\n\t\t\t\toFilter = null;\n\t\t\t}\n\n\t\t\t// update list binding\n\t\t\toBinding = this._oTable.getBinding(\"items\");\n\t\t\toBinding.filter(oFilter, \"Application\");\n\t\t},\n\n\t\t/**\n\t\t * Applies sorting on our table control.\n\t\t * @param {string} sSortField\t\tthe name of the field used for sorting\n\t\t * @param {string} sortDescending\ttrue or false as a string or boolean value to specify a descending sorting\n\t\t * @private\n\t\t */\n\t\t_applySorter : function (sSortField, sortDescending){\n\t\t\tvar bSortDescending, oBinding, oSorter;\n\n\t\t\t// only continue if we have a valid sort field\n\t\t\tif (sSortField && this._aValidSortFields.indexOf(sSortField) > -1) {\n\n\t\t\t\t// convert  the sort order to a boolean value\n\t\t\t\tif (typeof sortDescending === \"string\") {\n\t\t\t\t\tbSortDescending = sortDescending === \"true\";\n\t\t\t\t} else if (typeof sortDescending === \"boolean\") {\n\t\t\t\t\tbSortDescending =  sortDescending;\n\t\t\t\t} else {\n\t\t\t\t\tbSortDescending = false;\n\t\t\t\t}\n\n\t\t\t\t// sort only if the sorter has changed\n\t\t\t\tif (this._sSortField && this._sSortField === sSortField && this._bSortDescending === bSortDescending) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._sSortField = sSortField;\n\t\t\t\tthis._bSortDescending = bSortDescending;\n\t\t\t\toSorter = new Sorter(sSortField, bSortDescending);\n\n\t\t\t\t// sync with View Settings Dialog\n\t\t\t\tthis._syncViewSettingsDialogSorter(sSortField, bSortDescending);\n\n\t\t\t\toBinding = this._oTable.getBinding(\"items\");\n\t\t\t\toBinding.sort(oSorter);\n\t\t\t}\n\t\t},\n\n\t\t_syncViewSettingsDialogSorter : function (sSortField, bSortDescending) {\n\t\t\t// the possible keys are: \"EmployeeID\" | \"FirstName\" | \"LastName\"\n\t\t\t// Note: no input validation is implemented here\n\t\t\tthis._oVSD.setSelectedSortItem(sSortField);\n\t\t\tthis._oVSD.setSortDescending(bSortDescending);\n\t\t}\n\n\t});\n\n});\n\n```\n\nFinally create the controller for the *Employee Overview* page in the `webapp/controller/employee/overview` folder. It basically sets up a `ViewSettingsDialog` to sort and filter the table of employees and implements event handlers for the search field and for the sorting of the table.\n\nThere is nothing special about this implementation. If you are interested in how to set up a table with sorting and filtering you can check the corresponding steps of the *Walkthrough* tutorial or the examples in the Demo Kit. We will mainly make use of the UI and the functionality for showing additional navigation and routing features. Therefore, we suggest copying the code and trying it out.\n\nOpen `webapp/index.html#/employees/overview` and check the new views. As you can see, the three views are wired together automatically by the router based on our configuration in the descriptor. In the top area of the page, you see a static text and below you see the table filled with data from our test service. The whole routing functionality that we see in this example is implemented by referencing two targets from one route.\n\nOf course, you can also search the table and change the sorting. When the sorting dialog opens, it creates a block layer so that the back button and other controls cannot be accessed. However, you can still use the back button of the browser. As you can see, the dialog is closed automatically by the router before navigating.\n\n> ### Note:  \n> The default behavior of the `sap.m` router is that all dialogs are closed when the hash changes \\(i.e. when calling `navTo`, `display` or pressing the back button of the browser\\). You can change this default behavior by calling `getTargetHandler().setCloseDialogs(false)` on the router or on the `Targets` object.\n\nHowever, we have one problem yet to solve: the search and table ordering are not bookmarkable. Fortunately, we have additional navigation features at hand and you will see how this works in the next steps\n\n\n\n## webapp/i18n/i18n.properties\n\n```ini\n...\nEmployeeOverview=Employee Overview\nShowEmployeeOverview=Show Employee Overview\n\nEmployeeOverviewTop=Employee Overview Top\n\nRegion=Region\nEmployeeID=Employee ID\nPhone=Phone\nEmployees=Employees\n```\n\nAdd the new texts to the `properties` file.\n\n**Related Information**  \n\n\n[API Reference: `sap.m.routing.TargetHandler`](https://ui5.sap.com/#/api/sap.m.routing.TargetHandler)\n\n",
  "excerpt": "<!-- loiob01840ec42ef48e6bfd2bc12612f501f --> Step 11: Assign Multiple Targets In this step, we will add a new button to the home page to illustrate the usage of multiple targets for a route. When the...",
  "wordCount": 1883,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}