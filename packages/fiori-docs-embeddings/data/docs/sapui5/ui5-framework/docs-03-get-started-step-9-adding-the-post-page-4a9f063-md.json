{
  "id": "sapui5-docs-03-get-started-step-9-adding-the-post-page-4a9f063-md",
  "title": "Step 9: Adding the *Post* Page",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-9-adding-the-post-page-4a9f063.md",
  "lastModified": "2025-09-01T18:17:10.486Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Adding",
    "the",
    "Post",
    "Page"
  ],
  "headers": [
    "Step 9: Adding the *Post* Page",
    "Preview",
    "Coding",
    "webapp/manifest.json",
    "webapp/view/Worklist.view.xml",
    "webapp/controller/Worklist.controller.js",
    "webapp/view/Post.view.xml \\(New\\)",
    "webapp/controller/Post.controller.js \\(New\\)"
  ],
  "content": "<!-- loio4a9f063d4a4143d5b5c10416677f04b6 -->\n\n# Step 9: Adding the *Post* Page\n\nNow that we have covered all kinds of tests for navigation, we introduce our *Post* page that shows details of a post in the bulletin board. To achieve this, we have to introduce a new view/controller pair and adjust the routing of the application.\n\n\n\n## Preview\n\n  \n  \n**The Post page with more details about the post**\n\n![](images/Tutorial_Testing_Step_09_38c810b.jpg \"The Post page with more details about the post\")\n\n\n\n## Coding\n\nYou can view and download all files in the *Samples* in the Demo Kit at [Testing - Step 9](https://ui5.sap.com/#/entity/sap.m.tutorial.testing/sample/sap.m.tutorial.testing.09).\n\n\n\n## webapp/manifest.json\n\n```js\n{\n\t\"_version\": \"1.12.0\",\n\t…\n\t\"sap.ui5\": {\n\t…\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.bulletinboard.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"async\": true\n\t\t\t},\n\t\t\t\"routes\": [\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\t\"name\": \"worklist\",\n\t\t\t\t\t\"target\": \"worklist\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"pattern\": \"Post/{postId}\",\n\t\t\t\t\t\"name\": \"post\",\n\t\t\t\t\t\"target\": \"post\"\n\t\t\t\t}\n\n\t\t\t],\n\t\t\t\"targets\": {\n\t\t\t\t\"worklist\": {\n\t\t\t\t\t\"name\": \"Worklist\",\n\t\t\t\t\t\"id\": \"worklist\",\n\t\t\t\t\t\"level\": 1\n\t\t\t\t},\n\t\t\t\t\"post\": {\n\t\t\t\t\t\"name\": \"Post\",\n\t\t\t\t\t\"id\": \"post\",\n\t\t\t\t\t\"level\": 2\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nWe have already used the `#/Posts/{postId}` hash in our tests and a view called the *Post* page, so we will now add a route and a target to the routing configuration of the descriptor with these patterns. It is simply defining a mandatory routing parameter `postId` that we fill with the ID from the model when navigating. The target configuration references a view called `Post` with a view level deeper than the home page. For more information, see the [Navigation and Routing Tutorial](navigation-and-routing-tutorial-1b6dcd3.md) tutorial.\n\n\n\n## webapp/view/Worklist.view.xml\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.bulletinboard.controller.Worklist\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:core=\"sap.ui.core\"\n\txmlns:semantic=\"sap.m.semantic\">\n\t<semantic:FullscreenPage\n\t\tid=\"page\"\n\t\ttitle=\"{i18n>worklistViewTitle}\">\n\t\t<semantic:content>\n\t\t\t<Table …>\n\t\t\t\t…\n\t\t\t\t<items>\n\t\t\t\t\t<ColumnListItem\n\t\t\t\t\t\tvAlign=\"Middle\"\n\t\t\t\t\t\ttype=\"Navigation\"\n\t\t\t\t\t\tpress=\".onPress\">\n\t\t\t\t\t\t…\n\t\t\t\t\t</ColumnListItem>\n\t\t\t\t</items>\n\t\t\t</Table>\n\t\t</semantic:content>\n\t\t…\n\t</semantic:FullscreenPage>\n</mvc:View>\n```\n\nWe configure the table items to be of type `Navigation`, so a user can trigger the navigation by choosing an item. When a `press` event is triggered, the `onPress` handler is called to navigate to the *Post* page.\n\n\n\n## webapp/controller/Worklist.controller.js\n\n```js\nsap.ui.define([\n    './BaseController',\n    'sap/ui/model/json/JSONModel',\n    '../model/formatter',\n    '../model/FlaggedType',\n    'sap/m/library'\n], function(BaseController, JSONModel, formatter, FlaggedType, mobileLibrary) {\n\t\"use strict\";\n\n\treturn BaseController.extend(\"sap.ui.demo.bulletinboard.controller.Worklist\", {\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\n\t\t\n\t\t/**\n\t\t * Event handler when a table item gets pressed\n\t\t * @param {sap.ui.base.Event} oEvent the table selectionChange event\n\t\t * @public\n\t\t */\n\t\tonPress: function (oEvent) {\n\t\t\tthis.getRouter().navTo(\"post\", {\n\t\t\t\t// The source is the list item that got pressed\n\t\t\t\tpostId: oEvent.getSource().getBindingContext().getProperty(\"PostID\")\n\t\t\t});\n\n\t  });\n});\n```\n\nThe `press` handler function instructs the `router` to navigate to the `post` pattern with the `PostID` from the binding context of the currently selected item. This fills the mandatory URL parameter, navigates to the `post` page, and updates the hash automatically.\n\n\n\n## webapp/view/Post.view.xml \\(New\\)\n\n```xml\n<mvc:View\n\t\tcontrollerName=\"sap.ui.demo.bulletinboard.controller.Post\"\n\t\txmlns=\"sap.m\"\n\t\txmlns:mvc=\"sap.ui.core.mvc\"\n\t\txmlns:semantic=\"sap.m.semantic\">\n\t<semantic:FullscreenPage\n\t\t\tid=\"page\" \n\t\t\tbusy=\"{postView>/busy}\"\n\t\t\tbusyIndicatorDelay=\"0\"\n\t\t\tnavButtonPress=\".onNavBack\"\n\t\t\tshowNavButton=\"true\"\n\t\t\ttitle=\"{i18n>objectTitle}\">\n\t\t<semantic:content>\n\t\t\t<ObjectHeader\n\t\t\t\t\tid=\"objectHeader\"\n\t\t\t\t\ttitle=\"{Title}\"\n\t\t\t\t\tnumber=\"{\n\t\t\t\t\t\tpath: 'Price',\n\t\t\t\t\t\tformatter: '.formatter.numberUnit'\n\t\t\t\t\t}\"\n\t\t\t\t\tnumberUnit=\"{Currency}\"\n\t\t\t\t\tbackgroundDesign=\"Translucent\">\n\t\t\t</ObjectHeader>\n\t\t</semantic:content>\n\t</semantic:FullscreenPage>\n</mvc:View>\n```\n\nWe provide a minimalistic detail page showing only some fields of the selected post for now. In the test we use the following information:\n\n-   Control with the ID `page` on this view\n\n-   `title` of the post we navigate to\n\n-   *Back* button to navigate back to the home page\n\n\n\n\n## webapp/controller/Post.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n\t'./BaseController',\n\t'sap/ui/model/json/JSONModel',\n\t'../model/formatter'\n], function (BaseController, JSONModel, formatter) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.bulletinboard.controller.Post\", {\n\t\tformatter: formatter,\n\t\t/* =========================================================== */\n\t\t/* lifecycle methods                                           */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Called when the worklist controller is instantiated.\n\t\t * @public\n\t\t */\n\t\tonInit: function () {\n\t\t\t// Model used to manipulate control states. The chosen values make sure,\n\t\t\t// detail page is busy indication immediately so there is no break in\n\t\t\t// between the busy indication for loading the view's meta data\n\t\t\tvar oViewModel = new JSONModel({\n\t\t\t\t\tbusy: false\n\t\t\t\t});\n\t\t\tthis.getRouter().getRoute(\"post\").attachPatternMatched(this._onPostMatched, this);\n\t\t\tthis.setModel(oViewModel, \"postView\");\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* event handlers                                              */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Navigates back to the worklist\n\t\t * @function\n\t\t */\n\t\tonNavBack: function () {\n\t\t\tthis.myNavBack(\"worklist\");\n\t\t},\n\t\t/* =========================================================== */\n\t\t/* internal methods                                            */\n\t\t/* =========================================================== */\n\t\t/**\n\t\t * Binds the view to the post path.\n\t\t *\n\t\t * @function\n\t\t * @param {sap.ui.base.Event} oEvent pattern match event in route 'object'\n\t\t * @private\n\t\t */\n\t\t_onPostMatched: function (oEvent) {\n\t\t\tvar oViewModel = this.getModel(\"postView\"),\n\t\t\t\toDataModel = this.getModel();\n\t\t\tthis.getView().bindElement({\n\t\t\t\tpath: \"/Posts('\" + oEvent.getParameter(\"arguments\").postId + \"')\",\n\t\t\t\tevents: {\n\t\t\t\t\tdataRequested: function () {\n\t\t\t\t\t\toDataModel.metadataLoaded().then(function () {\n\t\t\t\t\t\t\t// Busy indicator on view should only be set if metadata is loaded,\n\t\t\t\t\t\t\t// otherwise there may be two busy indications next to each other on the\n\t\t\t\t\t\t\t// screen. This happens because route matched handler already calls '_bindView'\n\t\t\t\t\t\t\t// while metadata is loaded.\n\t\t\t\t\t\t\toViewModel.setProperty(\"/busy\", true);\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function () {\n\t\t\t\t\t\toViewModel.setProperty(\"/busy\", false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n});\n```\n\nThe controller of the `Post` page needs to take care of the data binding when a navigation event has happened. In the `init` function of the controller we define a local view model and attach to the `routing` event. When the `routing` event is triggered, we bind the view to the post with the specified ID.\n\n",
  "excerpt": "<!-- loio4a9f063d4a4143d5b5c10416677f04b6 --> Step 9: Adding the Post Page Now that we have covered all kinds of tests for navigation, we introduce our Post page that shows details of a post in the bu...",
  "wordCount": 821,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}