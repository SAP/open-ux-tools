{
  "id": "sapui5-docs-07-apf-consuming-apf-0109e67-md",
  "title": "Consuming APF",
  "category": "ui5-framework",
  "path": "docs/07_APF/consuming-apf-0109e67.md",
  "lastModified": "2025-09-01T18:17:10.665Z",
  "tags": [
    "ui5-framework",
    "md",
    "Consuming",
    "APF"
  ],
  "headers": [
    "Consuming APF",
    "Footer Content",
    "Creating Filters for the Footer Content",
    "Security Considerations"
  ],
  "content": "<!-- loio0109e67712bc4966bfa8922909e92a87 -->\n\n# Consuming APF\n\nThe following code snippet is an example of how to consume APF in an SAPUI5-based application:\n\n```\n\nsap.ui.define(\"myApp.Component\", [\n\t\"sap/apf/base/Component\"\n], function(ApfComponent){\n\t'use strict';\n\treturn ApfComponent.extend(\"myApp.Component\", \n\t{\n\t\tmetadata : {\n\t\t\t\"name\" : <name>,\n\t\t\t\"manifest\" : \"json\",\n\t\t\t\"version\" : <version>\n\t\t},\n\t\t/**\n\t\t* Initialize the application\n\t\t*\n\t\t* @returns \n\t\t*/\n\t\tinit : function() {\n\t\t\t// Initialize application here. No APF specific operation done here, since APF API is not yet available.\n\t\t\t// Call APF Component init\n\t\t\tApfComponent.prototype.init.apply(this, arguments);\n\t\t},\n\t\t/**\n\t\t* Creates the application layout and returns the outer layout of APF \n\t\t*\n\t\t* @returns {sap.ui.core.Control} the content\n\t\t*/ \n\t\tcreateContent : function() {\n\t\t\t// Attach APF start-up callbacks\n\t\t\tthis.getApi().setCallbackBeforeApfStartup(this.onBeforeApfStartup);\n\t\t\tthis.getApi().setCallbackAfterApfStartup(this.onAfterApfStartup);\n \n\t\t\t// Return whatever is returned by parent (APF Component) createContent method\n\t\t\treturn ApfComponent.prototype.createContent.apply(this, arguments);\n\t\t},\n\t\tonBeforeApfStartup: function() {       //optional\n\t\t\t// Code executed before APF startup\n\t\t},\n \n\t\tonAfterApfStartup: function() {        //optional\n\t\t\t// Code executed after APF startup\n\t\t},\n\t\tdestroy : function() {\n\t\t\t// Destroy application instances\n \n\t\t\t// Call destroy on APF Component\n\t\t\tApfComponent.prototype.destroy.apply(this, arguments);\n\t\t}\n\t});\n}); \n        \n```\n\nReplace *myApp* with the application-specific namespace.\n\nMethod `this.getApi()` provides a reference to the APF instance.\n\nThe function registered through `onBeforeApfStartup` is executed after the execution of method `init()`, at the beginning of method `createContent()` of `sap.apf.base.Component`. This registered function is useful, for example, for defining application-specific filters.\n\nThe function registered through `onAfterApfStartup` is executed after all asynchronous startup operations have been terminated, that is, at the end of method `createContent()` of `sap.apf.base.Component`. This registered function is useful, for example, for adding footer content to the APF UI.\n\n\n\n## Footer Content\n\nYou can add footer content to your APF-based application, for example, to allow users to make settings such as defining a reporting currency or adjusting the exchange rate settings.\n\nTo add footer content, attach the following APF start-up callbacks at APF API level in the `Component.js` file inside the `createContent()` method:\n\n1.  `setCallbackBeforeApfStartup`, where you can build footer controls.\n\n2.  `setCallbackAfterApfStartup`, where you can insert the footer content into the UI layout using the `addMasterFooterContent` API.\n\n\nFooter controls need to register a listener to the `contextChanged` event of APF to listen to context changes at startup or when a saved path is opened. The event listener for the `contextChanged` event is defined as follows: `oApi.setEventCallback(oApi.constants.eventTypes.contextChanged,fnCallbackForContextChange);`\n\nApart from the `contextChanged` event, you can also register the following events for `setEventCallback`:\n\n-   `printTrigerred` \\(to implement a specific formatting for a print page\\)\n\n-   `format` \\(to implement a specific formatting for an entire application\\)\n\n\n\n\n### Creating Filters for the Footer Content\n\nTo ensure that the filters you create as footer content are recognized by APF, create them in the following format:\n\n```\nvar oFilter = this.oApi.createFilter();\nvar orExpression = oFilter.getTopAnd().addOr();\norExpression.addExpression({\n    name : \"<name>\",\n    operator : \"<operator>\",\n    value : \"<value>\",\n  });\n```\n\nFor example, if you want to configure a filter for the exchange rate type, the filter expression looks as follows:\n\n```\norExpression.addExpression({\n    name : \"P_ExchangeRateType\",\n    operator : \"EQ\",\n    value : \"USD\", \n  });\n```\n\nUse the API `addPathFilter()` to ensure that the created filter is applied to the analysis path. When the API `addPathFilter()` is called with the filter created above as a parameter, it returns an ID. The filter can be updated using the API `updatePathFilter()` by passing the filter ID and the filter as parameters:\n\n```\nvar sFilterId = this.oApi.addPathFilter(oFilter);\nthis.oApi.updatePathFilter(sFilterId, oFilter);\n\n```\n\nTo retrieve the filter that was applied to the analysis path, use the API getPathFilter\\(\\) and pass the filter ID as a parameter:\n\n```\nvar oFilter = this.oApi.getPathFilter(sFilterId);\nvar sValue = oFilter.getInternalFilter().getFilterTerms()[0].getValue();\n\n```\n\n\n\n## Security Considerations\n\nFor any application extension, ensure that both the extension and its libraries are trustworthy.\n\n**Related Information**  \n\n\n[Components](../04_Essentials/components-958ead5.md \"Components are independent and reusable parts used in SAPUI5 applications.\")\n\n[Descriptor \\(manifest.json\\)](descriptor-manifest-json-74038a5.md \"\")\n\n",
  "excerpt": "<!-- loio0109e67712bc4966bfa8922909e92a87 --> Consuming APF The following code snippet is an example of how to consume APF in an SAPUI5-based application: ` sap.ui.define(\"myApp.Component\", [ \t\"sap/ap...",
  "wordCount": 622,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}