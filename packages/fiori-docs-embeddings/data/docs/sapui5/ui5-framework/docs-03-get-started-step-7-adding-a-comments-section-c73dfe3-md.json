{
  "id": "sapui5-docs-03-get-started-step-7-adding-a-comments-section-c73dfe3-md",
  "title": "Step 7: Adding a Comments Section",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-7-adding-a-comments-section-c73dfe3.md",
  "lastModified": "2025-09-01T18:17:10.480Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Adding",
    "Comments",
    "Section"
  ],
  "headers": [
    "Step 7: Adding a Comments Section",
    "Preview",
    "Coding",
    "webapp/view/Object.view.xml \\[MODIFY\\]",
    "webapp/controller/Object.controller.js \\[MODIFY\\]",
    "webapp/model/models.js \\[MODIFY\\]",
    "webapp/Component.js \\[MODIFY\\]",
    "webapp/i18n/i18n.properties \\[MODIFY\\]",
    "Summary"
  ],
  "content": "<!-- loioc73dfe312f104664954749c5c36faf27 -->\n\n# Step 7: Adding a Comments Section\n\nIn this step, we extend the product detail view by adding a feature allowing to add comments to the product.\n\n\n\n## Preview\n\n  \n  \n**Comments section added to the detail page**\n\n![](images/Tutorial_Worklist_Step_7_Preview_a517fe5.png \"Comments section added to the detail page\")\n\n\n\n## Coding\n\nYou can view and download all files in the *Samples* in the Demo Kit at [Worklist App - Step 7](https://ui5.sap.com/#/entity/sap.m.tutorial.worklist/sample/sap.m.tutorial.worklist.07) .\n\n\n\n### webapp/view/Object.view.xml \\[MODIFY\\]\n\n```xml\n\n<mvc:View\n    controllerName=\"mycompany.myapp.MyWorklistApp.controller.Object\"\n    xmlns=\"sap.m\"\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:semantic=\"sap.f.semantic\"\n    xmlns:form=\"sap.ui.layout.form\"\n    xmlns:l=\"sap.ui.layout\">\n\n...\n\n        <semantic:content>\n            <l:VerticalLayout width=\"100%\">\n            <Panel\n                backgroundDesign=\"Transparent\"\n                headerText=\"{i18n>ObjectSupplierTabTitle}\">\n\n...\n            </Panel>\n                <Panel\n                    backgroundDesign=\"Transparent\"\n                    headerText=\"{i18n>ObjectCommentsTabTitle}\">\n                    <content>\n                        <FeedInput post=\".onPost\"/>\n                        <List\n                            id=\"idCommentsList\"\n                            noDataText=\"{i18n>ObjectCommentNoData}\"\n                            showSeparators=\"Inner\"\n                            items=\"{\n                                path: 'productFeedback>/productComments',\n                                sorter: {\n                                    path: 'date',\n                                    descending: true\n                                }\n                            }\">\n                            <FeedListItem\n                                info=\"{productFeedback>type}\"\n                                text=\"{productFeedback>comment}\"\n                                timestamp=\"{productFeedback>date}\"/>\n                        </List>\n                    </content>\n                </Panel>\n            </l:VerticalLayout>\n        </semantic:content>\n```\n\nBelow the already existing panel, we add another panel that will serve as a container for our comments section. We put both panels inside a vertical layout, because `sap.f.semanticPage` allows only one control for content aggregation. Within the new panel, we add a `sap.m.FeedInput` control and attach an event handler `onPost` for the `post` event. This control will render an input field and a button, which allow users to post comments. The event handler we registered will be implemented below.\n\nBelow the `FeedInput` control, we add a list with all existing comments. The `items` aggregation of the list is bound to the `/productComments` property of the named model `productFeedback` that we will create below. All comments shall be displayed in descending order based on their publishing date. Therefore, we also configure a sorter for our items in the list.\n\nThe template for each row is a `FeedListItem` control. We configure the `FeedListItem` to simply display the date of the post, the text of the post itself, and the type of the post.\n\n\n\n### webapp/controller/Object.controller.js \\[MODIFY\\]\n\n```js\n...\n/*global location*/\nsap.ui.define([\n   \"myCompany/myApp/controller/BaseController\",\n   \"sap/ui/model/json/JSONModel\",\n   \"sap/ui/core/routing/History\",\n   \"myCompany/myApp/model/formatter\",\n   \"sap/ui/core/date/UI5Date\",\n   \"sap/ui/core/format/DateFormat\",\n   \"sap/ui/model/Filter\",\n   \"sap/ui/model/FilterOperator\"\n], function(BaseController, JSONModel, History, formatter, UI5Date, DateFormat, Filter, FilterOperator) {\n   \"use strict\";\n   return BaseController.extend(\"myCompany.myApp.controller.Object\", {\n      formatter: formatter,\n      ...\n      _onBindingChange: function(oEvent) {\n         ...\n         // Update the comments in the list\n         var oList = this.byId(\"idCommentsList\");\n         var oBinding = oList.getBinding(\"items\");\n         oBinding.filter(new Filter(\"productID\", FilterOperator.EQ, sObjectId));\n      },\n      /**\n      * Updates the model with the user comments on Products.\n      * @function\n      * @param {sap.ui.base.Event} oEvent object of the user input\n      */\n      onPost: function (oEvent) {\n         var oFormat = DateFormat.getDateTimeInstance({style: \"medium\"});\n         var sDate = oFormat.format(UI5Date.getInstance());\n         var oObject = this.getView().getBindingContext().getObject();\n         var sValue = oEvent.getParameter(\"value\");\n         var oEntry = {\n             productID: oObject.ProductID,\n             type: \"Comment\",\n             date: sDate,\n             comment: sValue\n         };        \n         // update model\n         var oFeedbackModel = this.getModel(\"productFeedback\");\n         var aEntries = oFeedbackModel.getData().productComments;\n         aEntries.push(oEntry);\n         oFeedbackModel.setData({\n            productComments : aEntries\n         });\n      }\n   });\n});\n```\n\nFirst, we add three new dependencies to the controller. We need these dependencies because we want to create a filter for the list and because we format the date and time of each post.\n\nWhenever the binding of the detail view changes, we want to make sure that the comments for the current product are displayed. Therefore, we change the private function `_onBindingChange` and update the filter of the list that displays the comments by getting a reference to the binding of the `items` aggregation of our list and calling the `filter()` API afterwards. The filter is passed on to the `filter()` API. We use the `productID` as filter criterion, because we only want comments for a specific product.\n\nNext, the event handler for the `post` event of the `FeedInput` is implemented. In the `onPost` handler, we create a new `entry` object that contains all data we want to store in our model. This data is the `productId`, the `type` of the post \\(hard-coded in our example\\), the current `date` in a medium date format, and the `comment` itself. The comment is retrieved from the event object. The `productId` is determined by calling `getObject()` on the view's binding context.\n\nFinally, the new entry is added to the named model called `productFeedback`. This model does not exist yet, so let's create it next.\n\n\n\n### webapp/model/models.js \\[MODIFY\\]\n\n```js\nsap.ui.define([\n   \"sap/ui/model/json/JSONModel\",\n   \"sap/ui/Device\"\n], function(JSONModel, Device) {\n   \"use strict\";\n   return {\n      createDeviceModel: function() {\n         var oModel = new JSONModel(Device);\n         oModel.setDefaultBindingMode(\"OneWay\");\n         return oModel;\n      },   \n      createCommentsModel: function() {\n         return new JSONModel({ productComments : [] });\n      }\n   };\n});\n```\n\nIn both the object view \\(detail page\\) as well as in the corresponding controller we used a named model called `productFeedback`. In our example this model is a simple `JSONModel`. It is created in the function `createCommentsModel()` in the`model.js` file. As you can see above, the function simply returns a new instance of a `JSONModel` with a simple data object. The property `productComments` is an empty array and it will be updated every time someone posts a new comment.\n\nHowever, this model is not yet accessible throughout our app. Let's fix this next.\n\n\n\n### webapp/Component.js \\[MODIFY\\]\n\n```js\nsap.ui.define([\n   \"sap/ui/core/UIComponent\",\n   \"sap/ui/Device\",\n   \"./model/models\",\n   \"./controller/ErrorHandler\"\n], function(UIComponent, Device, models, ErrorHandler) {\n   \"use strict\";\n   return UIComponent.extend(\"myCompany.myApp.Component\", {\n      ...\n      init: function() {\n         // call the base component's init function\n         UIComponent.prototype.init.apply(this, arguments);\n\n         // initialize the error handler with the component\n         this._oErrorHandler = new ErrorHandler(this);\n\n         // set the device model\n         this.setModel(models.createDeviceModel(), \"device\");\n         \n         // set the product feedback model\n         this.setModel(models.createCommentsModel(), \"productFeedback\");\n\n\n         // create the views based on the url/hash\n         this.getRouter().initialize();\n      },\n      ...\n   });\n});\n```\n\nNow it's time to make the named model `productFeedback` available to our app. Therefore, just change the `init` function of our `Component.js` file by calling our `createCommentsModel()` method and setting the returned model on the component. After this, our model is accessible in our app.\n\n\n\n### webapp/i18n/i18n.properties \\[MODIFY\\]\n\n```ini\n...\n#Comments tab title\nObjectCommentsTabTitle=Comments\n\n#No comments text\nObjectCommentNoData=No Comments\n\n\n#~~~ Footer Options ~~~~~~~~~~~~~~~~~~~~~~~\n...\n```\n\nNow add the new texts to our `i18n.properties` file and you're done.\n\nYou can test the new features by navigating to the details page of any given product. After that, just create a new comment for that product and post it.\n\n\n\n<a name=\"loioc73dfe312f104664954749c5c36faf27__section_jvq_kgt_qbb\"/>\n\n## Summary\n\nBased on the initial app you have seen how easy it can be to generate or download initial code and to extend it according to your own requirements. This tutorial also illustrated how to communicate easily with an OData back end using the OData V2 model. Furthermore, it illustrated how to use the mock server with both generated mock data and more realistic data.\n\n",
  "excerpt": "<!-- loioc73dfe312f104664954749c5c36faf27 --> Step 7: Adding a Comments Section In this step, we extend the product detail view by adding a feature allowing to add comments to the product. Preview    ...",
  "wordCount": 1034,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}