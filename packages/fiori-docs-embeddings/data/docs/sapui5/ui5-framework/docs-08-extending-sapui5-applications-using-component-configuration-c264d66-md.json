{
  "id": "sapui5-docs-08-extending-sapui5-applications-using-component-configuration-c264d66-md",
  "title": "Using Component Configuration",
  "category": "ui5-framework",
  "path": "docs/08_Extending_SAPUI5_Applications/using-component-configuration-c264d66.md",
  "lastModified": "2025-09-01T18:17:10.672Z",
  "tags": [
    "ui5-framework",
    "md",
    "Using",
    "Component",
    "Configuration"
  ],
  "headers": [
    "Using Component Configuration"
  ],
  "content": "<!-- loioc264d66d6e3c4104818bc52c174a000c -->\n\n# Using Component Configuration\n\nSAPUI5 supports the extension of a base controller by merging the delivered standard controller with a custom controller on JavaScript object level.\n\nSAPUI5 supports two different extension variants. The latest and recommended variant is called [Controller Extension](../04_Essentials/using-controller-extension-21515f0.md). The old variant called **Component Configuration** is described on the following pages.\n\nThe SAPUI5 Component Configuration concept does not support hierarchical inheritance of methods within a chain of controllers. Instead, methods of the custom controller override any methods of the standard controller with the same name. The following controller lifecycle methods are, however, an exception to this rule: `onInit`, `onExit`, `onBeforeRendering`, `onAfterRendering`. For these methods, the controller methods of your custom application are called either after \\(for `onInit` and `onAfterRendering`\\), or before \\(for `onExit` and `onBeforeRendering`\\) the standard lifecycle methods.\n\n> ### Restriction:  \n> When using the SAPUI5 Component Configuration concept, only the standard controller can be extended, but a custom controller can **not** be extended again. Only one level of controller extension is allowed; nested controller extension is not supported. We recommend using the more recent [Controller Extension](../04_Essentials/using-controller-extension-21515f0.md) approach for such a use case.\n\nThe following examples show how the Component Configuration concept in SAPUI5 works. The following code snippet shows the standard controller `Main.controller.js` of the delivered standard application:\n\n```js\nsap.ui.define([\"sap/ui/core/mvc/Controller\"], function(Controller) {\n    \"use strict\";\n    return Controller.extend(\"samples.components.ext.sap.Main\", {\n        onInit : function () {\n            console.log(\"samples.components.ext.sap.Main - onInit\");\n        },\n\n        doSomething: function() {\n            alert(\"this is an original standard action\");\n        },\n\n        doSomeStandardAction: function() {\n            alert(\"this is another original standard action\");\n        }\n    });\n});\n```\n\nThe controller extension must not be typed as a controller, but as a plain object. If you prefer to use typed controllers, you can follow the [Controller Replacement](controller-replacement-b0b14bf.md) approach. The following code snippet represents the custom controller `CustomMain.controller.js`:\n\n```js\nsap.ui.define([], function() {\n    \"use strict\";\n    return {\n       onInit : function () {\n            console.log(\"samples.components.ext.customer.CustomMain - onInit\");\n        },\n\n        doSomething: function() {\n            alert(\"this is a customer action\");\n        },\n\n        doSomeCustomAction: function() {\n            alert(\"this is another customer action\");\n        }\n    };\n});\n```\n\nThe following extension in component configuration merges the two controllers:\n\n```js\nextensions: {  \n    \"sap.ui.controllerExtensions\": {\n        \"samples.components.ext.sap.Main\": {\n            controllerName: \"samples.components.ext.customer.CustomMain\"\n        }\n        }\n    // .....some more content\n}\n```\n\nAs a result, the `samples.components.ext.customer.CustomMain` controller functions are merged when the controller `samples.components.ext.sap.Main` is called. After initialization, the log contains the following messages:\n\n```\nsamples.components.ext.sap.Main - onInit\nsamples.components.ext.customer.CustomMain - onInit\n```\n\nThe `doSomething` method of the new controller overwrites the `doSomething` method of the standard controller. Thus, if the method is invoked, an alert popup with the following text appears: *this is a customer action*.\n\nThe `doSomeStandardAction` method remains available without changes, as no method with the same name exists in the new controller.\n\nThe `doSomeCustomAction` method is additionally available and you can use it, for example, in a view extension.\n\n",
  "excerpt": "<!-- loioc264d66d6e3c4104818bc52c174a000c --> Using Component Configuration SAPUI5 supports the extension of a base controller by merging the delivered standard controller with a custom controller on ...",
  "wordCount": 461,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}