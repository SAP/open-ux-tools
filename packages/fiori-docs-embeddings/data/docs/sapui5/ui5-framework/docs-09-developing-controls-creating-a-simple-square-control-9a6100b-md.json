{
  "id": "sapui5-docs-09-developing-controls-creating-a-simple-square-control-9a6100b-md",
  "title": "Creating a Simple Square Control",
  "category": "ui5-framework",
  "path": "docs/09_Developing_Controls/creating-a-simple-square-control-9a6100b.md",
  "lastModified": "2025-09-01T18:17:10.674Z",
  "tags": [
    "ui5-framework",
    "md",
    "Creating",
    "Simple",
    "Square",
    "Control"
  ],
  "headers": [
    "Creating a Simple Square Control"
  ],
  "content": "<!-- loio9a6100ba15564561b5439b7e7ba554a9 -->\n\n# Creating a Simple Square Control\n\nExample of a simple `Square` control that is rendered as a red square with text inside that pops up an alert when clicked\n\n```js\n\n// \"Control\" required from \"sap/ui/core/Control\"\nvar Square = Control.extend(\"my.Square\", { // call the new Control type \"my.Square\" and let it inherit\n                                           // from sap.ui.core.Control\n\n      // the Control API:\n      metadata : {\n          properties : {           // setter and getter are created behind the scenes, \n                                   // incl. data binding and type validation\n              \"text\" : \"string\",   // in simple cases, just define the type\n              \"size\" : {type: \"sap.ui.core.CSSSize\", defaultValue: \"200px\"} \n                                   // you can also give a default value and more\n          }\n      },\n      \n\n      // the part creating the HTML:\n      renderer : {      \n          apiVersion: 2,\n          render: function(oRm, oControl) {    // static function, so use the given \"oControl\" instance\n                                               // instead of \"this\" in the render function\n              oRm.openStart(\"div\", oControl);  // creates the root element incl. the Control ID and enables event handling - important!\n              oRm.style(\"width\", oControl.getSize());  // write the Control property size; the Control has validated it to be a CSS size\n              oRm.style(\"height\", oControl.getSize());\n              oRm.class(\"mySquare\");           // add a CSS class for styles common to all Control instances\n              oRm.openEnd();                   // this call writes the above class plus enables support \n                                               // for Square.addStyleClass(...)\n              oRm.text(oControl.getText());    // write another Control property, with protection against cross-site-scripting\n              oRm.close(\"div\");\n          }\n      },\n\n\n      // an event handler:\n      onclick : function(evt) {   // is called when the Control's area is clicked - no event registration required\n          alert(\"Control clicked! Text of the Control is:\\n\" + this.getText());\n      }\n  });\n```\n\nThe information for the visual appearance can be written to the control HTML in the `render` method in the same way as the instance-specific width and height. We recommend, however, to define style information that is common to all control instances in a CSS file or in a <style\\> tag. Thus, it is only written once and can be easily modified by the application.\n\nIn general, however, when controls need their own CSS and are also supposed to participate in the theming concept, it is recommended not to use on-the-fly controls, but to create real control libraries. Those take care of loading the CSS, providing right-to-left support, and so on.\n\nTo add a grey background, a red border and some alignment information, use the following code:\n\n```cs\n\n<style>\n    .mySquare {                  /* style the CSS class that has been written by the renderer method */\n        display: inline-block;   /* enable squares to appear next to each other within one line */\n        border: 1px solid red;   /* add some border, so the square can actually be seen */\n        background-color: #ddd;\n        padding: 8px;\n        text-align: center;\n        -moz-box-sizing: border-box; /* consider padding+border part of the width/height */\n        box-sizing: border-box;\n    }\n</style>\n```\n\nThis custom control can now be used like any SAPUI5 control:\n\n```js\n\n// \"Square\" required from \"my/Square\"\nvar myControl = new Square({text:\"Hello\", size: \"100px\"});\nmyControl.placeAt(\"content\");\n```\n\n",
  "excerpt": "<!-- loio9a6100ba15564561b5439b7e7ba554a9 --> Creating a Simple Square Control Example of a simple Square control that is rendered as a red square with text inside that pops up an alert when clicked `...",
  "wordCount": 478,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}