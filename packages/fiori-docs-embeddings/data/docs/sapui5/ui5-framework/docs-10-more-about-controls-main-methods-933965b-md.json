{
  "id": "sapui5-docs-10-more-about-controls-main-methods-933965b-md",
  "title": "Main Methods",
  "category": "ui5-framework",
  "path": "docs/10_More_About_Controls/main-methods-933965b.md",
  "lastModified": "2025-09-01T18:17:10.694Z",
  "tags": [
    "ui5-framework",
    "md",
    "Main",
    "Methods"
  ],
  "headers": [
    "Main Methods"
  ],
  "content": "<!-- loio933965ba8c0440308e1e3233be7bc52f -->\n\n# Main Methods\n\nOverview of the two main methods used in the `sap.f.FlexibleColumnLayoutSemanticHelper` class.\n\n**`getCurrentUIState()`**\n\nThis method returns an object, providing the following detailed information about the current state of the `FlexibleColumnLayout`:\n\n-   The current layout of the control\n\n-   The relative sizes and visibility of the control's columns\n\n-   Whether the control currently displays a page in fullscreen \\(and is fullscreen explicitly set, or is this due to device size constraints?\\)\n\n-   What action buttons the app should display, in which column, and what control layout appears when these buttons are chosen\n\n\nThe example below shows a sample value of the `actionButtonsInfo` field of this object:\n\n```\n\"actionButtonsInfo\":{\n       \"midColumn\":{\n         \"fullScreen\":null,\n         \"exitFullScreen\":null,\n         \"closeColumn\":null\n       },\n       \"endColumn\":{\n         \"fullScreen\":\"EndColumnFullScreen\",\n         \"exitFullScreen\":null,\n         \"closeColumn\":\"TwoColumnsBeginExpanded\"\n       }\n   }\n\n```\n\nThis means that currently the app should not display any action buttons in the `Mid` column. In the `End` column however, there should be two action buttons – *Fullscreen* and *Close*. If the user chooses the *Fullscreen* button, the layout should change to `EndColumnFullScreen`, and if the user chooses the *Close* button, the layout should change to `TwoColumnsBeginExpanded`.\n\n**`getNextUIState(iNextLevel)`**\n\nThis method tells you to what layout the control should transition, and what kinds of action buttons would be displayed to represent a different logical level. The argument `iNextLevel` is a zero-based int. 0 stands for the initial logical level, 1 - for list and detail, 2 - for list, detail, and detail-detail, 3 and above – for the subsequent logical levels.\n\nIf the current layout is `OneColumn` \\(only the `Begin` column is displayed\\), and the user selects an item from it, both list and detail should be displayed. To determine the recommended layout to display them, call `getNextUIState(1)`. It will return an object with a layout field with value `TwoColumnsBeginExpanded`. Later, if the user selects an item from the `Mid` column, call `getNextUIState(2)` to determine the layout to use for the detail-detail level. Alternatively, if the user choses an item in the `Begin` column, call again `getNextUIState(1)` to determine the proper two-column layout to switch to.\n\nNote that the `getNextUIState` method is not static – its return value depends on the current state of the control. For example, calling `getNextUIState(2)` will return `ThreeColumnsMidExpanded` if currently a two-column layout is displayed, but `EndColumnFullScreen` - if a fullscreen layout is displayed, etc.\n\n**Related Information**  \n\n\n[API Reference: `sap.f.FlexibleColumnLayoutSemanticHelper`](https://ui5.sap.com/#/api/sap.f.FlexibleColumnLayoutSemanticHelper)\n\n",
  "excerpt": "<!-- loio933965ba8c0440308e1e3233be7bc52f --> Main Methods Overview of the two main methods used in the sap.f.FlexibleColumnLayoutSemanticHelper class. getCurrentUIState() This method returns an objec...",
  "wordCount": 390,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}