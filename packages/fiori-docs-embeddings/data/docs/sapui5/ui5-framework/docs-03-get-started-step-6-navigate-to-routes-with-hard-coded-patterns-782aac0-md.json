{
  "id": "sapui5-docs-03-get-started-step-6-navigate-to-routes-with-hard-coded-patterns-782aac0-md",
  "title": "Step 6: Navigate to Routes with Hard-Coded Patterns",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-6-navigate-to-routes-with-hard-coded-patterns-782aac0.md",
  "lastModified": "2025-09-01T18:17:10.479Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Navigate",
    "Routes",
    "with",
    "Hard",
    "Coded",
    "Patterns"
  ],
  "headers": [
    "Step 6: Navigate to Routes with Hard-Coded Patterns",
    "Preview",
    "Coding",
    "webapp/view/Home.view.xml",
    "webapp/controller/Home.controller.js",
    "webapp/manifest.json",
    "webapp/view/employee/EmployeeList.view.xml \\(New\\)",
    "webapp/controller/employee/EmployeeList.controller.js \\(New\\)",
    "webapp/i18n/i18n.properties"
  ],
  "content": "<!-- loio782aac08f2de4003a2fcbdd39d27f374 -->\n\n# Step 6: Navigate to Routes with Hard-Coded Patterns\n\nIn this step, we'll create a second button on the home page, with which we can navigate to a simple list of employees. This example illustrates how to navigate to a route that has a hard-coded pattern.\n\n\n\n## Preview\n\n  \n  \n**Show Employee List button on the Home page**\n\n![](images/Tutorial_Navigation_and_Routing_Step_06a_f0f4fd7.png \"Show Employee List button on the\n\t\t\t\t\t\tHome page\")\n\n  \n  \n**Employee list with Back button**\n\n![](images/Tutorial_Navigation_and_Routing_Step_06b_f45ee74.png \"Employee list with Back button\")\n\n\n\n## Coding\n\nYou can view and download all files in the *Samples* in the Demo Kit at [Routing and Navigation - Step 6](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.navigation/sample/sap.ui.core.tutorial.navigation.06).\n\n  \n  \n**Folder structure for this step**\n\n![](images/Tutorial_Navigation_and_Routing_Step_06c_fffa091.png \"Folder structure for this step\")\n\n\n\n## webapp/view/Home.view.xml\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.Home\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page title=\"{i18n>homePageTitle}\" class=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<Button id=\"displayNotFoundBtn\" text=\"{i18n>DisplayNotFound}\" press=\".onDisplayNotFound\" class=\"sapUiTinyMarginEnd\"/>\n\t\t\t<Button id=\"employeeListBtn\" text=\"{i18n>ShowEmployeeList}\" press=\".onNavToEmployees\" class=\"sapUiTinyMarginEnd\"/>\n\t\t</content>\n\t</Page>\n```\n\nFirst, we change the `Home` view by adding the *Show Employee List* button. We register an event handler `onNavToEmployees` for the press event.\n\n\n\n## webapp/controller/Home.controller.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.Home\", {\n\t\tonDisplayNotFound : function () {\n\t\t\t// display the \"notFound\" target without changing the hash\n\t\t\tthis.getRouter().getTargets().display(\"notFound\", {\n\t\t\t\tfromTarget : \"home\"\n\t\t\t});\n\t\t},\n\t\tonNavToEmployees : function (){\n\t\t\tthis.getRouter().navTo(\"employeeList\");\n\t\t}\n\n\t});\n});\n```\n\nThe new event handler `onNavToEmployees` calls `navTo(\"employeeList\")` on the router instance. The parameter `employeeList` is the name of the route that we want to navigate to.\n\n\n\n## webapp/manifest.json\n\n```js\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t\"home\": {\n\t\t\t\t\t\"id\": \"home\",\n\t\t\t\t\t\"name\": \"Home\",\n\t\t\t\t\t\"level\" : 1\n\t\t\t\t},\n\t\t\t\t\"notFound\": {\n\t\t\t\t\t\"id\": \"notFound\",\n\t\t\t\t\t\"name\": \"NotFound\",\n\t\t\t\t\t\"transition\": \"show\"\n\t\t\t\t},\n\t\t\t\t\"employees\": {\n\t\t\t\t\t\"id\": \"employeeList\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"EmployeeList\",\n\t\t\t\t\t\"level\" : 2\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nTo make the navigation work, we have to extend the routing configuration of the app in the descriptor file. We add a new pattern called `employeeList`; this is the name we used in the controller to trigger the navigation.\n\nThe pattern of the route is the hard-coded value `employees`, meaning the matching hash for this route is `/#/employees` in the address bar of the browser. The target `employees` should be displayed when this URL pattern is matched.\n\nThe `employees` entry in the `targets` section references the `sap.ui.demo.nav.view.employee.EmployeeList` view. As you can see, we added a new namespace `employee` for all views related to employees with the property `path`. This overrides the default settings in the `config` section for the current target.\n\nThe view that we are about to create has to be placed in the `webapp/view/employee` folder accordingly. This approach helps to structure the views of the app according to business objects and to better understand the navigation patterns of the app in larger projects.\n\n> ### Note:  \n> We could also have left out the `path` property to use the default `path` defined in the `config` section. In that case, we would have to change the `name` to `employee.EmployeeList` to achieve the same effect.\n\nSetting the `level` to `2` helps the router to determine how to animate the \\(in our case\\) `slide` transition. For us, this means that a navigation from the home page to the `employees` target will be animated with a \"Slide to Left\" animation. In contrast to that, the back navigation from the `employees` target to the home page will be animated with a \"Slide to Right\" animation. This behavior is due to the fact that the home page has a lower `level` than the `employees` target.\n\n\n\n## webapp/view/employee/EmployeeList.view.xml \\(New\\)\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.EmployeeList\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\tid=\"employeeListPage\"\n\t\ttitle=\"{i18n>EmployeeList}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<List id=\"employeeList\" headerText=\"{i18n>ListOfAllEmployees}\" items=\"{/Employees}\">\n\t\t\t\t<items>\n\t\t\t\t\t<StandardListItem\n\t\t\t\t\t\ttitle=\"{FirstName} {LastName}\"\n\t\t\t\t\t\ticonDensityAware=\"false\"\n\t\t\t\t\t\ticonInset=\"false\"/>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\nWe now create a subfolder `employee` below `webapp/view` and a file `EmployeeList.view.xml`.\n\nWe name the folder after the business object, to make it obvious from looking at the hash \\(included in the browser's address bar\\) where a view file for a certain business object is located. For example, we can determine from the URL `/#/employee` that the corresponding view must be somewhere in the folder `./employee` \\(in our case: `webapp/view/employee`\\) just by looking at the URL.\n\nIn the view, we use a `sap.m.List` control and bind its items to the data from our simulated OData service. Note that we have also registered the `onNavBack` handler from the base controller again to be able to navigate back to the overview.\n\nThis view can be referenced by `sap.ui.demo.nav.view.employee.EmployeeList`.\n\n\n\n## webapp/controller/employee/EmployeeList.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.EmployeeList\", {\n\t});\n});\n```\n\nFinally, we will add a new controller. Create a subfolder `employee` inside `webapp/controller` folder and place the file `EmployeeList.controller.js` there. As you can see, the folder structure of the controllers is in sync with the folder structure of the views.\n\n\n\n## webapp/i18n/i18n.properties\n\n```ini\n...\nShowEmployeeList=Show Employee List\nEmployeeList=Employee List\nListOfAllEmployees=List of all employees\n```\n\nAdd the new texts to the `i18n.properties` file.\n\nNow you can open the app and press the *Show Employee List* button to navigate to the employee list. From there, you can press either the browser's or the app's *Back* button to get back to the home page.\n\n**Related Information**  \n\n\n[Methods and Events for Navigation](../04_Essentials/methods-and-events-for-navigation-516e477.md \"SAPUI5 provides a method and events for navigation.\")\n\n[API Reference: `sap.ui.core.routing.Route`](https://ui5.sap.com/#/api/sap.ui.core.routing.Route)\n\n",
  "excerpt": "<!-- loio782aac08f2de4003a2fcbdd39d27f374 --> Step 6: Navigate to Routes with Hard-Coded Patterns In this step, we'll create a second button on the home page, with which we can navigate to a simple li...",
  "wordCount": 912,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}