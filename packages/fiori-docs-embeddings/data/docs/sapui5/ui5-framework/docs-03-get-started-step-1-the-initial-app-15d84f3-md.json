{
  "id": "sapui5-docs-03-get-started-step-1-the-initial-app-15d84f3-md",
  "title": "Step 1: The Initial App",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-1-the-initial-app-15d84f3.md",
  "lastModified": "2025-09-01T18:17:10.449Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "The",
    "Initial",
    "App"
  ],
  "headers": [
    "Step 1: The Initial App",
    "Preview",
    "Setup",
    "The Initial App",
    "`webapp/index.html`",
    "`webapp/manifest.json`",
    "Mock server \\(`webapp/localService/*`\\)"
  ],
  "content": "<!-- loio15d84f36c0594cb2b3295aa1f55cb961 -->\n\n# Step 1: The Initial App\n\nWe start by setting up a simple app that loads data from an OData service and displays it in a table. We use a mock server to simulate requests to and responses from the service.\n\nThe structure and data model created in this step will be used throughout this tutorial to illustrate the OData V4 features in SAPUI5.\n\n\n\n<a name=\"loio15d84f36c0594cb2b3295aa1f55cb961__section_bt4_fxc_z1b\"/>\n\n## Preview\n\n  \n  \n**Initial app with a simple table**\n\n![](images/Tutorial_OData_V4_Step1_Preview_9d0182f.png \"Initial app with a simple table\")\n\n\n\n<a name=\"loio15d84f36c0594cb2b3295aa1f55cb961__section_tsr_gxc_z1b\"/>\n\n## Setup\n\n1.  To set up your project for this tutorial, download the files at [OData V4 - Step 1](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.odatav4/sample/sap.ui.core.tutorial.odatav4.01).\n\n2.  Extract the downloaded `.zip` file at the desired location on your local machine.\n3.  Open a shell in the extracted folder and run `npm install`.\n4.  Run `npm start` to start the web server and to open a new browser window hosting your newly created `index.html`.\n\nYou should now have the following files:\n\n  \n  \n**Folder structure with downloaded files**\n\n![](images/Tutorial_OData_V4_Step1_Folders_1406ea6.png \"Folder structure with downloaded files\")\n\n\n\n<a name=\"loio15d84f36c0594cb2b3295aa1f55cb961__section_vng_l12_gcb\"/>\n\n## The Initial App\n\nThe downloaded code includes an app that displays a table containing a table of users. For performance reasons, the table only loads 10 users at a time. More data can be retrieved by using the *More* button at the bottom of the page.\n\nDuring the implementation of the app, we use local mock data so that we can concentrate on the application logic without dealing with back-end readiness or connectivity issues. We use the *TripPin* sample service as a \"real\" OData service.\n\nThe most important files are the following:\n\n\n\n### `webapp/index.html`\n\nThis file defines the home page of the app. It contains the bootstrap script and tells the runtime where to find our custom resources. It also initializes the mock server that intercepts all requests to the real *TripPin* service and sends back mock responses.\n\n\n\n### `webapp/manifest.json`\n\nThe `manifest.json` descriptor file contains the app configuration. In the `sap.app` section, the OData V4 service is configured as the default service:\n\n```json\n\"dataSources\": {\n\t\"default\": {\n\t\t\"uri\": \"https://services.odata.org/TripPinRESTierService/(S(id))/\",\n\t\t\"type\": \"OData\",\n\t\t\"settings\": {\n\t\t\t\"odataVersion\": \"4.0\"\n\t\t}\n\t}\n}\n\n```\n\n\n\n### Mock server \\(`webapp/localService/*`\\)\n\n> ### Note:  \n> The mock server included in this tutorial is only meant to support the features needed in this tutorial. Currently, there is no \"general-purpose mock server\" for application development available with OData V4 \\(like there is for OData V2\\).\n\nThe `mockserver.js` file contains the implementation of the mock server. It is quite simple since the mock server is only used to simulate certain types of requests to the *TripPin* service.\n\nThe `metadata.xml` file contains the service metadata that includes, for example, entity types and entity sets. Those define the possible requests as well as the structure of responses.\n\nTo be able to add data to the emulated OData responses, we have to store the entities for each entity type we use in a JSON file: The `people.json` file contains some data that is used for the mock service responses.\n\nIn this tutorial, we only use the entity type `Person` of the *TripPin* service. The entities of type `Person` are collected in the entity set `People`. Each `Person` has a key property `UserName` and the properties `Age`, `FirstName`, and `LastName`.\n\n**Related Information**  \n\n\n[*OData* Reference Services including *TripPin*](http://www.odata.org/odata-services/)\n\n[Bootstrapping: Loading and Initializing](../04_Essentials/bootstrapping-loading-and-initializing-a04b0d1.md \"To use SAPUI5 features in your HTML page, you have to load and initialize the SAPUI5 library.\")\n\n[Manifest \\(Descriptor for Applications, Components, and Libraries\\)](../04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md \"The manifest (also known as descriptor for applications, components, and libraries, in short: app descriptor) is inspired by the WebApplication Manifest concept introduced by the W3C. The manifest provides a central, machine-readable, and easy-to-access location for storing metadata associated with an application, an application component, or a library.\")\n\n",
  "excerpt": "<!-- loio15d84f36c0594cb2b3295aa1f55cb961 --> Step 1: The Initial App We start by setting up a simple app that loads data from an OData service and displays it in a table. We use a mock server to simu...",
  "wordCount": 623,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}