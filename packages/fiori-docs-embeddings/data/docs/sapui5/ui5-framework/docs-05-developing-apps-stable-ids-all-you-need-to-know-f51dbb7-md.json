{
  "id": "sapui5-docs-05-developing-apps-stable-ids-all-you-need-to-know-f51dbb7-md",
  "title": "Stable IDs: All You Need to Know",
  "category": "ui5-framework",
  "path": "docs/05_Developing_Apps/stable-ids-all-you-need-to-know-f51dbb7.md",
  "lastModified": "2025-09-01T18:17:10.566Z",
  "tags": [
    "ui5-framework",
    "md",
    "Stable",
    "IDs",
    "All",
    "You",
    "Need",
    "Know"
  ],
  "headers": [
    "Stable IDs: All You Need to Know",
    "Background",
    "How to Set IDs Manually to Keep Them Stable",
    "How to Name Stable IDs",
    "How to Check If All Your IDs Are Stable"
  ],
  "content": "<!-- loiof51dbb78e7d5448e838cdc04bdf65403 -->\n\n# Stable IDs: All You Need to Know\n\nStable IDs are IDs for controls, elements, or components that you set yourself in the respective `id` property or attribute as opposed to IDs that are generated by SAPUI5. *Stable* means that the IDs are concatenated with the application component ID and do not have any auto-generated parts.\n\n\n\n<a name=\"loiof51dbb78e7d5448e838cdc04bdf65403__section_gtm_xlp_3z\"/>\n\n## Background\n\nIf you don't define IDs, SAPUI5 generates them dynamically. These IDs are not static and might differ from program run to program run. For example, the page and table in the following XML view could have the generated IDs `\"__page0\"` and `\"__table0\"` at runtime:\n\n```xml\n<mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n    <Page>\n        <Table>\n        </Table>\n    </Page>\n</mvc:View>\n\n```\n\nThe generated IDs change whenever the control structure of the app changes. The sequence of instantiation also plays a role: If there are two views with unstable IDs in the app, depending on the order the views are opened, they get the generated IDs `\"__view0\"` and `\"__view1\"`. This is an issue for the following features that require stable IDs:\n\n-   SAPUI5 flexibility\n\n    Allows you to adapt apps based on your requirements, for example, by creating variants or changing the user interface at runtime. Stable IDs are used to identify the controls that are to be adapted. For more information, see [SAPUI5 Flexibility: Adapting UIs Made Easy](../04_Essentials/sapui5-flexibility-adapting-uis-made-easy-a8e55aa.md).\n\n-   Automated tests\n\n    To check the behavior of apps at runtime, these tests find controls by searching for stable IDs. If you use OPA in SAPUI5, you're able to find controls via other criteria like control type, display name and others. For more information, see [Integration Testing with One Page Acceptance Tests \\(OPA5\\)](../04_Essentials/integration-testing-with-one-page-acceptance-tests-opa5-2696ab5.md).\n\n-   Inline help tools\n\n    These tools display user assistance information directly in the app and depend on stable IDs \\(example: [SAP Companion](https://enable-now.sap.com/ic/pub/int/index.html?show=group!GR_CF44F241F6233280#group!GR_FE31C8798B894A1)\\).\n\n\n> ### Tip:  \n> Stable IDs are an important prerequisite for SAPUI5 flexibility services, automated testing, and inline help tools. Apps with stable IDs are of high quality and offer customers more functionality. Therefore, we strongly recommend that you use stable IDs whenever possible \\(some technical controls don't need stable IDs, such as `CustomData`\\).\n\n> ### Caution:  \n> If some controls have disappeared after a software upgrade or the way in which they can be identified has been changed, this has a direct impact on the functions that depend on stable IDs. These stable IDs are part of the public API of the app, and therefore must be kept stable over the life cycle of the app.\n> \n> Do not delete any control that has a stable ID. If you need to remove a control from an app, set the control's `visible` property to `false`.\n\n\n\n<a name=\"loiof51dbb78e7d5448e838cdc04bdf65403__section_setstableid\"/>\n\n## How to Set IDs Manually to Keep Them Stable\n\n> ### Tip:  \n> Using the rule *Stable control IDs are required for SAPUI5 flexibility services* in the Support Assistant, you can check whether all controls use stable IDs. For more information, see [How to Check If All Your IDs Are Stable](stable-ids-all-you-need-to-know-f51dbb7.md#loiof51dbb78e7d5448e838cdc04bdf65403__section_howtocheck).\n\n\n<table>\n<tr>\n<td valign=\"top\">\n\n**Views**\n\n</td>\n<td valign=\"top\">\n\n-   Views in the manifest\n\n    The standard use case is that you use stable IDs for the view that the router navigates to. Ideally, instead of creating the views yourself, you create them with routing targets and declare the view ID in the manifest.json file as shown in the example below. For more information, see [Routing and Navigation](../04_Essentials/routing-and-navigation-3d18f20.md) and [Manifest \\(Descriptor for Applications, Components, and Libraries\\)](../04_Essentials/manifest-descriptor-for-applications-components-and-libraries-be0cf40.md).\n\n    Example:\n\n    ```json\n    \n    \"sap.ui5\": {\n    \t\"rootView\": {\n    \t\t\"id\": \"myRootView\",\n    \t\t\"viewName\": \"my.app.view.Root\",\n    \t\t\"...\": \"...\"\n    \t},\n    \t\"routing\": {\n    \t\t\"targets\": {\n    \t\t\t\"myTarget\": {\n    \t\t\t\t\"id\": \"myView\",\n    \t\t\t\t\"name\": \"MyView\",\n    \t\t\t\t\"...\": \"...\"\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    ```\n\n-   Embedded views\n\n    If you embed your view, set its ID.\n\n    Example:\n\n    ```xml\n    <mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n    \t<Page id=\"myPage\">\n    \t\t<mvc:XMLView id=\"myEmbeddedView\" viewName=\"MyView\"/>\n    \t</Page>\n    </mvc:View>\n    \n    ```\n\n-   Programmatic creation\n\n    If you create the view programmatically, provide the ID as one of the parameters to the factory function. Make sure to prefix the view ID with the component ID using the [`createId`](https://ui5.sap.com/#/api/sap.ui.core.UIComponent/methods/createId) method of the owner component.\n\n    Example:\n\n    ```js\n    // XMLView required from \"sap/ui/core/mvc/XMLView\"\n    myOwnerComponent.runAsOwner(() => XMLView.create({\n    \tid: myOwnerComponent.createId(\"myProgrammaticView\"),\n    \tviewName: \"my.app.view.ProgrammaticView\"\n    })).then((createdView) => {\n    \t// ...\n    });\n    ```\n\n    For more information, see [Views](../04_Essentials/views-91f27e3.md).\n\n\n\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**Extension points** \n\n</td>\n<td valign=\"top\">\n\nIf you use extension points, use stable IDs for nested views and prefixes for nested controls of a fragment.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**Controls** \n\n</td>\n<td valign=\"top\">\n\n-   Controls in XML views\n\n    The XML view prefixes the control IDs \\(only the defined IDs, not the automatically created ones\\) with its own ID. This allows you to use the same control ID for different views and the same view multiple times. For more information, see [Support for Unique IDs](../04_Essentials/support-for-unique-ids-91f28be.md).\n\n    If the following XML view is instantiated using the ID `\"myView\"`, the contained page and table would have the IDs `\"myView--myPage\"` and `\"myView--myTable\"` at runtime:\n\n    ```xml\n    <mvc:View xmlns:mvc=\"sap.ui.core.mvc\" xmlns=\"sap.m\">\n    \t<Page id=\"myPage\">\n    \t\t\t<Table id=\"myTable\">\n    \t\t\t</Table>\n    \t</Page>\n    </mvc:View>\n    ```\n\n-   Programmatic creation\n\n    For JavaScript views and JavaScript-generated controls, you must use the `createId` method of the [`View`](https://ui5.sap.com/#/api/sap.ui.core.mvc.View/methods/createId), [`Controller`](https://ui5.sap.com/#/api/sap.ui.core.mvc.Controller/methods/createId), or [`UIComponent`](https://ui5.sap.com/#/api/sap.ui.core.UIComponent/methods/createId). Here's how it could look like when you're creating a control directly in the controller code:\n\n    ```js\n    // Button required from \"sap/m/Button\"\n    // this == Controller instance\n    new Button({\n    \tid: this.createId(\"myButton\"),\n    \t// ...\n    });\n    ```\n\n-   Binding templates\n\n    Also use stable IDs in binding templates, because the SAPUI5 flexibility tooling allows changes on the binding templates. The cloned controls will be prefixed, but you have to make sure to clean them up. The simplest way to do this is setting the `templateShareable` property to `false` \\(for more information, see [Lifecycle of Binding Templates](../04_Essentials/lifecycle-of-binding-templates-3a4a9e5.md)\\). If the template has to be shareable and you cannot clean it up, you should at least prevent flexibility changes on the binding template using the `not-adaptable` or `not-adaptable-tree` flags described here: [Restrict adaptation for certain controls](enabling-ui-adaptation-other-things-to-consider-de9fd55.md#loiode9fd55c69af4b46863f5d26b5d796c4__section_restrictadaptation).\n\n\n\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**Components** \n\n</td>\n<td valign=\"top\">\n\n> ### Note:  \n> The following is only relevant if you do not use the SAP Fiori launchpad because it instantiates components for you and provides IDs.\n\nIf you instantiate a component inside an HTML page, set the ID of the component as shown below. To get unique IDs for the views and controls inside the component, they must be prefixed with the component ID. All views in the component that are created by the framework are automatically prefixed with the component ID.\n\nExamples \\(Standalone App scenario\\):\n\n```html\n<head>\n\t<!-- ... -->\n\t<script id=\"sap-ui-bootstrap\"\n\t\tsrc=\"...\"\n\t\tdata-sap-ui-on-init=\"module:sap/ui/core/ComponentSupport\"\n\t\tdata-sap-ui-async=\"true\"\n\t\tdata-sap-ui-resource-roots='{ \"my.app\": \"./\" }'\n\t\tdata-...=\"...\"\n\t></script>\n</head>\n<body class=\"sapUiBody sapUiSizeCompact\">\n\t<div data-sap-ui-component\n\t\tdata-id=\"myRootComponentContainer\"\n\t\tdata-name=\"my.app\"\n\t\tdata-settings='{ \"id\": \"myRootAppComponent\" }'\n\t\tdata-height=\"100%\"\n\t></div>\n</body>\n```\n\nFor more information, see [`sap/ui/core/ComponentSupport`](https://ui5.sap.com/#/api/module:sap/ui/core/ComponentSupport).\n\nAlternatively, when creating a `ComponentContainer` manually:\n\n```js\n// ComponentContainer required from \"sap/ui/core/ComponentContainer\"\nnew ComponentContainer({\n\tid: \"myRootAppComponentContainer\",\n\tautoPrefixId: true,\n\tname: \"my.app\",\n\tmanifest: true,\n\tsettings: { // Component settings\n\t\tid: \"myRootAppComponent\"\n\t},\n\theight: \"100%\"\n}).placeAt(\"content\");\n```\n\n\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**Embedded Components** \n\n</td>\n<td valign=\"top\">\n\nLet's say you want to embed a component with the package name `my.embedded`. You define it as follows in the manifest and use the registered `componentUsages` entry in `ComponentContainer` settings, for example.\n\n```json\n\"sap.ui5\": {\n   \"componentUsages\": {\n      \"myReuseComponent\": {\n         \"name\": \"my.embedded\",\n         \"lazy\": false\n      }\n   }\n}\n```\n\n> ### Note:  \n> While the `componentUsages` configuration technically allows defining a component ID via `settings: { id: \"...\" }` directly in manifest.json, doing so can lead to ID conflicts at runtime when the framework instantiates the target `Component` **more than once** through the same `componentUsages` configuration. To avoid this, the component `id` can be specified in the [`Component#createComponent`](https://ui5.sap.com/#/api/sap.ui.core.Component%23methods/createComponent) call or within the `settings` property of the `ComponentContainer`, as shown below.\n\n```xml\n<core:ComponentContainer xmlns:core=\"sap.ui.core\"\n\tid=\"myEmbeddedComponentContainer\"\n\tautoPrefixId=\"true\"\n\tsettings='{ \"id\": \"myEmbeddedComponent\" }'\n\tusage=\"myReuseComponent\"\n\tmanifest=\"true\"\n\theight=\"100%\"\n\tlifecycle=\"Container\"\n/>\n```\n\nFor more information on embedded components, see [Using and Nesting Components](../04_Essentials/using-and-nesting-components-346599f.md) and [Enabling Routing in Nested Components](../04_Essentials/enabling-routing-in-nested-components-fb19f50.md).\n\nAlternatively, you could use the [`sap/ui/core/Component.create`](https://ui5.sap.com/#/api/sap.ui.core.Component/methods/sap.ui.core.Component.create) API and specify the `id` in the arguments.\n\n> ### Note:  \n> In order to support SAPUI5 flexibility features, all embedded components should have a stable ID. For more information, see [SAPUI5 Flexibility: Adapting UIs Made Easy](../04_Essentials/sapui5-flexibility-adapting-uis-made-easy-a8e55aa.md).\n\n\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**XML fragments** \n\n</td>\n<td valign=\"top\">\n\nIf you use XML fragments in your app, make sure they are instantiated with the correct view ID prefix. To simplify this, you can use the [`sap/ui/core/mvc/Controller.loadFragment`](https://ui5.sap.com/#/api/sap.ui.core.mvc.Controller%23methods/loadFragment) API.\n\nExample using the controller function `loadFragment`:\n\n```js\n// this == Controller instance\nthis.loadFragment({\n\t// id: view ID as prefix by default\n\tname: \"my.app.view.SampleFragment\"\n});\n```\n\nAlternatively, when using the generic function `sap/ui/core/Fragment.load` manually:\n\n```js\n// Fragment required from sap/ui/core/Fragment\n// this == Controller instance\nthis.getOwnerComponent().runAsOwner(() => Fragment.load({\n\tid: this.getView().getId(), // view ID as prefix needed\n\tname: \"my.app.view.SampleFragment\",\n\tcontroller: this\n})).then((createdFragment) => {\n\t// ...\n});\n```\n\nYou can also define individual IDs \\(and prefixes\\) for each instance of a fragment.\n\n```js\n// Here we deactivate the default prefixing and pass a custom ID for the fragment instance\nthis.loadFragment({\n\tid: this.createId(\"myFragment1\"),\n\tautoPrefixId: false,\n\tname: \"my.app.view.SampleFragment\"\n});\n\n// or via generic factory:\nthis.getOwnerComponent().runAsOwner(() => Fragment.load({\n\tid: this.createId(\"myFragment1\"),\n\tname: \"my.app.view.SampleFragment\",\n\tcontroller: this\n})).then((createdFragment) => {\n\t// ...\n});\n```\n\n```xml\n<!-- When embedding a fragment declaratively, you can specify a stable prefix ID on the XML node itself -->\n<core:Fragment xmlns:core=\"sap.ui.core\"\n\tid=\"myFragment1\"\n\tfragmentName=\"my.app.view.SampleFragment\"\n\ttype=\"XML\"\n/>\n```\n\n\n\n</td>\n</tr>\n</table>\n\n\n\n<a name=\"loiof51dbb78e7d5448e838cdc04bdf65403__section_lvk_cqp_3z\"/>\n\n## How to Name Stable IDs\n\nChoose names for your stable IDs that describe the semantics of your views and controls, such as *page* or *table*.\n\n> ### Note:  \n> For the allowed sequence of characters, see the [namespace `sap.ui.core.ID`](https://ui5.sap.com/#/api/sap.ui.core.ID). But bear in mind not to use hyphens \\(`-`\\) as separators in your names as they would interfere with the ones that are added automatically by the framework.\n\nExample:\n\nLet's say you're building an app with the component ID `\"myProducts\"`. You're using stable IDs for the views and contained views. Here's what the concatenated IDs that are generated at runtime look like:\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nComponent\n\n</th>\n<th valign=\"top\">\n\nViews\n\n</th>\n<th valign=\"top\">\n\nContained Views\n\n</th>\n<th valign=\"top\">\n\nConcatenated IDs\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\" rowspan=\"4\">\n\n`\"myProducts\"` \n\n</td>\n<td valign=\"top\" rowspan=\"2\">\n\n`\"worklist\"` \n\n</td>\n<td valign=\"top\">\n\n`\"page\"` \n\n</td>\n<td valign=\"top\">\n\n`\"myProducts---worklist--page\"` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`\"table\"` \n\n</td>\n<td valign=\"top\">\n\n`\"myProducts---worklist--table\"` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\" rowspan=\"2\">\n\n`\"product\"` \n\n</td>\n<td valign=\"top\">\n\n`\"page\"` \n\n</td>\n<td valign=\"top\">\n\n`\"myProducts---product--page\"` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`objectHeader` \n\n</td>\n<td valign=\"top\">\n\n`\"myProducts---product--objectHeader\"` \n\n</td>\n</tr>\n</table>\n\n\n\n<a name=\"loiof51dbb78e7d5448e838cdc04bdf65403__section_howtocheck\"/>\n\n## How to Check If All Your IDs Are Stable\n\nWith the Support Assistant, you can analyze whether there are any issues with the stable IDs used in your app. Here's how you can check this:\n\n1.  Open your app in a browser.\n2.  Enter the [shortcut](../02_Read-Me-First/keyboard-shortcuts-for-sapui5-tools-154844c.md) [Ctrl\\] + [Shift\\] + [left Alt / left Option\\] + [P\\]  to start the Support Assistant.\n3.  In the *Technical Information Dialog*, choose *Activate Support Assistant*.\n4.  In the table on the left, deselect all rules.\n5.  Click on the *Rules* column.\n6.  Filter for `stable` and choose *Enter*.\n7.  Select the *Stable control IDs are required for SAPUI5 flexibility services* rule.\n8.  Choose *Analyze*.\n\nIf any generated IDs are found, set the IDs for these controls manually as described [here](stable-ids-all-you-need-to-know-f51dbb7.md#loiof51dbb78e7d5448e838cdc04bdf65403__section_setstableid).\n\n**Related Information**  \n\n\n[Support Assistant](../04_Essentials/support-assistant-57ccd7d.md \"The Support Assistant enables developers to check whether their apps are built according to the SAPUI5 best practices and guidelines.\")\n\n",
  "excerpt": "<!-- loiof51dbb78e7d5448e838cdc04bdf65403 --> Stable IDs: All You Need to Know Stable IDs are IDs for controls, elements, or components that you set yourself in the respective id property or attribute...",
  "wordCount": 1869,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}