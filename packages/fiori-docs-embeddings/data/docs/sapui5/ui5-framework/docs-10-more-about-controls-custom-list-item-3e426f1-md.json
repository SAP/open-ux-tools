{
  "id": "sapui5-docs-10-more-about-controls-custom-list-item-3e426f1-md",
  "title": "Custom List Item",
  "category": "ui5-framework",
  "path": "docs/10_More_About_Controls/custom-list-item-3e426f1.md",
  "lastModified": "2025-09-01T18:17:10.687Z",
  "tags": [
    "ui5-framework",
    "md",
    "Custom",
    "List",
    "Item"
  ],
  "headers": [
    "Custom List Item",
    "Available List Items in SAPUI5",
    "Structure of a List Item",
    "Using the `sap.m.CustomListItem` Control"
  ],
  "content": "<!-- loio3e426f159c7a4ab5ae660aba288c94d2 -->\n\n# Custom List Item\n\nYou can use the `sap.m.CustomListItem` control to create your own layout if the other list items available in SAPUI5 do not fit your needs.\n\n\n\n## Available List Items in SAPUI5\n\nSAPUI5 contains several list items that are used with the `sap.m.List` control to serve different standard scenarios. These are outlined in the table below, along with `sap.m.ColumnListItem`, which is used together with the `sap.m.Table` control:\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nList Item\n\n</th>\n<th valign=\"top\">\n\nUsed for...\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap.m.StandardListItem` \n\n</td>\n<td valign=\"top\">\n\nDisplaying list content with a title description, icon and info\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap.m.DisplayListItem` \n\n</td>\n<td valign=\"top\">\n\nDisplaying name/value pairs\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap.m.InputListItem` \n\n</td>\n<td valign=\"top\">\n\nBuilding a form-like user interface on phones\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap.m.ActionListItem` \n\n</td>\n<td valign=\"top\">\n\nTriggering an action directly from a list\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap.m.FeedListItem` \n\n</td>\n<td valign=\"top\">\n\nDisplaying a standard UI for feeds. For more information, see [Feed List Item](feed-list-item-14a9900.md) \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap.m.ObjectListItem` \n\n</td>\n<td valign=\"top\">\n\nProviding a quick overview for an object within a list\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap.m.ColumnListItem` \n\n</td>\n<td valign=\"top\">\n\nProviding responsive table design in combination with `sap.m.Table` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`sap.m.CustomListItem` \n\n</td>\n<td valign=\"top\">\n\nCreating custom list items if none of the list items above are suitable\n\n</td>\n</tr>\n</table>\n\nIf none of the predefined list items \\(the first seven entries in the table above\\) fit your scenario, you can also create your own layout by using `sap.m.CustomListItem` directly, or create a new control that inherits from `sap.m.CustomListItem`.\n\nFor more information about the different list items, refer to the corresponding [API documentation](https://ui5.sap.com/#/api/sap.m.List). \n\n\n\n## Structure of a List Item\n\nA list item can be split into three parts, as shown in the following graphic:\n\n![](images/List_Item_Structure_2f72dfb.png)\n\nThe parts that are to the left and right of the dotted area are part of the `ListItemBase` and are used to display the selection and deletion mode, as well as different list item type indicators such as navigation, details, and counter. The `Unread` indicator also comes from the `ListItemBase` and when it is set, any unread text will be displayed in bold format.\n\nThe dotted area is the area in which the content of a list item is placed. If you are using `sap.m.CustomListItem`, **all** of the content will be placed there. The section below explains how to use `sap.m.CustomListItem` in more detail.\n\n\n\n## Using the `sap.m.CustomListItem` Control\n\nAs mentioned above, you can either use `sap.m.CustomListItem` directly by adding any content via content aggregation, or you can create your own control that inherits from `sap.m.CustomListItem` if you need a more sophisticated list item featuring your own properties, styling, and complex layout. Below is an example showing how you can use the `sap.m.CustomListItem` together with `sap.m` controls.\n\n```xml\n\n<List headerText=\"Custom Content\" mode=\"Delete\" items=\"{path: '/ProductCollection'}\" >\n\t<CustomListItem>\n\t\t<HBox>\n\t\t\t<core:Icon size=\"2rem\" src=\"sap-icon://attachment-photo\" class=\"sapUiSmallMarginBegin sapUiSmallMarginTopBottom\" />\n\t\t\t<VBox  class=\"sapUiSmallMarginBegin sapUiSmallMarginTopBottom\" >\n\t\t\t\t<Link text=\"{Name}\" target=\"{ProductPicUrl}\" press=\"handlePress\"/>\n\t\t\t\t<Label text=\"{ProductId}\"/>\n\t\t\t</VBox>\n\t\t</HBox>\n\t</CustomListItem>\n</List>\n```\n\nThe example above creates an attachment list item that displays an attachment title as a link, as shown in the graphic below. Clicking on the link will open the attachment. Below the attachment title, we want to display the details of the attachment, so we have used `sap.m.HBox` and `sap.m.VBox` for basic layouting. Data binding is also supported, and here it assumes that a model featuring `ProductPicUrl` and `ProductId` properties is used.\n\n![](images/Custom_List_Item_6c6af3e.png)\n\nThe following example shows how to use a notepad control as a reusable control in an `sap.m.CustomListItem`. It assumes you want to build a product list item that shows an image of the product and displays its details:\n\n```js\nsap.ui.define([\"sap/ui/core/Control\", \"sap/m/Image\"], function (Control, Image) {\n    var MyListItemContent = Control.extend(\"my.control.ListItemContent\", {\n        metadata: {\n            properties : {\n                \"name\": {type: \"string\", defaultValue: \"\"},\n                \"description\": {type: \"string\", defaultValue: \"\"},\n                \"price\": {type: \"string\", defaultValue: \"\"},\n                \"currency\": {type: \"string\", defaultValue: \"\"},\n                \"image\": {type: \"string\", defaultValue: \"\"}\n            },\n            events: {\n                \"myTap\": {},\n            },\n        },\n        init: function(){\n            this._image = new Image({src:\"<myImageSrc>\"}).addStyleClass(\"myImageCSS\").setParent(this);\n        },\n renderer: {\n            apiVersion: 2,  // see 'Renderer Methods' for an explanation of this flag\n            render: function(oRm, oControl) {\n                oRm.openStart(\"div\", oControl);\n                oRm.class(\"listItemCSS\");\n                oRm.openEnd();\n                    oRm.renderControl(oControl._image);\n                    oRm.openStart(\"div\").class(\"descCSS\").openEnd();\n                    oRm.text(oControl.getDescription());\n                    oRm.close(\"div\");\n                    oRm.openStart(\"div\").class(\"priceCSS\").openEnd();\n                    oRm.text(oControl.getPrice());\n                    oRm.close(\"div\");\n                    oRm.openStart(\"div\").class(\"curCSS\").openEnd();\n                    oRm.text(oControl.getCurrency());\n                    oRm.close(\"div\");\n                    oRm.openStart(\"div\").class(\"nameCSS\").openEnd();\n                    oRm.text(oControl.getName());\n                    oRm.close(\"div\");\n                oRm.close(\"div\");\n            }\n        }\n    });\n\n    //example how to react on browser events and convert them to control events\n    ListItemContent.prototype.ontap = function(){\n        //your own tap logic\n        this.fireMyTap({});\n    };\n\n    return ListItemContent;\n});\n```\n\nAfter we've created this notepad control above, we consume it in the `sap.m.CustomListItem` as a content aggregation, as shown here:\n\n```js\n// \"CustomListItem\" required from \"sap/m/CustomListItem\"\nvar oCustomListItem = new CustomListItem({content: [new MyListItemContent({\n    //usual control setup\n})]});\n```\n\n",
  "excerpt": "<!-- loio3e426f159c7a4ab5ae660aba288c94d2 --> Custom List Item You can use the sap.m.CustomListItem control to create your own layout if the other list items available in SAPUI5 do not fit your needs....",
  "wordCount": 772,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}