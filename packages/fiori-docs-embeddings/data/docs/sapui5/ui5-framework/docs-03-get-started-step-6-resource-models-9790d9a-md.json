{
  "id": "sapui5-docs-03-get-started-step-6-resource-models-9790d9a-md",
  "title": "Step 6: Resource Models",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-6-resource-models-9790d9a.md",
  "lastModified": "2025-09-01T18:17:10.480Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Resource",
    "Models"
  ],
  "headers": [
    "Step 6: Resource Models",
    "Preview",
    "Coding"
  ],
  "content": "<!-- loio9790d9aa686e4f818f2ad99057adb7ee -->\n\n# Step 6: Resource Models\n\nBusiness applications often require language-specific \\(translatable\\) text used as labels and descriptions on the user interface.\n\nThe example we used at the start of this tutorial was quite simplistic as we stored language-specific text directly in a JSON model object. Generally speaking, unless language-specific text comes directly from a back-end system, it's not considered good programming practice to put translatable texts directly into a model. So, let's fix this by placing all translatable texts \\(such as field labels\\) into a resource bundle.\n\n\n\n## Preview\n\n  \n  \n**The texts are now derived from a resource model \\(No visual change to last step\\)**\n\n![The graphic has an explanatory text](images/Tutorial_Data_Binding_Step_4_61d68f1.png \"The texts are now derived from a resource model (No visual change to last step)\")\n\n\n\n## Coding\n\nYou can view and download all files in the Demo Kit at [Data Binding - Step 6](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.databinding/sample/sap.ui.core.tutorial.databinding.06).\n\n1.  Create a new entry in the `manifest.json` file under the `models` entry as shown in the coding below. The resource model is set to the component using the model name `i18n`. The data comes from the `i18n.properties` file as specified in the `bundleName` entry in the settings. Since we're creating a resource model, the file name is assumed to have the extension `.properties`; this does not need to be stated explicitly.\n\n    **webapp/manifest.json**\n\n    ```\n    ...\n    \t\"sap.ui5\": {\n    \t\t\"dependencies\": {\n    \t\t\t\"minUI5Version\": \"1.120.0\",\n    \t\t\t\"libs\": {\n    \t\t\t\t\"sap.m\": {},\n    \t\t\t\t\"sap.ui.core\": {},\n    \t\t\t\t\"sap.ui.layout\": {}\n    \t\t\t}\n    \t\t},\n    \t\t\"models\": {\n    \t\t\t\"\": {\n    \t\t\t\t\"type\": \"sap.ui.model.json.JSONModel\",\n    \t\t\t\t\"uri\": \"./model/data.json\"\n    \t\t\t},\n    \t\t\t\"i18n\": {\n    \t\t\t\t\"type\": \"sap.ui.model.resource.ResourceModel\",\n    \t\t\t\t\"settings\": {\n    \t\t\t\t\t\"bundleName\": \"ui5.databinding.i18n.i18n\",\n    \t\t\t\t\t\"supportedLocales\": [\n    \t\t\t\t\t\t\"\",\n    \t\t\t\t\t\t\"de\"\n    \t\t\t\t\t],\n    \t\t\t\t\t\"fallbackLocale\": \"\"\n    \t\t\t\t}\n    \t\t\t}\n    \t\t},\n    ...\n    ```\n\n    > ### Note:  \n    > The configured `supportedLocales` represent the following i18n files present \\(see Step 7\\):\n    > \n    > -   `\"\"` - `i18n/i18n.properties`\n    > -   `\"de\"` - `i18n/i18n_de.properties`\n    > \n    > The configured `fallbackLocale` should represent one of these files. According to the fallback chain, the root bundle \\(`\"\"`\\) is the last fallback. Configuring it explicitly avoids side effects when additional resource files are added. For more information, see [Supported Locales and Fallback Chain](../04_Essentials/supported-locales-and-fallback-chain-ec753bc.md).\n\n2.  Create a new folder `i18n` in the `webapp` folder and a new file `i18n.properties` within this folder. Add the code shown below.\n\n    **webapp/i18n/i18n.properties \\(New\\)**\n\n    ```ini\n    # Field labels\n    firstName=First Name\n    lastName=Last Name\n    enabled=Enabled\n    \n    # Screen titles\n    panelHeaderText=Data Binding Basics\n    ```\n\n    The `panelHeaderText` property has been moved from the JSON model into the `i18n` resource bundle. Also, the field labels are no longer hard-coded in the XML view. This is because all of these text fields need to be translated.\n\n    Language-specific text stored in resource models obeys the Java convention for internationalization \\(i18n\\).\n\n3.  Modify the data binding for the panel header and the labels in `App.view.xml` to include the model name. Note that a \"greater than\" character separates the model name and the property name. Also, i18n property names **must not** start with a slash character.\n\n    **webapp/view/App.view.xml**\n\n    ```xml\n    <mvc:View\n    \txmlns=\"sap.m\"\n    \txmlns:form=\"sap.ui.layout.form\"\n    \txmlns:mvc=\"sap.ui.core.mvc\">\n    \t<Panel headerText=\"{i18n>panelHeaderText}\" class=\"sapUiResponsiveMargin\" width=\"auto\">\n    \t\t<form:SimpleForm editable=\"true\" layout=\"ColumnLayout\">\n    \t\t\t<Label text=\"{i18n>firstName}\"/>\n    \t\t\t<Input value=\"{/firstName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n    \t\t\t<Label text=\"{i18n>lastName}\"/>\n    \t\t\t<Input value=\"{/lastName}\" valueLiveUpdate=\"true\" width=\"200px\" enabled=\"{/enabled}\"/>\n    \t\t\t<Label text=\"{i18n>enabled}\"/>\n    \t\t\t<CheckBox selected=\"{/enabled}\"/>\n    \t\t</form:SimpleForm>\n    \t</Panel>\n    </mvc:View>\n    ```\n\n4.  Remove the line `panelHeaderText : \"Data Binding Basics\"` from the model data in the `data.json` file. This text has now been moved to the resource model.\n\n    **webapp/model/data.json**\n\n    ```\n    {\n    \t\"firstName\": \"Harry\",\n    \t\"lastName\": \"Hawk\",\n    \t\"enabled\": true\n    }\n    ```\n\n5.  Remove the `init` function and the import of `sap/ui/model/BindingMode` from `Component.js` as we do not want to set the one-way binding mode anymore.\n\n    **webapp/Component.js**\n\n    ```\n    sap.ui.define([\n    \t\"sap/ui/core/UIComponent\"\n    ], (UIComponent) => {\n    \t\"use strict\";\n    \treturn UIComponent.extend(\"ui5.databinding.Component\", {\n    \t\tmetadata: {\n    \t\t\tinterfaces: [\"sap.ui.core.IAsyncContentCreation\"],\n    \t\t\tmanifest: \"json\"\n    \t\t}\n    \t});\n    });\n    ```\n\n\nYou can use multiple model instances by using different model names. The model name can be set as the second parameter when using the `setModel(oResourceModel,\"i18n\")` method. The model is then propagated under this name to all aggregated child controls \\(and their children, and so on â€¦\\). All these controls have access to this model under the name `i18n` as well as to the `JSONModel` \\(default model, which has no name\\).\n\n**Related Information**  \n\n\n[Resource Model](../04_Essentials/resource-model-91f122a.md#loio91f122a36f4d1014b6dd926db0e91070 \"The resource model is used as a wrapper for resource bundles. In data binding you use the resource model instance, for example, to bind texts of a control to language-dependent resource bundle properties.\")\n\n",
  "excerpt": "<!-- loio9790d9aa686e4f818f2ad99057adb7ee --> Step 6: Resource Models Business applications often require language-specific \\(translatable\\) text used as labels and descriptions on the user interface....",
  "wordCount": 704,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}