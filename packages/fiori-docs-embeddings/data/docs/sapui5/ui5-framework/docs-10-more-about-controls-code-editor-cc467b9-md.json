{
  "id": "sapui5-docs-10-more-about-controls-code-editor-cc467b9-md",
  "title": "Code Editor",
  "category": "ui5-framework",
  "path": "docs/10_More_About_Controls/code-editor-cc467b9.md",
  "lastModified": "2025-09-01T18:17:10.686Z",
  "tags": [
    "ui5-framework",
    "md",
    "Code",
    "Editor"
  ],
  "headers": [
    "Code Editor",
    "Overview",
    "Details",
    "Autocompletion"
  ],
  "content": "<!-- loiocc467b9a1c574410ac4a08a5dc2f55a2 -->\n\n# Code Editor\n\nThe `sap.ui.codeeditor.CodeEditor` offers functionality to display and edit source code artifacts with syntax highlighting and code completion capabilities for various programming languages.\n\n\n\n## Overview\n\nThe `sap.ui.codeeditor.CodeEditor` provides simple SAPUI5 wrapper control that exposes a subset of API and functionality provided by the third-party ACE \\(Ajax.org Cloud9 Editor\\) implementation. You can find more information about ACE on the website [https://ace.c9.io/](https://ace.c9.io/).\n\n> ### Restriction:  \n> -   If you use API calls to the native API of ACE, we cannot guarantee backwards compatibility after an upgrade to higher ACE library versions.\n> \n> -   Accessibility features like high-contrast themes and keyboard handling are not fully available as they are for the rest of the SAPUI5 controls.\n\n\n\n<a name=\"loiocc467b9a1c574410ac4a08a5dc2f55a2__section_lsh_hbb_ybb\"/>\n\n## Details\n\n\n\n### Autocompletion\n\nThe sap.ui.codeeditor.CodeEditor control is enabled with two modes of autocompletion:\n\n-   Default autocompletion\n\n    The default autocompletion options of the underlying ACE editor `enableBasicAutocompletion`, `enableSnippets`, `enableLiveAutocompletion` are always enabled.\n\n-   Custom autocompletion\n\n    The users of CodeEditor can specify their own autocompletion handling. To do this, the following API method is provided: `CodeEditor.prototype.addCustomCompleter(oCustomCompleter)`.\n\n    There are several characteristics you should bear in mind:\n\n    -   `oCustomCompleter` must contain implementation of a custom completer method called `getCompletions`.\n\n    -   The method accepts two parameters: `fnCallback` and `context` object. `Callback` should be called, as in the example, with the suggestions that you want to appear in the editor. The format is an array of objects. Each object should contain the following properties: `name`, `value`, `score` and `meta`.\n\n    -   The `context` object contains `oPos` and `sPrefix` as provided by the ACE editor.\n\n\n\nHere is an example of custom autocompletion:\n\n> ### Sample Code:  \n> ```js\n> codeEditor.addCustomCompleter({\n>       getCompletions: function(callback, context) {\n>           // callback is provided to us by ACE so we can execute it as shown\n>           // below in order to display suggestions to the user\n>           // ideally, the array argument, provided to the following method call\n>           // will be dynamically generated based on the content of the context\n>           // object\n>           // let's assume the context contains an sPrefix equal to 'read', which\n>           // means the cursor in ACE is at the end of a 'read' word\n>           // by executing the following call, we can show a list of suggestions\n>           // such as: readFile, readStream, readResponse \n>           callback(null, [{\n>             name: \"foo\",\n>             value: \"foo\",\n>             // name is not displayed on the screen\n>             name: \"readFile\",\n>             // value is displayed on the screen\n>             value: \"readFile()\",\n>             // score determines which suggestion goes first\n>             score: \"1\",\n>             meta: \"rhyme\"\n>               // meta is short info displayed on the right of value\t\t\t\t\t\tmeta: \"function\"\n>           }, {\n>             name: \"bar\",\n>             value: \"bar\",\n>             score: \"1\",\n>             meta: \"rhyme\"\n>               // name is not displayed on the screen\n>             name: \"readStream\",\n>             // value is displayed on the screen\n>             value: \"readStream(input)\",\n>             // score determines which suggestion goes first\n>             score: \"3\",\n>             // meta is short info displayed on the right of value\n>             meta: \"params: input\"\n>           }, {\n>             name: \"baz\",\n>             value: \"baz\",\n>             score: \"1\",\n>             meta: \"rhyme\"\n>               // name is not displayed on the screen\n>             name: \"readStream\",\n>             // value is displayed on the screen\n>             value: \"readStream(input, encoding)\",\n>             // score determines which suggestion goes first\n>             score: \"2\",\n>             // meta is short info displayed on the right of value\n>             meta: \"params: input, encoding\"\n>           }])\n> \n> ```\n\n",
  "excerpt": "<!-- loiocc467b9a1c574410ac4a08a5dc2f55a2 --> Code Editor The sap.ui.codeeditor.CodeEditor offers functionality to display and edit source code artifacts with syntax highlighting and code completion c...",
  "wordCount": 581,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}