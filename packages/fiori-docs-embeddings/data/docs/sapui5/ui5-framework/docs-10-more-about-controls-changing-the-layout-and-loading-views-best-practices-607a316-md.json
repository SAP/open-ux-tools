{
  "id": "sapui5-docs-10-more-about-controls-changing-the-layout-and-loading-views-best-practices-607a316-md",
  "title": "Changing the Layout and Loading Views \\(Best Practices\\)",
  "category": "ui5-framework",
  "path": "docs/10_More_About_Controls/changing-the-layout-and-loading-views-best-practices-607a316.md",
  "lastModified": "2025-09-01T18:17:10.686Z",
  "tags": [
    "ui5-framework",
    "md",
    "Changing",
    "the",
    "Layout",
    "and",
    "Loading",
    "Views",
    "Best",
    "Practices"
  ],
  "headers": [
    "Changing the Layout and Loading Views \\(Best Practices\\)"
  ],
  "content": "<!-- loio607a316ea4cd47c893d69ef111428e9d -->\n\n# Changing the Layout and Loading Views \\(Best Practices\\)\n\nThe app can load controls \\(usually views\\) in the three columns with the standard means \\(`beginColumnPages`, `midColumnPages`, `endColumnPages` aggregations\\) and navigate between them with the `.to()`, `.backToPage()` or any other public method, similar to the `sap.m.NavContainer` or `sap.m.SplitContainer` controls.\n\nAt the same time, the app can change the layout of the control by modifying the `layout` property.\n\nIf both a layout change and the loading of a new view need to happen as a result of one user action, the best practice is to change the layout first, and to load the views \\(or navigate to already loaded views\\) second. This would ensure that the columns are resized first \\(as layout change is done synchronously\\), and only then views are placed inside the already resized columns. This would eliminate the need for controls in the views to readapt to the new size after they are placed and rendered initially.\n\n",
  "excerpt": "<!-- loio607a316ea4cd47c893d69ef111428e9d --> Changing the Layout and Loading Views \\(Best Practices\\) The app can load controls \\(usually views\\) in the three columns with the standard means \\(beginC...",
  "wordCount": 162,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}