{
  "id": "sapui5-docs-04-essentials-feature-files-9113397-md",
  "title": "Feature Files",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/feature-files-9113397.md",
  "lastModified": "2025-09-01T18:17:10.516Z",
  "tags": [
    "ui5-framework",
    "md",
    "Feature",
    "Files"
  ],
  "headers": [
    "Feature Files",
    "Conventions for Feature Files",
    "Example"
  ],
  "content": "<!-- loio9113397cd27e4a1090590e1c4f6edf5f -->\n\n# Feature Files\n\nFeature files are human-readable specifications that are also machine-readable.\n\nThe Gherkin syntax is simple. Each major software feature is written in a separate file. You need to decide how to split your software up into features. For example, if you are testing a coffee machine, features might include: serving coffee, accepting money, dispensing change, setting the cost of each beverage, serving hot chocolate, serving hot water, etc. Each one of these features could have its own feature file.\n\nEach feature file contains exactly one feature, and this feature contains one or more test scenarios. Each test scenario contains one or more test steps. Test steps describe the practical steps that the user needs to perform to execute the overall test scenario.\n\nFor example, for the \"accepting money\" feature, a test scenario might include steps such as \\(1\\) the user must insert enough money into the machine before \\(2\\) the machine serves coffee. You could create a second test scenario, where \\(1\\) the user doesn't insert enough money and \\(2\\) the machine does not serve coffee. In this example, each scenario is composed of two steps.\n\n\n\n## Conventions for Feature Files\n\n-   Use the file extension `.feature`\n\n-   Can include comments by adding the hash \\(`#`\\) symbol at the beginning of a line\n\n-   Feature files are composed of one or more test scenarios, which walk the user through using the software; what the user does, and what the expected results are.\n\n-   These scenarios are themselves composed of lines starting with the keywords `Given`, `When`, `Then`, `And`, `But` and `*`.\n\n-   New lines begin with a keyword\n\n    -   Features start with `Feature`\n\n    -   Test scenarios start with `Scenario`\n\n\n    Indentation is purely for readability and is not parsed. Similarly, blank lines are ignored by the parser.\n\n-   You can also just create a bulleted list of steps instead of using keywords\n\n\n\n\n## Example\n\nThe following example shows the structure of a sample feature file :\n\n```\n#!featureFeature: this is the name of the feature\n\n    Here you can describe the feature. Indentation is purely to make \n    this more readable for you. This section will not be used for \n    testing, it is solely for human consumption.\n\n  Scenario: this is the scenario's name\n\n      This is a comment about the scenario\n\n    Given you make a certain assumption here\n    And you make another assumption\n    When some action is taken\n    Then there is an expected response that you write here\n    But there is an exception you should test for\n\n  # comment lines must start with #, and will be skipped by the parser\n\n  Scenario: another scenario's name\n    * you can also just create a bulleted list of steps\n    * instead of using keywords\n```\n\n",
  "excerpt": "<!-- loio9113397cd27e4a1090590e1c4f6edf5f --> Feature Files Feature files are human-readable specifications that are also machine-readable. The Gherkin syntax is simple. Each major software feature is...",
  "wordCount": 454,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}