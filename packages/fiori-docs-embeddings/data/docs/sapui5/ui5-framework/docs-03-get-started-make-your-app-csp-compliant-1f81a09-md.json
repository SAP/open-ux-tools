{
  "id": "sapui5-docs-03-get-started-make-your-app-csp-compliant-1f81a09-md",
  "title": "Make Your App CSP Compliant",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/make-your-app-csp-compliant-1f81a09.md",
  "lastModified": "2025-09-01T18:17:10.444Z",
  "tags": [
    "ui5-framework",
    "md",
    "Make",
    "Your",
    "App",
    "CSP",
    "Compliant"
  ],
  "headers": [
    "Make Your App CSP Compliant",
    "Define Initial Components in a Declarative Way",
    "Separate Scripts From HTML Files in Your Test Folder"
  ],
  "content": "<!-- loio1f81a093a9f3433983dcb2ebe11cd4cd -->\n\n# Make Your App CSP Compliant\n\nCSP stands for Content Security Policy and is a security standard to prevent cross-site scripting or other code injection attacks.\n\nIt's strongly recommended that you make your SAPUI5 applications CSP compliant - after all, you want your apps to be secure. The main thing you have to do is to remove all scripts that directly execute code from your HTML pages.\n\n\n\n<a name=\"loio1f81a093a9f3433983dcb2ebe11cd4cd__section_wkh_b2v_zfb\"/>\n\n## Define Initial Components in a Declarative Way\n\nDon't use directly executable code in your HTML files, because this makes them vulnerable. Instead, enable the `ComponentSupport` module in the bootstrapping script. Then, declare your desired component in the body via a `div` tag. This will instantiate the component when the `onInit` is executed.\n\n```html\n...\n<script id=\"sap-ui-bootstrap\"\n\tsrc=\"resources/sap-ui-core.js\"\n\tdata-sap-ui-async=\"true\"\n\tdata-sap-ui-on-init=\"module:sap/ui/core/ComponentSupport\">\n</script>\n<body class=\"sapUiBody\" id=\"content\">\n\t<div data-sap-ui-component data-name=\"sap.ui.demo.walkthrough\" data-id=\"container\" data-settings='{\"id\" : \"walkthrough\"}'></div>\n</body>\n```\n\n-   Learn how: Walkthrough Tutorial [Step 9: Component Configuration](step-9-component-configuration-4cfa608.md)\n-   Find our more: [Declarative API for Initial Components](../04_Essentials/declarative-api-for-initial-components-82a0fce.md)\n\n\n\n<a name=\"loio1f81a093a9f3433983dcb2ebe11cd4cd__section_kgn_521_1gb\"/>\n\n## Separate Scripts From HTML Files in Your Test Folder\n\nBecause the HTML files in your test folder do not directly open your application, you can't use the new `ComponentSupport` feature here. To make them CSP compliant, you need to put the executable script code in a separate file on the same level as the HTML file. You can then refer to this file in your HTML file inside a `script` tag in the head:\n\nNew script file:\n\n```js\nwindow.suite = function() {\n\t\"use strict\";\n\n\tvar oSuite = new parent.jsUnitTestSuite(),\n\t\tsContextPath = location.pathname.substring(0, location.pathname.lastIndexOf(\"/\") + 1);\n\n\toSuite.addTestPage(sContextPath + \"unit/unitTests.qunit.html\");\n\toSuite.addTestPage(sContextPath + \"integration/opaTests.qunit.html\");\n\n\treturn oSuite;\n};\n\n```\n\nHTML file:\n\n```html\n<head>\n\t...\n\t<script src=\"testsuite.qunit.js\" data-sap-ui-testsuite></script>\n</head>\n\n</html>\n\n```\n\n-   Learn how: Testing Tutorial [Step 10: Automated Testing](step-10-automated-testing-07c97a2.md)\n-   Find out more: [Content Security Policy](../05_Developing_Apps/content-security-policy-fe1a6db.md)\n\n",
  "excerpt": "<!-- loio1f81a093a9f3433983dcb2ebe11cd4cd --> Make Your App CSP Compliant CSP stands for Content Security Policy and is a security standard to prevent cross-site scripting or other code injection atta...",
  "wordCount": 299,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}