{
  "id": "sapui5-docs-03-get-started-step-7-navigate-to-routes-with-mandatory-parameters-f96d252-md",
  "title": "Step 7: Navigate to Routes with Mandatory Parameters",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-7-navigate-to-routes-with-mandatory-parameters-f96d252.md",
  "lastModified": "2025-09-01T18:17:10.481Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Navigate",
    "Routes",
    "with",
    "Mandatory",
    "Parameters"
  ],
  "headers": [
    "Step 7: Navigate to Routes with Mandatory Parameters",
    "Preview",
    "Coding",
    "webapp/manifest.json",
    "webapp/view/employee/Employee.view.xml \\(New\\)",
    "webapp/controller/employee/Employee.controller.js \\(New\\)",
    "webapp/view/employee/EmployeeList.view.xml",
    "webapp/controller/employee/EmployeeList.controller.js",
    "webapp/i18n/i18n.properties"
  ],
  "content": "<!-- loiof96d2522a5ca4382a274ae3c6d002ca0 -->\n\n# Step 7: Navigate to Routes with Mandatory Parameters\n\nIn this step, we implement a feature that allows the user to click on an employee in the list to see additional details of the employee. A route pattern can have one or more mandatory parameters to identify objects in an app.\n\nThe detail page has to read the ID of the employee from the URL to fetch and display the employee data from the server. If the employee was not found, for example, because an invalid employee ID was passed on, we want to inform the user by displaying the `notFound` target. Of course, the back navigation has to work as well for this page.\n\n\n\n## Preview\n\n  \n  \n**Employee list with navigation option for items**\n\n![](images/Tutorial_Navigation_and_Routing_Step_07a_c797ba8.png \"Employee list with navigation option for items\")\n\n  \n  \n**Detail Page for a selected employee**\n\n![](images/Tutorial_Navigation_and_Routing_Step_07b_af68fa9.png \"Detail Page for a selected employee\")\n\n  \n  \n**Not Found page for an invalid EmployeeID**\n\n![](images/Tutorial_Navigation_and_Routing_Step_07c_8bec971.png \"Not Found page for an invalid\n\t\t\t\t\t\tEmployeeID\")\n\n\n\n## Coding\n\nYou can view and download all files in the *Samples* in the Demo Kit at [Routing and Navigation - Step 7](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.navigation/sample/sap.ui.core.tutorial.navigation.07).\n\n  \n  \n**Folder structure for this step**\n\n![](images/Tutorial_Navigation_and_Routing_Step_07d_ad192cd.png \"Folder structure for this step\")\n\n\n\n## webapp/manifest.json\n\n```js\n{\n\t\"_version\": \"1.12.0\",\n\t\"sap.app\": {\n\t\t...\n\t},\n\t\"sap.ui\": {\n\t\t...\n\t},\n\t\"sap.ui5\": {\n\t\t...\n\t\t\"routing\": {\n\t\t\t\"config\": {\n\t\t\t\t\"routerClass\": \"sap.m.routing.Router\",\n\t\t\t\t\"type\": \"View\",\n\t\t\t\t\"viewType\": \"XML\",\n\t\t\t\t\"path\": \"sap.ui.demo.nav.view\",\n\t\t\t\t\"controlId\": \"app\",\n\t\t\t\t\"controlAggregation\": \"pages\",\n\t\t\t\t\"transition\": \"slide\",\n\t\t\t\t\"bypassed\": {\n\t\t\t\t\t\"target\": \"notFound\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"routes\": [{\n\t\t\t\t\"pattern\": \"\",\n\t\t\t\t\"name\": \"appHome\",\n\t\t\t\t\"target\": \"home\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees\",\n\t\t\t\t\"name\": \"employeeList\",\n\t\t\t\t\"target\": \"employees\"\n\t\t\t}, {\n\t\t\t\t\"pattern\": \"employees/{employeeId}\",\n\t\t\t\t\"name\": \"employee\",\n\t\t\t\t\"target\": \"employee\"\n\t\t\t}],\n\t\t\t\"targets\": {\n\t\t\t\t\"home\": {\n\t\t\t\t\t\"id\": \"home\",\n\t\t\t\t\t\"name\": \"Home\",\n\t\t\t\t\t\"level\" : 1\n\t\t\t\t},\n\t\t\t\t\"notFound\": {\n\t\t\t\t\t\"id\": \"notFound\",\n\t\t\t\t\t\"name\": \"NotFound\",\n\t\t\t\t\t\"transition\": \"show\"\n\t\t\t\t},\n\t\t\t\t\"employees\": {\n\t\t\t\t\t\"id\": \"employeeList\",\n\t\t\t\t\t\"path\": \"sap.ui.demo.nav.view.employee\",\n\t\t\t\t\t\"name\": \"EmployeeList\",\n\t\t\t\t\t\"level\" : 2\n\t\t\t\t},\n\t\t\t\t\"employee\": {\n\t\t\t\t\t\"id\": \"employee\",\n\t\t\t\t\t\"name\": \"employee.Employee\",\n\t\t\t\t\t\"level\" : 3\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nFrom our data model \\(`webapp/localService/metadata.xml` or `webapp/localService/mockdata/Employees.json`\\), you can see that each employee entity is identified by an `EmployeeID`. We define a new route that expects a mandatory `employeeId` in its pattern to address an employee. Unlike the patterns we used before, this pattern has a dynamic part. We create a new route `employee` and use `employees/{employeeId}` as its pattern.\n\nThe `{employeeId}` part of the pattern is a mandatory parameter as indicated by the curly brackets. The hash that contains an actual employee ID is matched against that pattern at runtime.\n\nThe following hashes would match in our case: `employees/2`, `employees/7`, `employees/anInvalidId,` and so on. However, the hash `employees/` will not match as it does not contain an ID at all. The target of our route is `employee`. We create the target `employee` with `level` `3`. With that, we make sure that we have the correct slide animation direction.\n\nNext, we have to create the view `employees.Employee`; for better illustration the `path` is not specified this time.\n\n\n\n## webapp/view/employee/Employee.view.xml \\(New\\)\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.Employee\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\txmlns:f=\"sap.ui.layout.form\"\n\tbusyIndicatorDelay=\"0\">\n\t<Page\n\t\tid=\"employeePage\"\n\t\ttitle=\"{i18n>EmployeeDetailsOf} {FirstName} {LastName}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<Panel\n\t\t\t\tid=\"employeePanel\"\n\t\t\t\twidth=\"auto\"\n\t\t\t\tclass=\"sapUiResponsiveMargin sapUiNoContentPadding\">\n\t\t\t\t<headerToolbar>\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Title text=\"{i18n>EmployeeIDColon} {EmployeeID}\" level=\"H2\"/>\n\t\t\t\t\t\t<ToolbarSpacer />\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</headerToolbar>\n\t\t\t\t<content>\n\t\t\t\t\t<f:SimpleForm\n\t\t\t\t\t\tminWidth=\"1024\"\n\t\t\t\t\t\teditable=\"false\"\n\t\t\t\t\t\tlayout=\"ResponsiveGridLayout\"\n\t\t\t\t\t\tlabelSpanL=\"3\" labelSpanM=\"3\" emptySpanL=\"4\" emptySpanM=\"4\"\n\t\t\t\t\t\tcolumnsL=\"1\" columnsM=\"1\">\n\t\t\t\t\t\t<f:content>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formFirstName}\"/>\n\t\t\t\t\t\t\t<Text text=\"{FirstName}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formLastName}\"/>\n\t\t\t\t\t\t\t<Text text=\"{LastName}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formAddress}\"/>\n\t\t\t\t\t\t\t<Text text=\"{Address}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formCity}\"/>\n\t\t\t\t\t\t\t<Text text=\"{City}, {Region}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formPostalCode}\"/>\n\t\t\t\t\t\t\t<Text text=\"{PostalCode}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formPhoneHome}\"/>\n\t\t\t\t\t\t\t<Text text=\"{HomePhone}\"/>\n\t\t\t\t\t\t\t<Label text=\"{i18n>formCountry}\"/>\n\t\t\t\t\t\t\t<Text text=\"{Country}\"/>\n\t\t\t\t\t\t</f:content>\n\t\t\t\t\t</f:SimpleForm>\n\t\t\t\t</content>\n\t\t\t</Panel>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\nCreate the file `Employee.view.xml` inside the `webapp/view/employee` folder. This employee view displays master data for an employee in a panel with a `SimpleForm` control: first name, last name and so on. The data comes from a relative data binding that is set on the view level as we can see in the controller later. As we are focusing on the navigation aspects in this tutorial, we won't go into detail on the controls of the view. Just copy the code.\n\n\n\n## webapp/controller/employee/Employee.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.Employee\", {\n\t\tonInit: function () {\n\t\t\tvar oRouter = this.getRouter();\n\t\t\toRouter.getRoute(\"employee\").attachMatched(this._onRouteMatched, this);\n\t\t\t// Hint: we don't want to do it this way\n\t\t\t/*\n\t\t\toRouter.attachRouteMatched(function (oEvent){\n\t\t\t\tvar sRouteName, oArgs, oView;\n\t\t\t\tsRouteName = oEvent.getParameter(\"name\");\n\t\t\t\tif (sRouteName === \"employee\"){\n\t\t\t\t\tthis._onRouteMatched(oEvent);\n\t\t\t\t}\n\t\t\t}, this);\n\t\t\t*/\n\t\t},\n\t\t_onRouteMatched : function (oEvent) {\n\t\t\tvar oArgs, oView;\n\t\t\toArgs = oEvent.getParameter(\"arguments\");\n\t\t\toView = this.getView();\n\n\t\t\toView.bindElement({\n\t\t\t\tpath : \"/Employees(\" + oArgs.employeeId + \")\",\n\t\t\t\tevents : {\n\t\t\t\t\tchange: this._onBindingChange.bind(this),\n\t\t\t\t\tdataRequested: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(true);\n\t\t\t\t\t},\n\t\t\t\t\tdataReceived: function (oEvent) {\n\t\t\t\t\t\toView.setBusy(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t_onBindingChange : function (oEvent) {\n\t\t\t// No data for the binding\n\t\t\tif (!this.getView().getBindingContext()) {\n\t\t\t\tthis.getRouter().getTargets().display(\"notFound\");\n\t\t\t}\n\t\t}\n\t});\n});\n```\n\nNow we create the file `Employee.controller.js` in the `webapp/controller/employee` folder. In this controller file, we want to detect which employee shall be displayed in order to show the employee's data in the view. Therefore, we query the router for the route `employee` and attach a private event listener function `_onRouteMatched` to the matched event of this route.\n\nIn the event handler, we can access the `arguments` parameter from the `oEvent` parameter that contains all parameters of the pattern. Since this listener is only called when the route is matched, we can be sure that the mandatory parameter `employeeId` is always available as a key in `arguments`; otherwise the route would not have matched. The name of the mandatory parameter `employeeId` correlates to the `{employeeId}` from our pattern definition of the route `employee` and thus to the value in the URL.\n\nIn `_onRouteMatched` we call `bindElement()` on the view to make sure that the data of the specified employee is available in the view and its controls. The `ODataModel` will handle the necessary data requests to the back end in the background. While the data is loading, it would be nice to show a busy indicator by simply setting the view to `busy`. Therefore, we pass an events object to `bindElement()` to listen to the events `dataRequested` and `dataReceived`. The attached functions handle the busy state by calling `oView.setBusy(true)` and `oView.setBusy(false)` respectively.\n\nWe also add an event handler to the `change` event as a private function `_onBindingChange`. It checks if the data could be loaded by querying the binding context of the view. As seen in the previous steps, we will display the `notFound` target if the data could not be loaded.\n\n> ### Note:  \n> Instead of calling `attachMatched(…)` on a route we could also call `attachRouteMatched(…)` directly on the router. However, the event for the latter is fired for every matched event of any route in the whole app. We don't use the latter because we would have to implement an additional check for making sure that current route is the route that has been matched. We want to avoid this extra overhead and register on the route instead.\n\n\n\n## webapp/view/employee/EmployeeList.view.xml\n\n```xml\n<mvc:View\n\tcontrollerName=\"sap.ui.demo.nav.controller.employee.EmployeeList\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\">\n\t<Page\n\t\tid=\"employeeListPage\"\n\t\ttitle=\"{i18n>EmployeeList}\"\n\t\tshowNavButton=\"true\"\n\t\tnavButtonPress=\".onNavBack\"\n\t\tclass=\"sapUiResponsiveContentPadding\">\n\t\t<content>\n\t\t\t<List id=\"employeeList\" headerText=\"{i18n>ListOfAllEmployees}\" items=\"{/Employees}\">\n\t\t\t\t<items>\n\t\t\t\t\t<StandardListItem\n\t\t\t\t\t\ttitle=\"{FirstName} {LastName}\"\n\t\t\t\t\t\ticonDensityAware=\"false\"\n\t\t\t\t\t\ticonInset=\"false\"\n\t\t\t\t\t\ttype=\"Navigation\"\n\t\t\t\t\t\tpress=\".onListItemPressed\"/>\n\t\t\t\t</items>\n\t\t\t</List>\n\t\t</content>\n\t</Page>\n</mvc:View>\n```\n\nIt's time to change the `EmployeeList` view so that we can navigate to the new view. We set the attribute type of the `StandardListItem` template to `Navigation` to make the item clickable and indicate a navigation feature to the user. Additionally, we add an event handler for the `press` event that is called when the user clicks on an employee list item.\n\n\n\n## webapp/controller/employee/EmployeeList.controller.js\n\n```js\nsap.ui.define([\n\t\"sap/ui/demo/nav/controller/BaseController\"\n], function (BaseController) {\n\t\"use strict\";\n\treturn BaseController.extend(\"sap.ui.demo.nav.controller.employee.EmployeeList\", {\n\t\tonListItemPressed : function(oEvent){\n\t\t\tvar oItem, oCtx;\n\t\t\toItem = oEvent.getSource();\n\t\t\toCtx = oItem.getBindingContext();\n\t\t\tthis.getRouter().navTo(\"employee\",{\n\t\t\t\temployeeId : oCtx.getProperty(\"EmployeeID\")\n\t\t\t});\n\t\t}\n\t});\n});\n```\n\nFinally, we add the handler `onListItemPressed` for the `press` event to the `EmployeeList` controller. In the handler, we determine the `EmployeeID` of the list item by querying the binding context and accessing the property `EmployeeID` from the data model.\n\nThen we navigate to the `employee` route and pass a configuration object on to the `navTo` method with the mandatory parameter `employeeId` filled with the correct `EmployeeID`. The router always makes sure that mandatory parameters as specified in the route's pattern are set; otherwise an error is thrown.\n\n\n\n## webapp/i18n/i18n.properties\n\n```ini\n...\nEmployeeDetailsOf=Employee Details of\nEmployeeIDColon=Employee ID:\nformFirstName=First Name\nformLastName=Last Name\nformAddress=Address\nformCity=City\nformPostalCode=Postal Code\nformPhoneHome=Phone (Home)\nformCountry=Country\n```\n\nAdd the new texts to the `i18n.properties` file.\n\nThat's it. You can go to `webapp/index.html#/employees` and click on any list item to be redirected to corresponding employee's details. Check also what happens when you directly navigate to the following files:\n\n-   `webapp/index.html#/employees/3`\n\n-   `webapp/index.html#/employees/33`\n\n\n**Related Information**  \n\n\n[API Reference: `sap.ui.model.Binding`](https://ui5.sap.com/#/api/sap.ui.model.Binding)\n\n",
  "excerpt": "<!-- loiof96d2522a5ca4382a274ae3c6d002ca0 --> Step 7: Navigate to Routes with Mandatory Parameters In this step, we implement a feature that allows the user to click on an employee in the list to see ...",
  "wordCount": 1405,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}