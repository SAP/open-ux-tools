{
  "id": "sapui5-docs-04-essentials-xml-model-a53e71d-md",
  "title": "XML Model",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/xml-model-a53e71d.md",
  "lastModified": "2025-09-01T18:17:10.556Z",
  "tags": [
    "ui5-framework",
    "md",
    "XML",
    "Model"
  ],
  "headers": [
    "XML Model",
    "Sorting and Filtering in XML Models",
    "XML Namespace Support",
    "Binding Path Syntax for XML Models"
  ],
  "content": "<!-- loioa53e71d85fae4d0887a8b58431197a27 -->\n\n# XML Model\n\nThe XML model allows to bind controls to XML data. It is a client-side model intended for small datasets, which are completely available on the client. The XML model does not contain mechanisms for server-based paging or loading of deltas. It supports two-way binding.\n\nTo instantiate the model, use the following code:\n\n```js\nvar oModel = new sap.ui.model.xml.XMLModel();\n```\n\nThe XML model allows to bind controls to XML data. It is a client-side model intended for small data sets, which are completely available on the client. The XML model does not contain mechanisms for server-based paging or loading of deltas. It supports two-way binding.\n\n```js\noModel.setData(oXMLDocument);\n```\n\nTo create inline XML data or to get XML data as a string, the XML model provides a `setXML` method. This method takes XML in text format and uses the browser's XML parser to create a document.\n\n```js\noModel.setXML(\"<?xml version=\\\"1.0\\\"?><some><xml>data</xml></some>\");\n```\n\nUsually, you load your data from the server using an HTTP-based service, so the `loadData` method provides an easy way to load XML data from the given URL:\n\n```js\noModel.loadData(\"data.xml\");\n```\n\nFor more information, see the [API Reference](https://ui5.sap.com/#/api/sap.ui.model.xml.XMLModel) in the Demo Kit.\n\n**Related Information**  \n\n\n[API Reference: `sap.ui.model.xml.XMLModel`](https://ui5.sap.com/#/api/sap.ui.model.xml.XMLModel)\n\n<a name=\"loioab8ed73c5bbd4a2b9c9840401ebf25cf\"/>\n\n<!-- loioab8ed73c5bbd4a2b9c9840401ebf25cf -->\n\n## Sorting and Filtering in XML Models\n\nIf you use an XML model for data binding, sorting and filtering is implemented in JavaScript because all data is available on the client. You can use custom methods for sorting and filtering in an XML model. To define custom methods, set the `fnCompare` method on the Sorter object or the `fnTest` method on the Filter object after creating it.\n\nThe `fnTest` method of the Filter gets the value to test as the only parameter and returns, whether the row with the given value should be filtered or not. To implement a filter, use the following code :\n\n```js\nvar oFilter = new sap.ui.model.Filter(\"property\");\noFilter.fnFilter = function(value) {\n    return (value > 100);\n};\n```\n\nThe `fnCompare` method of the Sorter gets the two values to compare as parameters and returns -1, 0 or 1, dependent which of the two values should be ordered before the other. To implement a sorter, use the following code:\n\n```js\nvar oSorter = new sap.ui.model.Sorter(\"property\");\noSorter.fnCompare = function(value1, value2) {\n    if (value1 < value2) return -1;\n    if (value1 == value2) return 0;\n    if (value1 > value2) return 1;\n};\n```\n\n<a name=\"loio8674a69845c846d3bd68b60685bb5683\"/>\n\n<!-- loio8674a69845c846d3bd68b60685bb5683 -->\n\n## XML Namespace Support\n\nThe XML model supports documents using XML namespaces.\n\nFor this purpose, you must declare namespaces using the `setNameSpace` method. The namespace prefixes do not necessarily need to be the same as in the XML document, they only used in the binding paths which are used to address nodes in the document.\n\nAssumed this sample XML document:\n\n```xml\n\n<data xmlns=\"http://tempuri.org/base\" xmlns:ext=\"http://tempuri.org/ext\">\n     <ext:entry id=\"0\" value=\"foo\" />\n     <ext:entry id=\"1\" value=\"foo\" />\n</data>\n```\n\nThe namespaces must be declared in the JavaScript like this, to be able to bind to them:\n\n```js\n\nvar oModel = new sap.ui.model.xml.XMLModel(oXMLDoc);\noModel.setNameSpace(\"http://tempuri.org/base\");\noModel.setNameSpace(\"http://tempuri.org/ext\", \"e\"); [...]\noTable.bindRows(\"/e:entry\");\n```\n\n<a name=\"loiob8a2c24356c443228f7819d45697a2b8\"/>\n\n<!-- loiob8a2c24356c443228f7819d45697a2b8 -->\n\n## Binding Path Syntax for XML Models\n\nXML models differentiate between attributes and content. XML has no arrays and defines lists as multiple elements with the same name instead. This makes the binding path syntax for XML models more difficult than for JSON or OData models.\n\nFor attributes, a special selector using the \"@\" character exists and \"text\\(\\)\" can be used to reference the content text of an element. Lists are referenced by using the path to the multiple element.\n\n> ### Note:  \n> For the XML model the root must **not** be included in the path.\n\n```xml\n\n<companies>\n  <company name=\"Treefish Inc\">\n    <info>\n       <employees>3</employees>\n    </info>\n    <contact phone=\"873\">Barbara</contact>\n    <contact phone=\"734\">Gerry</contact>\n    <contact phone=\"275\">Susan</contact>\n  </company>\n</companies>\n```\n\nAbsolute binding paths within this model:\n\n```\n/company/@name\n/company/info/employees\n```\n\nRelative binding paths within the `/company` context:\n\n```\n@name\ninfo/employees/text()\n```\n\nRelative binding paths within a list binding of `/company/contact`:\n\n```\ntext()\n@phone\n```\n\n> ### Note:  \n> In a similar JSON model you would use `/companies/company/locations` as binding path for the `locations` collection. In an XML model the respective collection binding path is: `/company/locations/location`.\n\n",
  "excerpt": "<!-- loioa53e71d85fae4d0887a8b58431197a27 --> XML Model The XML model allows to bind controls to XML data. It is a client-side model intended for small datasets, which are completely available on the ...",
  "wordCount": 691,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}