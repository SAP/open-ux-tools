{
  "id": "sapui5-docs-10-more-about-controls-creating-tables-5eb6f63-md",
  "title": "Creating Tables",
  "category": "ui5-framework",
  "path": "docs/10_More_About_Controls/creating-tables-5eb6f63.md",
  "lastModified": "2025-09-01T18:17:10.687Z",
  "tags": [
    "ui5-framework",
    "md",
    "Creating",
    "Tables"
  ],
  "headers": [
    "Creating Tables",
    "Procedure",
    "Next Steps"
  ],
  "content": "<!-- loio5eb6f63e0cc547d0bdc934d3652fdc9b -->\n\n# Creating Tables\n\nA Table basically consists of columns \\(`sap.m.Column`\\) and rows. The rows, defines as `sap.m.ColumnListItems` consist of cells.\n\n\n\n## Procedure\n\n1.  To build a table, we first need to define columns. For this purpose you can define the Column control with the following properties or aggregations:\n\n\n    <table>\n    <tr>\n    <th valign=\"top\">\n\n    Property or Aggregation\n    \n    </th>\n    <th valign=\"top\">\n\n    Description\n    \n    </th>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    **header**\n    \n    </td>\n    <td valign=\"top\">\n    \n    Defines column header. Any control can be used but most likely **Label** or **Text** control. If any column has header definition then header line gets visible for all columns.\n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    **footer**\n    \n    </td>\n    <td valign=\"top\">\n    \n    Any control can be assigned to be displayed in the column footer. If at least one column has a footer definition, then the footer line is displayed for all columns.\n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    **width**\n    \n    </td>\n    <td valign=\"top\">\n    \n    Defines the width of the column. If you leave it empty then this column covers the remaining space.\n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    **hAlign**\n    \n    </td>\n    <td valign=\"top\">\n    \n    Defines the horizontal alignment\\(*Begin*, *Center*, *End*, *Left*, *Right*\\) of the column content. Controls with a textAlign property inherit the horizontal alignment from Column hAlign property.\n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    **vAlign**\n    \n    </td>\n    <td valign=\"top\">\n    \n    Defines the vertical alignment of column cells. Possible values are *Top*, *Middle*, and *Bottom*. This property does not affect the vertical alignment of header and footer.\n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    **visible**\n    \n    </td>\n    <td valign=\"top\">\n    \n    Specifies whether the column is visible. Invisible columns are not rendered.\n    \n    </td>\n    </tr>\n    </table>\n    \n2.  Sure, we have more properties to make it responsive and to change the design of a column, but we will explain this later. Now, let's see how we can define a right aligned column header:\n\n    ```js\n    \n    <Table>\n        <columns>\n          <Column\n            width=\"12em\">\n            <Text text=\"Product\" />\n          </Column>\n           <Column\n            minScreenWidth=\"Tablet\"\n            demandPopin=\"true\">\n            <Text text=\"Supplier\" />\n          </Column>\n        </columns>\n    </Table>\n    ```\n\n3.  To build a Table, you have to define table rows. For this purpose you use `ColumnListItems`. `ColumnListItems` have a cell aggregation \\(one to many\\) which defines cells in one row according to the column definition. Let's build a real table example to understand it better. Here is the implementation:\n\n    ```js\n    \n    <Table>\n        <columns>\n          <Column\n            width=\"12em\">\n            <Text text=\"Product\" />\n          </Column>\n           <Column\n            minScreenWidth=\"Tablet\"\n            demandPopin=\"true\">\n            <Text text=\"Supplier\" />\n          </Column>\n        </columns>\n    \n    \n    <items>\n          <ColumnListItem>\n            <cells>\n              <ObjectIdentifier\n                title=\"{Name}\"\n                text=\"{ProductId}\"\n                class=\"sapUiTinyMarginTopBottom\" />\n              <Text\n                text=\"{SupplierName}\" />\n            </cells>\n          </ColumnListItem>\n        </items>\n      </Table>\n    \n    ```\n\n    And that is what we have built:\n\n    ![](images/SAPUI5_Mobile_Table_Features_Column_List_Item_e654c84.png)\n\n    The `mergeFunctionName` property holds the function that the column merge functionality uses to pull the property value to compare for duplicates. The default of `getText` can be used for the most common use cases, where an `sap.m.Label` or `sap.m.Text` control is used, but if you have another control with a different function to pull the comparison property value from, you can specify it as the `mergeFunctionName`. For example, the `sap.m.Icon` control has a `getSrc` getter function that returns the `src` property value - the icon's URI, which is a good candidate for comparison.\n\n\n\n\n## Next Steps\n\n**API References**\n\n-   [sap.m.Column](https://ui5.sap.com/#/api/sap.m.Column)\n-   [sap.m.ColumnListItem](https://ui5.sap.com/#/api/sap.m.ColumnListItem)\n\n",
  "excerpt": "<!-- loio5eb6f63e0cc547d0bdc934d3652fdc9b --> Creating Tables A Table basically consists of columns \\(sap.m.Column\\) and rows. The rows, defines as sap.m.ColumnListItems consist of cells. Procedure 1....",
  "wordCount": 507,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}