{
  "id": "sapui5-docs-04-essentials-components-958ead5-md",
  "title": "Components",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/components-958ead5.md",
  "lastModified": "2025-09-01T18:17:10.496Z",
  "tags": [
    "ui5-framework",
    "md",
    "Components"
  ],
  "headers": [
    "Components",
    "Structure of a Component",
    "Differentiation to Other Concepts in SAPUI5"
  ],
  "content": "<!-- loio958ead51e2e94ab8bcdc90fb7e9d53d0 -->\n\n# Components\n\nComponents are independent and reusable parts used in SAPUI5 applications.\n\nAn application can use components from different locations from where the application is running. Thus, components can be developed by different development teams and be used in different projects. Components also support the encapsulation of closely related parts of an application into a particular component. This makes the structure of an application and its code easier to understand and to maintain.\n\n> ### Note:  \n> Constraints due to cross-origin issues also apply to components.\n\nSAPUI5 provides the following two types of components:\n\n-   Faceless components \\(class: `sap.ui.core.Component`\\)\n\n    Faceless components do **not** have a user interface and are used for coding where no UI elements are needed. Please consider that a faceless component can't be added to a `ComponentContainer`. For more information, see the API Reference: [`sap.ui.core.ComponentContainer`](https://ui5.sap.com/#/api/sap.ui.core.ComponentContainer%23associations).\n\n-   UI components \\(class: `sap.ui.core.UIComponent`\\)\n\n    UI components extend components and add rendering functionality to the component. They represent a screen area or element on the user interface, for example, a button or a shell, along with the respective settings and metadata. `sap.ui.core.UIComponent` extends `sap.ui.core.Component` and adds rendering functionality to the component.\n\n\nThe `sap.ui.core.Component` class is the base class and provides the metadata for both types of components. To extend the functionality, components can inherit from their base class or from another component.\n\nComponents are loaded and created via the component factory function `sap.ui.component`. You can either pass the name of the component or the URL of the descriptor file \\(`manifest.json`\\) to load it via the descriptor, see [Manifest First Function](manifest-descriptor-for-applications-components-and-libraries-be0cf40.md#loiobe0cf40f61184b358b5faedaec98b2da__manifirst). We recommend loading the component using the descriptor \\(if available\\) - it improves performance during the initial load since the loading process can be parallelized and optimized.\n\nAfter loading the descriptor, the component factory can load the dependencies \\(SAPUI5 libraries and other dependent components\\) in parallel next to the component preload, and also models can be preloaded.\n\n\n\n<a name=\"loio958ead51e2e94ab8bcdc90fb7e9d53d0__section_N10059_N10011_N10001\"/>\n\n## Structure of a Component\n\nA component is organized in a unique namespace, the namespace of the component equals the component name.\n\nBasically, a component consists of the component controller \\(`Component.js`\\) and a descriptor \\(`manifest.json`\\). Only the component controller is mandatory, but we recommend to also use the descriptor file. The descriptor then contains the component metadata, and also expresses the component dependencies and configuration \\(see [Manifest \\(Descriptor for Applications, Components, and Libraries\\)](manifest-descriptor-for-applications-components-and-libraries-be0cf40.md)\\). All required and optional resources of the component have to be organized in the namespace of the component.\n\n> ### Note:  \n> Optional resources are, for example, `CSS`, `js`, or `i18n` files, views, and controllers.\n\nThe following figure gives an example of a component folder structure.\n\n![Using Components - Component Tree](images/Using_Components_-_Component_Tree_1effb71.png)\n\nThe `ComponentContainer` control wraps a UI component. You use the `ComponentContainer` control in the SAPUI5 control tree in the same way as any other control.\n\n\n\n## Differentiation to Other Concepts in SAPUI5\n\nThe following list explains how other concepts used in SAPUI5 are distinguished from the SAPUI5 components concept:\n\n-   Composite controls\n\n    Both concepts provide a set of controls behind a single interface. Composite controls are intended for reuse within control development and allow to include existing controls in a complex control whereas components are intended for reuse in application development.\n\n-   UI library\n\n    The UI library is the deployable unit around controls: Controls are never deployed standalone, but as part of a control library. Components, however, are self-contained and should **not** be used to deploy controls.\n\n-   Notepad control\n\n    A notepad control is another way to define a control. Notepad controls have all the characteristics of a control.\n\n-   MVC\n\n    The MVC concept allows to define views and controllers and, thus, to structure and reuse parts within an application. As MVC can only be deployed separately and has no means to define dependent styles or scripts that are loaded together with a view, this concept is of limited use across different applications.\n\n\n**Related Information**  \n\n\n[Manifest \\(Descriptor for Applications, Components, and Libraries\\)](manifest-descriptor-for-applications-components-and-libraries-be0cf40.md \"The manifest (also known as descriptor for applications, components, and libraries, in short: app descriptor) is inspired by the WebApplication Manifest concept introduced by the W3C. The manifest provides a central, machine-readable, and easy-to-access location for storing metadata associated with an application, an application component, or a library.\")\n\n[API Reference: `sap.ui.core.Component`](https://ui5.sap.com/#/api/sap.ui.core.Component)\n\n",
  "excerpt": "<!-- loio958ead51e2e94ab8bcdc90fb7e9d53d0 --> Components Components are independent and reusable parts used in SAPUI5 applications. An application can use components from different locations from wher...",
  "wordCount": 708,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}