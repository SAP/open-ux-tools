{
  "id": "sapui5-docs-04-essentials-resource-handling-modularization-and-localization-91f2b4d-md",
  "title": "Resource Handling: Modularization and Localization",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/resource-handling-modularization-and-localization-91f2b4d.md",
  "lastModified": "2025-09-01T18:17:10.539Z",
  "tags": [
    "ui5-framework",
    "md",
    "Resource",
    "Handling",
    "Modularization",
    "and",
    "Localization"
  ],
  "headers": [
    "Resource Handling: Modularization and Localization",
    "Client-Side Resource Handling",
    "Server-Side Resource Handling",
    "Resource Servlet",
    "Configuration",
    "Development Mode",
    "Resource Browsing",
    "Tunneling a Remote Location",
    "Resource Packaging",
    "OSGi Servlet Container"
  ],
  "content": "<!-- loio91f2b4d66f4d1014b6dd926db0e91070 -->\n\n# Resource Handling: Modularization and Localization\n\nThe handling of resources in SAPUI5 is divided in a client-side and a server-side part. The two parts are complementary and don't depend on each other.\n\nThe server-side resource handling is an optional component to improve the client-server interaction by providing a server-side locale fallback instead of a client-side fallback with multiple requests. The server-side resource handling is mainly used in Eclipse to support the modularized development of SAPUI5 applications and libraries.\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_866E1131207A4BD98456A7C2E53F12D3\"/>\n\n## Client-Side Resource Handling\n\nSAPUI5 provides the following mechanism for handling resources on the client:\n\n-   Modularization of JavaScript files, see [Modules and Dependencies](modules-and-dependencies-91f23a7.md)\n\n-   Localization of application texts with resource bundles, see [Resource Bundles](resource-bundles-91f225c.md)\n\n\nIn both cases, SAPUI5 loads additional resources from a server. This server can be any kind of web server \\(simple, Java, ABAP, ...\\). Both do **not** depend on a specific server-side technology.\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_6913A7D3F65341FBA039B6231078E45C\"/>\n\n## Server-Side Resource Handling\n\nFor the Java server and the integration into Eclipse, SAPUI5 provides a resource handler to improve the interaction between client and server, for example by providing a server-side locale fallback for the language to avoid multiple requests to get the correct language. It's also used to support modularized development of SAPUI5 applications and libraries. The Java resource handler is aligned with the concept of the JavaServer Faces. The following prerequisites apply:\n\n-   The default implementation must support packaging resources in the web application root under the path `resources/<resourceIdentifier>` relative to the web app root.\n\n-   Resources packaged in the classpath must reside under the JAR entry name `META-INF/resources/<resourceIdentifier>` \n\n\nThe SAPUI5 resource handler extends this concept to support standard and test-relevant resources. The resources are therefore packaged into the following paths:\n\n-   `resources/**` \n\n    Resources are all kind of JavaScript, CSS, Mimes, Resource Bundles, which are relevant for the runtime.\n\n-   `test-resources/**` \n\n    Test resources are resources that are samples and only relevant for testing purposes, for example, the content of the SAPUI5 test suite.\n\n\nThe resource handler in SAPUI5 provides the following additional features:\n\n-   Theme fallback:\n\n    If resources aren't available for a theme, the resource handler automatically checks the base theme for such resources and returns them instead of a 404 error message.\n\n-   Resource bundle fallback:\n\n    This fallback is similar to the client-side mechanism for loading resource bundles, but it negotiates the request on the server and returns the best found resource bundle instead of issuing a 404 error, for example:\n\n    `messagebundle_en_US.properties > messagebundle_en.properties > messagebundle.properties` \n\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_A11484375D5A4FBBA47056785D2ECE32\"/>\n\n## Resource Servlet\n\nFor Java Servlet containers, SAPUI5 provides a `ResourceServlet` to manage the access to SAPUI5 resources within the web application and the various UI libraries in the classpath. The following snippet shows how to enable the resource servlet for SAPUI5:\n\n```xml\n  <!-- ============================================================ -->\n  <!-- SAPUI5 resource servlet used to handle application resources -->\n  <!-- ============================================================ -->\n   \n\n  <servlet>\n\n    <display-name>ResourceServlet</display-name>\n\n    <servlet-name>ResourceServlet</servlet-name>\n\n    <servlet-class>com.sap.ui5.resource.ResourceServlet</servlet-class>\n\n  </servlet>\n\n  <servlet-mapping>\n\n    <servlet-name>ResourceServlet</servlet-name>\n\n    <url-pattern>/resources/*</url-pattern>\n\n  </servlet-mapping>\n\n  <servlet-mapping>\n\n    <servlet-name>ResourceServlet</servlet-name>\n\n    <url-pattern>/test-resources/*</url-pattern>\n\n  </servlet-mapping>\n```\n\nBefore you use it, make sure that the `ResourceServlet` is available in the classpath as JAR file.\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_2478D35EAEE94B4A990BA8F6D7C02F98\"/>\n\n## Configuration\n\nThe resource handler is configured via context parameters, which are defined in the `web.xml`. The following table gives an overview about configuration parameters:\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nKey\n\n</th>\n<th valign=\"top\">\n\nDescription\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.USE_CACHE`\n\n</td>\n<td valign=\"top\">\n\nFlag for resource cache enabling; default: `true`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.MAX_AGE`\n\n</td>\n<td valign=\"top\">\n\nSpecifies the maximum age of resources in milliseconds; default: `604800000` = 1 week\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.ACCEPTED_ORIGINS`\n\n</td>\n<td valign=\"top\">\n\nList of accepted origins, for example `*`, `*mycompany.corp`, or `server.mycompany.corp`; default: empty\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.DEV_MODE`\n\n</td>\n<td valign=\"top\">\n\nFlag development mode enabling; default: `false`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.TEMPLATE_PATH`\n\n</td>\n<td valign=\"top\">\n\nSpecifies path to template for resource listing; default: `/templates/listing.html`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.VERBOSE`\n\n</td>\n<td valign=\"top\">\n\nSpecifies verbosity of the resource handler; default: `false`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.REMOTE_LOCATION`\n\n</td>\n<td valign=\"top\">\n\nSpecifies the location that is used to proxy requests to resources that aren't available locally; default: empty\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.PREFER_REMOTE_LOCATION`\n\n</td>\n<td valign=\"top\">\n\nFlag to resolve the resource from the remote location before fallback to classpath; default: `false`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`com.sap.ui5.resource.USE_SERVER_CACHE`\n\n</td>\n<td valign=\"top\">\n\nFlag to enable caching of any resources in resource servlet; default: `true` \\(default in dev mode: `false`\n\n</td>\n</tr>\n</table>\n\nConfiguration parameters are added as context parameters to the web.xml.\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_4A80AABC6E614DBBB70B11702BE2FBBE\"/>\n\n## Development Mode\n\nWhen you're starting to develop SAPUI5 controls and modules being located inside the servlet paths `resources/` or `test-resources/`, it makes the development process easier to disable the caching of such resources as well as to enable the resource browsing. To activate the development mode, add the following context parameter:\n\n```xml\n  <!-- BEGIN: DEV MODE -->\n  <context-param>\n    <param-name>com.sap.ui5.resource.DEV_MODE</param-name>\n    <param-value>true</param-value>\n  </context-param>\n  <!-- END: DEV MODE -->\n```\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_C8A8BF692B1C4DBE88D647F79CFD9F4F\"/>\n\n## Resource Browsing\n\nIf the development mode is active, you can browse resources as follows via the resource browser:\n\n-   `%SERVER_URL%!/resources/`\n-   `%SERVER_URL%/test-resources/`\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_476438027C05487BBD11549BFA9580DC\"/>\n\n## Tunneling a Remote Location\n\nYou can use the `ResourceServlet` to tunnel/proxy requests to another server that provides SAPUI5 resources instead of referring to SAPUI5 from a remote location inside the bootstrap script tag and thus avoid cross domain issues. To activate the remote location tunneling/proxying, add the following context parameter to the web.xml of your application:\n\n```xml\n  <context-param>\n    <param-name>com.sap.ui5.resource.REMOTE_LOCATION</param-name>\n    <param-value>http://%server%:%port%/sapui5</param-value>\n  </context-param>\n```\n\nThis dispatches the requests from `resources/sap/m/Button.js` to `http://%server%:%port%/sapui5/resources/sap/m/Button.js`.\n\nIf you are located behind a proxy and the remote location is outside your localnetwork, you can configure the proxy settings via the standard Java Networking and Proxy configurations by setting the system properties \\(for HTTP\\): `http.proxyHost`, `http.proxyPort`, `http.nonProxyHosts`, or \\(for HTTPS\\) `https.proxyHost`, `https.proxyPort`, `https.nonProxyHosts` of your Java runtime environment.\n\nIn general, for the resources returned from the proxy the `ResourceServlet` is enabling caching. By default, it uses the configured `com.sap.ui5.resource.MAX_AGE` to avoid too much load on the `ResourceServlet`.\n\n**Verify that a Resource was Retrieved from Remote Location**\n\nWhen in development mode, it's possible to verify that a resource was retrieved from the desired remote location by checking the response header of the respective request. In this case, the response header has an entry `x-sap-ResourceUrl = remote resource URL`, for example:\n\n```\nx-sap-ResourceUrl = http://%server%:%port%/sap/public/bc/ui5_ui5/resources/sap-ui-core.js\n```\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_265C4412784443DE8C2F6C3326954707\"/>\n\n## Resource Packaging\n\nResource packaging for web applications and Java modules can be any kind of JAR file, for example SAPUI5 UI library that is available in the classpath of the web application.\n\nStore the resources as follows:\n\n-   Web application:\n\n    ```\n    WebContent/\n      resources/\n        **/**\n      test-resources/\n        **/**\n    ```\n\n-   SAPUI5 UI libraries:\n\n    ```\n    META-INF/\n      resources/\n        **/**\n      test-resources/\n        **/**\n    ```\n\n    For custom JAR files, you need to apply to this on your own.\n\n\n\n\n<a name=\"loio91f2b4d66f4d1014b6dd926db0e91070__section_EF657968B41745BCB39F62BB49AC7AFA\"/>\n\n## OSGi Servlet Container\n\nWhen you run SAPUI5 as an OSGi web bundle and reference the UI libraries as OSGi bundles, you need to determine the SAPUI5 OSGi bundles as follows:\n\n-   Extend the `ResourceServlet` in the OSGi servlet container by using an OSGi fragment that is responsible to add the OSGi flavor for the determination of UI libraries. Now, the `ResourceServlet` is aware of the OSGi bundles and can search within the OSGi servlet container for UI libraries.\n\n-   The `OSGiResourceServlet` uses the following entry in the `MANIFEST.MF` of the UI library's JAR files to determine the relevant UI libraries:\n\n    ```\n    x-sap-ui5-ContentTypes: UILibrary\n    \n    ```\n\n\n",
  "excerpt": "<!-- loio91f2b4d66f4d1014b6dd926db0e91070 --> Resource Handling: Modularization and Localization The handling of resources in SAPUI5 is divided in a client-side and a server-side part. The two parts a...",
  "wordCount": 1224,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}