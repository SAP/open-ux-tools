{
  "id": "sapui5-docs-06-sap-fiori-elements-defining-and-adapting-sections-facfea0-md",
  "title": "Defining and Adapting Sections",
  "category": "ui5-framework",
  "path": "docs/06_SAP_Fiori_Elements/defining-and-adapting-sections-facfea0.md",
  "lastModified": "2025-09-01T18:17:10.599Z",
  "tags": [
    "ui5-framework",
    "md",
    "Defining",
    "and",
    "Adapting",
    "Sections"
  ],
  "headers": [
    "Defining and Adapting Sections",
    "Adding a Field Group to a Section",
    "Rendering a Table in a Section",
    "Increased Section and Table Height to Use Available Free Space on the Object Page",
    "IDs for Collection Facets",
    "Additional Features in SAP Fiori Elements for OData V2",
    "Defining the SmartForm Column Layout",
    "Additional Features in SAP Fiori Elements for OData V4",
    "Tab Representation vs. Anchor Representation",
    "Special Handling of Text Area Label as a Single Field in a Section or Subsection",
    "Responsive Column Layout"
  ],
  "content": "<!-- loiofacfea09018d4376acaceddb7e3f03b6 -->\n\n# Defining and Adapting Sections\n\nThe object page content is arranged into sections and subsections that you can configure.\n\nYou can use the `com.sap.vocabularies.UI.v1.Facets` annotations to build sections. Different facets have been defined to display important information in the content area sections.\n\n\n\nA facet contains collection facets \\(`UI.CollectionFacet`\\) as well as reference facets \\(`UI.ReferenceFacet`\\). Collection facets are made up of a list of records, each representing a reference facet. Reference facets represent a reference, for example, to a `UI.LineItem` \\(list on the object page\\), `UI.Chart` \\(Chart\\), or `UI.Identification` annotation.\n\nA collection or reference facet directly under the `UI.Facets` represents a section. A section can also have subsections under it. To create a subsection, add a collection facet under the `UI.Facet` and then add reference or collection facets underneath this collection facet.\n\nAll reference facets that are part of the second-level collection facet are arranged one beside the other.\n\nNote the following behavior:\n\n-   In SAP Fiori elements for OData V2, the reference facets outside the second-level collection facet are ignored.. If there is no second-level collection facet, all reference facets are considered.\n\n-   In SAP Fiori elements for OData V4, the reference facets outside the second-level collection facet are considered and shown as separate subsections.\n\n\nIn the figure below, the collection facet for *General Information* combines two reference facets that both point to a field group.\n\n  \n  \n**Object Page: CollectionFacet**\n\n![](images/Object_Page_Collection_Facet_a7f074e.png \"Object Page: CollectionFacet\")\n\n> ### Note:  \n> -   `UI.CollectionFacets` at third level and beyond are not considered.\n> \n> -   You must not use `UI.CollectionFacet` under `UI.Facets` at design time, if the collection facet has only one `UI.ReferenceFacet` within it, as there can be rendering issues. In such cases, you can directly use `UI.ReferenceFacet` under the `UI.Facets`.\n\nFurthermore, reference facets can refer to identification sections, the field group, contact, or line item annotations. For line items, a list is rendered.\n\n  \n  \n**Object Page: ReferenceFacet**\n\n![](images/Object_Page_Reference_Facet_9fa2aec.png \"Object Page: ReferenceFacet\")\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```xml\n> <Annotation Term=\"UI.Facets\">\n>     <Collection>\n>         <Record Type=\"UI.ReferenceFacet\">\n>             <PropertyValue Property=\"Label\" String=\"{@i18n>@GeneralInfoFacetLabel}\"/>\n>             <PropertyValue Property=\"Target\" AnnotationPath=\"@UI.FieldGroup#GeneralInformation\" />\n>         </Record>\n>         <Record Type=\"UI.CollectionFacet\">\n>             <PropertyValue Property=\"ID\" String=\"FurtherData\"/>\n>             <PropertyValue Property=\"Label\" String=\"{@i18n>@FurtherData}\"/>\n>             <PropertyValue Property=\"Facets\">\n>                 <Collection>\n>                     <Record Type=\"UI.CollectionFacet\">\n>                     </Record>\n>                 </Collection>\n>             </PropertyValue>\n>         </Record>\n>     </Collection>\n> </Annotation>\n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> ```\n> @UI.Facet: [\n>   {\n>     label: '{@i18n>@GeneralInfoFacetLabel}',\n>     targetQualifier: 'GeneralInformation',\n>     type: #FIELDGROUP_REFERENCE,\n>     purpose: #STANDARD\n>   },\n>   {\n>     id: 'FurtherData',\n>     label: '{@i18n>@FurtherData}',\n>     type: #COLLECTION,\n>     purpose: #STANDARD\n>   },\n>   {\n>     parentId: 'FurtherData',\n>     purpose: #STANDARD\n>   }\n> ]\n> product;\n> \n> ```\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> UI.Facets : [\n>     {\n>         $Type : 'UI.ReferenceFacet',\n>         Label : '{@i18n>@GeneralInfoFacetLabel}',\n>         Target : '@UI.FieldGroup#GeneralInformation',\n>     },\n>     {\n>         $Type : 'UI.CollectionFacet',\n>         ID : 'FurtherData',\n>         Label : '{@i18n>@FurtherData}',\n>         Facets : [\n>             {\n>                 $Type : 'UI.CollectionFacet'\n>             }\n>         ]\n>     }\n> ]\n> ```\n\nYou can hide and display sections based on properties.\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```xml\n> <Record Type=\"UI.ReferenceFacet\">\n>    <Annotation Term=\"UI.Hidden\" Path=\"IsActiveEntity\"/>\n>    <PropertyValue Property=\"Label\" String=\"{@i18n>@SalesData}\" />\n>    <PropertyValue Property=\"Target\" AnnotationPath=\"to_ProductSalesData/@UI.Chart\" />\n> </Record>\n> \n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> ```\n> @UI.facet: [\n>  {\n>   label: '{@i18n>@SalesData}',\n>   type:         #DATAPOINT_REFERENCE,\n>   targetElement: '_PRODUCTSALESDATA',\n>   purpose: #STANDARD\n>  }\n> ]\n> product;\n> ```\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> UI.Facets : {\n>     $Type : 'UI.ReferenceFacet',\n>     Label : '{@i18n>@SalesData}',\n>     Target : 'to_ProductSalesData/@UI.Chart',\n>     ![@UI.Hidden] : IsActiveEntity\n> }\n> ```\n\n> ### Tip:  \n> -   You must not use a comma \\(,\\) in a section or subsection title, as commas serve as delimiters in SAP Fiori elements. A comma is used while grouping backend messages for a field within the section or subsection.\n> \n> -   If the object page uses an icon tab bar for sections, then the section title isn't displayed in the content area. If the object page uses an anchor bar for sections, then only the title of the first section is hidden in the content area.\n> \n> -   For object pages configured with *Page* section layout mode, the following applies: if a section/subsection contains only a table or a chart as a control, the title of the section or subsection is hidden but the title of the control is replaced with the title from the section or subsection. In *Tabs* mode, this only applies to subsections but isn't applied to sections. For SAP Fiori elements for OData V2, this special logic is also not invoked if the section or subsection has multiple controls configured within it and, at runtime, due to dynamic visibility or UI adaptation, the section/subsection has a single visible control.\n> \n> \n> ![](images/section-subsection_title_08a8f08.png)\n\n\n\n<a name=\"loiofacfea09018d4376acaceddb7e3f03b6__section_utp_3gw_l4b\"/>\n\n## Adding a Field Group to a Section\n\nThis video shows the step-by-step procedure for adding a field group to a section on the object page: \n\nFor more information, see [Grouping of Fields](grouping-of-fields-cb1748e.md).\n\n\n\n<a name=\"loiofacfea09018d4376acaceddb7e3f03b6__section_r5n_cld_dmb\"/>\n\n## Rendering a Table in a Section\n\nTo render a table in a section, follow these steps:\n\n1.  Include a list in the section, indicated by `com.sap.vocabularies.UI.v1.LineItem` or `com.sap.vocabularies.UI.v1.PresentationVariant`. In SAP Fiori elements for OData V4, `UI.v1.SelectionPresentationVariant` is also supported. If `PresentationVariant` is specified, then it must have `UI.LineItem` as the first property of the \"Visualizations\". If a`SelectionPresentationVariant` is specified, it must contain a valid `PresentationVariant` with `UI.LineItem` as the first property of the \"Visualizations\".\n\n    > ### Sample Code:  \n    > XML Annotation\n    > \n    > ```\n    >         <Annotation Term=\"UI.Facets\">\n    >           <Collection>\n    >             <Record Type=\"UI.CollectionFacet\">\n    >               <PropertyValue Property=\"ID\" String=\"FacetIdentifier1\"/>\n    >               <PropertyValue Property=\"Label\" String=\"Section 1\"/>\n    >               <PropertyValue Property=\"Facets\">\n    >                 <Collection>\n    >                   <Record Type=\"UI.ReferenceFacet\">\n    >                     <PropertyValue Property=\"ID\" String=\"FacetIdentifier2\"/>\n    >                     <PropertyValue Property=\"Target\" AnnotationPath=_Child/@UI.LineItem/>\n    >                   </Record>\n    >                 </Collection>\n    >               </PropertyValue>\n    >             </Record>\n    > \n    >             <Record Type=\"UI.CollectionFacet\">\n    >               <PropertyValue Property=\"ID\" String=\"FacetIdentifier2\"/>\n    >               <PropertyValue Property=\"Label\" String=\"Section 2\"/>\n    >               <PropertyValue Property=\"Facets\">\n    >                 <Collection>\n    >                   <Record Type=\"UI.ReferenceFacet\">\n    >                     <PropertyValue Property=\"ID\" String=\"FacetIdentifier2\"/>\n    >                     <PropertyValue Property=\"Target\" AnnotationPath=_Child/@UI.SelectionPresentationVariant#mySPV/>\n    >                   </Record>\n    >                 </Collection>\n    >               </PropertyValue>\n    >             </Record>\n    >           </Collection>\n    >         </Annotation>\n    > ```\n\n    > ### Sample Code:  \n    > CAP CDS Annotation\n    > \n    > ```\n    >     Facets                              : [\n    >       {\n    >         $Type : 'UI.CollectionFacet',\n    >         ID    : 'FacetIdentifier1',\n    >         Label : 'Section 1',\n    >         Facets: [{\n    >           $Type : 'UI.ReferenceFacet',\n    >           ID    : 'FacetIdentifier2',\n    >           Target: '_Child/@UI.LineItem'\n    >         }]\n    >       },\n    >       {\n    >         $Type : 'UI.CollectionFacet',\n    >         ID    : 'FacetIdentifier2',\n    >         Label : 'Section 2',\n    >         Facets: [{\n    >           $Type : 'UI.ReferenceFacet',\n    >           ID    : 'FacetIdentifier2',\n    >           Target: '_Child/@UI.SelectionPresentationVariant#mySPV'\n    >         }]\n    >       }\n    >     ]\n    > ```\n\n    Check out our live example in the flexible programming model explorer at [Table Extensibility](https://ui5.sap.com/test-resources/sap/fe/core/fpmExplorer/index.html#/controllerExtensions/tableExtensibility).\n\n2.  To render a *Create* button, set `Org.OData.Capabilities.V1.InsertRestrictions/Insertable/Bool` to `true` for the entity set. For more information, see the [Generic Actions](adding-actions-to-tables-b623e0b.md#loiob623e0bbbb2b4147b2d0516c463921a0__section_nx4_qpb_2nb)section in [Adding Actions to Tables](adding-actions-to-tables-b623e0b.md).\n\n\nFor more information, see [Enabling Inline Creation Mode or Empty Row Mode for Table Entries](enabling-inline-creation-mode-or-empty-row-mode-for-table-entries-cfb04f0.md).\n\n\n\n<a name=\"loiofacfea09018d4376acaceddb7e3f03b6__section_scy_pxd_dmb\"/>\n\n## Increased Section and Table Height to Use Available Free Space on the Object Page\n\nIf the object page contains only one section with just one table or if the object page uses an icon tab bar for sections and any section has only one table, the following system behavior applies:\n\nIf the table is a `ui.table`, the section and table expand to use the full page height, showing more rows in the table.\n\nIf the table is a `sap.m.table`, the section and table expand to show 20 rows.\n\n\n\n<a name=\"loiofacfea09018d4376acaceddb7e3f03b6__section_lmy_1yd_dmb\"/>\n\n## IDs for Collection Facets\n\nTo enable extensions, personalization, and automated testing, for example, you need to have stable IDs for views and controls. In most cases, they are derived automatically from existing annotations. For collection facets, you can use an annotation to set a stable ID. Ensure the ID is meaningful and unique within the entity type. Use only characters in camel case and without spaces.\n\nIf you define your facets in an annotation file in your project, you can add the ID there directly.\n\n> ### Sample Code:  \n> XML Annotation\n> \n> ```xml\n> <Annotation Term=\"UI.Facets\">\n>   <Collection>\n>     <Record Type=\"UI.CollectionFacet\">\n>       <PropertyValue Property=\"ID\" String=\"GeneralInformation\"/>\n>     </Record>\n>   </Collection>\n> </Annotation>\n> ```\n\n> ### Sample Code:  \n> ABAP CDS Annotation\n> \n> ```\n> @UI.Facet: [\n>   {\n>     id: 'GeneralInformation',\n>     type: #COLLECTION,\n>     purpose: #STANDARD\n>   }\n> ]\n> ```\n\n> ### Sample Code:  \n> CAP CDS Annotation\n> \n> ```\n> UI.Facets : [\n>     {\n>         $Type : 'UI.CollectionFacet',\n>         ID : 'GeneralInformation'\n>     }\n> ]\n> ```\n\n\n\nIt is mandatory to define an ID for collection facets but optional for reference facets. If you have defined an ID for the facet of your table, use this ID in the manifest instead of the generated one. If you have not defined an ID for the reference facet of your table, the ID is derived from the annotation path by replacing `/@` with `::`, for example, `to_ProductText::com.sap.vocabularies.UI.v1.LineItem`. Don't add an ID in the annotation after delivering your app, as this ID is also used to build the stable IDs of all controls used in that section.\n\n> ### Note:  \n> All facets are displayed on the same page. The link from a facet leads you to the related section on the same page. The facet annotation label is used twice: Once for the facet in the header area and once for the section's title.\n\n\n\n<a name=\"loiofacfea09018d4376acaceddb7e3f03b6__section_mp4_yhd_dmb\"/>\n\n## Additional Features in SAP Fiori Elements for OData V2\n\nYou can define a hierarchy level. Instead of a reference facet, you can add a collection facet that consists of several reference facets. The contents of these reference facets are arranged underneath.\n\nIn the figure below, the collection facet for *Product Information* combines three reference facets. Each reference facet refers to a field group or to an identification annotation.\n\n  \n  \n**Object Page: CollectionFacet**\n\n![](images/ObjectPage_Section_CollFacet_2bcb89d.jpg \"Object Page: CollectionFacet\")\n\nFurther reference facets refer to identification sections, the field group, contact, or line item annotations. For line items, a list is rendered.\n\n  \n  \n**Object Page: ReferenceFacets**\n\n![](images/ObjectPage_ReferenceFacet_2740bd6.png \"Object Page: ReferenceFacets\")\n\n> ### Note:  \n> When rendering a table in a section, `NavigationRestrictions` works only if `InlineCreate` is enabled for the related entity table. The creation from a new object page is not supported using the mentioned annotation.\n\nWhen increasing the section and table height to use available free space on the object page, you can also optimize the table visualization by using the condensed mode. For more information, see [Using the Condensed Table Layout](using-the-condensed-table-layout-f3cc057.md).\n\nIf your table has many entries, see the information regarding the `MultiSelectionPlugin` at [Enabling Multiple Selection in Tables](enabling-multiple-selection-in-tables-116b5d8.md).\n\nFor more information about the icon tab bar, see *Adapting the UI: Object Page* \\> *Switch to tabs* in [Adapting the UI: List Report and Object Page](adapting-the-ui-list-report-and-object-page-0d2f1a9.md).\n\n\n\n### Defining the SmartForm Column Layout\n\nThe column layout is used by default in the `SmartForm` on the object page. Do not include any layout or other container controls into the `GroupElement`. Views are also not supported. This could damage the visual layout, keyboard support, and screen-reader support.\n\nThe default of six columns in smart form of extra-large screens can be changed to four columns using the following manifest setting.\n\n> ### Sample Code:  \n> `manifest.json`\n> \n> ```json\n> \"sap.ui.generic.app\": { \n>         \"settings\": { \n>             \"objectPageColumns\": { \n>                 \"screenSizeXL\": 4 \n>             } \n>         },\n> \n> ```\n\nYou can also use the `useColumnLayoutForSmartForm` switch in the manifest, at `sap.ui.generic.app\\settings`, to change from the default layout for the `SmartForm` \\(column layout\\) to the responsive grid layout. To do so, set the switch to `false`.\n\n> ### Sample Code:  \n> `manifest.json`\n> \n> ```json\n> \"sap.ui.generic.app\": {\n>                               \"_version\": \"1.3.0\",\n>                               \"settings\": {\n>                                              \"useColumnLayoutForSmartForm\": false\n>                               }\n> \n> ```\n\n\n\n<a name=\"loiofacfea09018d4376acaceddb7e3f03b6__section_wgv_fvx_4lb\"/>\n\n## Additional Features in SAP Fiori Elements for OData V4\n\n> ### Remember:  \n> If you use a chart or table for the `UI.ReferenceFacet`, ensure that this is the only content and does not have another peer `ReferenceFacet` to avoid rendering issues.\n\n\n\n### Tab Representation vs. Anchor Representation\n\nBy default, `\"Page\"` mode is the section layout mode. In this mode, all the sections and subsections are added to the same page. End users can reach the section or subsection by either choosing the corresponding anchor below the header facet, or by simply scrolling down on the page.\n\nAlternatively, application developers can configure the object page using `\"Tabs\"` mode as the section layout mode. In this mode, the sections are represented as tabs under the header facet. End users can reach the right section or subsection only by choosing the corresponding navigation placeholder \\(either by choosing the tab directly, or by choosing a subsection via the navigation placeholder under the tab\\).\n\n\n\n> ### Note:  \n> We recommend using the tab representation when your page uses the `UI.Table` \\(grid table\\).\n\nTo choose a tab visualization, you must use the `sectionLayout` property in the manifest file as shown below:\n\n> ### Sample Code:  \n> `manifest.json`\n> \n> ```json\n> \"SalesOrderManageObjectPage\":{              \n>     \"type\": \"Component\",                  \n>     \"id\": \"SalesOrderManageObjectPage\",                  \n>     \"name\": \"sap.fe.templates.ObjectPage\",                  \n>     \"options\":{                      \n>         \"settings\":{                          \n>             \"contextPath\": \"/SalesOrderManage\",                          \n>             \"navigation\":{                              \n>                 \"_Item\":{                                  \n>                     \"detail\":{                                      \n>                         \"route\": \"SalesOrderItemObjectPage\"                                  \n>                     }                              \n>                 },                              \n>                 \"SalesOrderManage\":{                                  \n>                     \"detail\":{                                      \n>                         \"route\": \"SalesOrderManageObjectPage\",                                      \n>                         \"parameters\":{                                          \n>                             \"key\": \"{_ReferencedSalesOrder/ID}\"                                      \n>                         }                                  \n>                     }         \n>                 }                          \n>             }, // End of navigation                          \n>             \"sectionLayout\": \"Tabs\"    // Default value: Page. Possible values: Page (all sections are shown on same page) and Tabs (each top-level section is shown in an own tab)\n>         }\n>     }\n> }\n> ```\n\n\n\n### Special Handling of Text Area Label as a Single Field in a Section or Subsection\n\nIf `UI.FieldGroup` has only one property based on `UI.MultiLineText` and no other controls, the label of the corresponding `TextArea` control is hidden, as the section or subsection title suffices as the label.\n\nHowever, you must use a meaningful label for the `TextArea` control to ensure its compatibility with the screen reader programs.\n\n\n\n### Responsive Column Layout\n\nWe're using the responsive column layout on the object page, which means that form data is spread across six columns by default when opened on extra large screens to improve content density. The number of columns adapts automatically, depending on the screen size.\n\n",
  "excerpt": "<!-- loiofacfea09018d4376acaceddb7e3f03b6 --> Defining and Adapting Sections The object page content is arranged into sections and subsections that you can configure. You can use the com.sap.vocabular...",
  "wordCount": 2387,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}