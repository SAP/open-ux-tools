{
  "id": "sapui5-docs-02-read-me-first-upgrading-from-a-version-below-1-82-147eef9-md",
  "title": "Upgrading from a Version Below 1.82",
  "category": "ui5-framework",
  "path": "docs/02_Read-Me-First/upgrading-from-a-version-below-1-82-147eef9.md",
  "lastModified": "2025-09-01T18:17:10.440Z",
  "tags": [
    "ui5-framework",
    "md",
    "Upgrading",
    "from",
    "Version",
    "Below"
  ],
  "headers": [
    "Upgrading from a Version Below 1.82",
    "New jQuery Version Included",
    "Compatibility layer",
    "List of jQuery changes covered by SAPUI5 compatibility layer",
    "List of unpatched jQuery incompatibilities",
    "Changes in behavior for SAPUI5 versions above 1.81",
    "Known jQuery issues",
    "Remove the deprecated jQuery API from your code"
  ],
  "content": "<!-- loio147eef96aa5f4126ac99f10e25bac75e -->\n\n# Upgrading from a Version Below 1.82\n\n\n\n## New jQuery Version Included\n\nWith SAPUI5 1.82, the third-party library jQuery is upgraded from jQuery 2.2.3 to jQuery 3.5.1. Several measures have been implemented to make this new framework variant of jQuery as compatible to the previously contained version as feasible. In particular, we introduce a compatibility layer to ensure that most of your existing application or control code may not need adjustment. This could, however, introduce incompatibilites to the new jQuery version. **Please read the following information carefully** to understand any current and possible future impact.\n\n\n\n### Compatibility layer\n\nWith the major version upgrade from jQuery 2.x to jQuery 3.x, a number of incompatible changes have been introduced \\(see the breaking changes in the [jQuery 3.0 Core Upgrade Guide](https://jquery.com/upgrade-guide/3.0/)\\).\n\nWe evaluated each of those changes and classified them to see what needed to be fixed on the layers of framework, control and application. To minimize the migration effort required by application and control developers, we have introduced an additional compatibility layer on top of jQuery \\(delivered as `sap/ui/thirdparty/jquery-compat.js`\\).\n\nThis compatibility layer has the following properties:\n\n-   It can be excluded by setting the `excludeJQueryCompat` configuration via:\n    -   URL parameter \\(case-sensitive\\): `sap-ui-excludeJQueryCompat=true`\n\n    -   Data attribute of the SAPUI5 bootstrap \\(case-insensitive\\): `data-sap-ui-excludejquerycompat=\"true\"`\n    -   Global configuration object before SAPUI5 boots up \\(case-sensitive\\): `window[\"sap-ui-config\"][\"excludejQueryCompat\"]=true`\n\n-   It restores several APIs that have been incompatibly changed in jQuery 3.x back to their old behavior in jQuery 2.x. Details on those changes can be found in the table below.\n\n\n\n### List of jQuery changes covered by SAPUI5 compatibility layer\n\nThe following table contains some important differences between jQuery 2.2.3 and jQuery 3.5.1. The rightmost column indicates whether such an incompatible change of jQuery 3.x was \"rolled back\" to the original jQuery 2.x behavior by our compatibility layer.\n\n> ### Note:  \n> Though we aim to make sure that the jQuery APIs used by controls and applications stay compatible even after breaking changes by jQuery, we cannot guarantee a 100% compatibility rate.\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nAPI \\(and what has changed\\)\n\n</th>\n<th valign=\"top\">\n\njQuery 2.x\n\n</th>\n<th valign=\"top\">\n\njQuery 3.x\n\n</th>\n<th valign=\"top\">\n\njQuery 3.x + Compat. Layer = jQuery 2.x\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.size()`** \n\n</td>\n<td valign=\"top\">\n\nfunction exists\n\n</td>\n<td valign=\"top\">\n\nremoved\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.offset()`**\n\nmust have at least one valid DOM element, otherwise it throws an error\n\n</td>\n<td valign=\"top\">\n\ndoesn't throw error\n\n</td>\n<td valign=\"top\">\n\nthrows an error\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.context`**\n\nwhen a jQuery object is created from a node \\(like in our `oControl.$()` call\\), it no longer has the `context` property set\n\n</td>\n<td valign=\"top\">\n\n`context` property exists\n\n</td>\n<td valign=\"top\">\n\n`context` property has been removed\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.andSelf()`**\n\nfunction was removed; jQuery proposes to use`jQuery.fn.addBack()` instead.\n\n</td>\n<td valign=\"top\">\n\nexists\n\n</td>\n<td valign=\"top\">\n\nremoved\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.[width|height|outerWidth|outerHeight]`**\n\nreturn value type changed\n\n</td>\n<td valign=\"top\">\n\nreturns integer\n\n</td>\n<td valign=\"top\">\n\nreturns float\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.[width|height|outerWidth|outerHeight]`**\n\nin case of an empty jQuery element, the return value was changed from `null` to `undefined`\n\n</td>\n<td valign=\"top\">\n\nreturns `null` \\(can be automatically cast to 0 when compared to a number\\)\n\n</td>\n<td valign=\"top\">\n\nreturns `undefined` \\(cast to `NaN`\\)\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.event.props`** and **`jQuery.event.fixHooks`** \n\n</td>\n<td valign=\"top\">\n\nexist\n\n</td>\n<td valign=\"top\">\n\nremoved\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.Deferred.then(function A() {})`** \n\n</td>\n<td valign=\"top\">\n\nFunction `A` is called immediately within the same call stack\n\n</td>\n<td valign=\"top\">\n\nFunction `A` is called after the current call stack is finished\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.Deferred.[resolve|reject|notify]`**\n\n`this` context that is set by\n\n</td>\n<td valign=\"top\">\n\n`this` context is set to the promise of the `Deferred` object\n\n</td>\n<td valign=\"top\">\n\n`this` context is undefined\n\n</td>\n<td valign=\"top\">\n\n![YES](images/Checked_Okay_3929e46.png)\n\n</td>\n</tr>\n</table>\n\n\n\n### List of unpatched jQuery incompatibilities\n\nSome incompatible changes that are introduced with jQuery 3.5.1 aren't restored to the old behavior of jQuery 2.2.3 by our compatibility layer. This is because we consider them reasonable improvements, for which we don't see any negative impact from our evaluation with existing applications.\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nAPI\n\n</th>\n<th valign=\"top\">\n\njQuery 2.x\n\n</th>\n<th valign=\"top\">\n\njQuery 3.x\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.[width|height]`**\n\ndoesn't include the scrollbar width if there is one\n\n</td>\n<td valign=\"top\">\n\nincludes the width or height of the scrollbar, if there is one\n\n</td>\n<td valign=\"top\">\n\ndoesn't include the scrollbar width if there is one\n\nUse `jQuery.fn.[outerWidth|outerHeight]` instead. Also works in jQuery 2.x\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.animation`** \n\n</td>\n<td valign=\"top\">\n\nuses `setInterval()` \n\n</td>\n<td valign=\"top\">\n\nuses `requestAnimationFrame()`\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.ajax`**\n\nfor multiple response header values that have the same header name\n\n</td>\n<td valign=\"top\">\n\nonly returns the first header value\n\n</td>\n<td valign=\"top\">\n\nmerges multiple header values into a string, separated by \", \"\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery(function A() {})`**\n\ncallback is delayed even if the `DOM Ready` event already occurred\n\n</td>\n<td valign=\"top\">\n\nFunction `A` is called immediately within the current call stack\n\n</td>\n<td valign=\"top\">\n\nFunction `A` is called after the current call stack has finished\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.swap()`** \n\n</td>\n<td valign=\"top\">\n\nexists\n\n</td>\n<td valign=\"top\">\n\n*removed, because it's an undocumented internal method!*\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.data`**\n\nin case the key contains a dash \"-\"\n\n</td>\n<td valign=\"top\">\n\nsee [https://jquery.com/upgrade-guide/3.0/\\#data](https://jquery.com/upgrade-guide/3.0/#data) \n\n</td>\n<td valign=\"top\">\n\nsee [https://jquery.com/upgrade-guide/3.0/\\#data](https://jquery.com/upgrade-guide/3.0/#data) \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.selector`**\n\nunreliable pseudo-selector has been removed\n\n</td>\n<td valign=\"top\">\n\nconcatenates the selector property after further tree traversal calls, for example `jQuery.fn.filter` \\(see [https://api.jquery.com/category/traversing/tree-traversal/](https://api.jquery.com/category/traversing/tree-traversal/)\\)\n\n</td>\n<td valign=\"top\">\n\naccording to jQuery documentation, it was never reliable and thus removed with 3.0: [https://api.jquery.com/selector/](https://api.jquery.com/selector/)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.easing.*`**\n\nsee [https://jquery.com/upgrade-guide/3.0/\\#deprecated-additional-easing-function-parameters](https://jquery.com/upgrade-guide/3.0/#deprecated-additional-easing-function-parameters)\n\n</td>\n<td valign=\"top\">\n\nfunction accepts multiple arguments\n\n</td>\n<td valign=\"top\">\n\nfunction accepts only one argument\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.[append|prepend]`**\n\n[jQuery Issue \\#3976](https://github.com/jquery/jquery/issues/3976)\n\nsee also the table below\n\n</td>\n<td valign=\"top\">\n\nautomatically add a `<tbody>` element to a `<table>` element, if none is present\n\n</td>\n<td valign=\"top\">\n\nadding elements to a table does **not** create an additional `<tbody>` element\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**`jQuery.fn.[after|append|before|html|prepend|replaceWith]`**\n\n**`jQuery.parseHTML`**\n\n[jQuery Pull Request \\#4642](https://github.com/jquery/jquery/pull/4642)\n\nsee also the table below\n\n</td>\n<td valign=\"top\">\n\nsome jQuery APIs in certain contexts call the `htmlPrefilter()` method, which replaces self-closing HTML tags with properly closed HTML elements \\(e.g. <div/\\> is replaced by <div\\></div\\>\\)\n\n</td>\n<td valign=\"top\">\n\nthe `htmlPrefilter()` method returns the passed string unmodified\n\n</td>\n</tr>\n</table>\n\n\n\n### Changes in behavior for SAPUI5 versions above 1.81\n\nDue to the above-mentioned jQuery incompatibilities, SAPUI5 behaves differently in certain cases after the jQuery update.\n\nThe following table describes these behavior changes and gives recommendations how to handle them:\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nChanged Behavior\n\n</th>\n<th valign=\"top\">\n\nin SAPUI5 < 1.82\n\n</th>\n<th valign=\"top\">\n\nin SAPUI5 \\>= 1.82\n\n</th>\n<th valign=\"top\">\n\nRecommendation\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**Automatic creation of `<tbody>` elements**\n\nsee also the table above\n\n</td>\n<td valign=\"top\">\n\nSAPUI5 Controls using a string-based rendering approach in their renderer modules implicitly use jQuery APIs to create the DOM elements.\n\nWhenever you flush a `<tr>` element into a `<table>` element without an already existing `<tbody>` element, the UI5 Core RenderManager implicitly creates a `<tbody>` element.\n\n</td>\n<td valign=\"top\">\n\nflushing a `<tr>` element into a `<table>` element from within a string-based SAPUI5 control renderer does **not** automatically create a `<tbody>` element\n\n</td>\n<td valign=\"top\">\n\nIf your application or control code depends on a `<tbody>` element being present in the DOM, you should add it manually to your rendering code and your CSS styling rules.\n\nAdding the `<tbody>` element in this way is backward-compatible to older SAPUI5 and jQuery versions.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n**Self-Closing HTML Tags**\n\nsee also the table above\n\n</td>\n<td valign=\"top\">\n\nSAPUI5 uses a UI5-specific jQuery 2.2.3 variant. Formerly, its internal `htmlPrefilter()` method used to replace self-closing HTML tags with properly closed HTML elements \\(e.g. <div/\\> was replaced by <div\\></div\\>\\).\n\nSince jQuery 3.5.0, this replacement is no longer done. Instead, the browser will automatically close the self-closing HTML element based on the DOM hierarchy, which could very likely occur at the wrong place. The custom jQuery 2.2.3 variant used in SAPUI5 also implements this change, because self-closing HTML tags for non-void HTML elements are not valid in HTML5.\n\nThe updated jQuery 2.2.3 variant is contained in the following SAPUI5 versions:\n\n-   1.38.47 or higher\n\n-   1.52.45 or higher\n\n-   1.60.29 or higher\n\n-   1.71.23 or higher\n\n-   1.78.5 or higher\n\n-   1.80.2 or higher\n\n-   1.81.0 or higher\n\n\n\n\n</td>\n<td valign=\"top\">\n\njQuery no longer closes self-closing tags for non-void HTML elements in the `htmlPrefilter()` method. Instead, the browser will automatically close the self-closing HTML element based on the DOM hierarchy, which could very likely occur at the wrong place.\n\n</td>\n<td valign=\"top\">\n\nYou should properly close non-void HTML elements. For detailed instructions for identifying affected code and fixing it, see SAP Note [2944336](https://me.sap.com/notes/2944336).\n\nProperly closing non-void HTML elements in this way is backward-compatible to older SAPUI5 and jQuery versions.\n\n</td>\n</tr>\n</table>\n\n\n\n### Known jQuery issues\n\nAt the time of writing, the following jQuery issues have been identified. They have been fixed in the jQuery variant `sap/ui/thirdparty/jquery.js` shipped with SAPUI5 1.82 and later:\n\n-   [jQuery Issue \\#4382: Bug with focus\\(\\) method in a specific case in 3.4.0](https://github.com/jquery/jquery/issues/4382).\n\n    Introduced with jQuery 3.4.0, this causes several tests to fail.\n\n    The bug isn't fixed in the jQuery 3.x code line, but only in the main branch for an upcoming jQuery 4.x release \\(see [this commit](https://github.com/jquery/jquery/commit/8a741376937dfacf9f82b2b88f93b239fe267435)\\).\n\n    At the time of writing, it's not clear whether and when the fix will be downported to the jQuery 3.x code line.\n\n-   [jQuery Issue \\#4417: Exception when element is removed on blur](https://github.com/jquery/jquery/issues/4417).\n\n    At the time of writing, the bug is still open in jQuery's Github repository. Once the bug has been fixed, the in-place patch in our framework's jQuery variant will be deleted.\n\n-   [jQuery Issue \\#4431: Position\\(\\) calculated incorrectly for elements inside a table](https://github.com/jquery/jquery/issues/4431).\n\n    jQuery wrongly calculates the offsetParent. The `offsetParent` property of `HTMLElement` returns a`<td>`, `<th>`, `<table>` ancestor even when the ancestor element has a `static` CSS position.\n\n    The original implementation of `jQuery.fn.offsetParent` can handle this case correctly.\n\n\n\n\n### Remove the deprecated jQuery API from your code\n\nYou can activate an additional support rule with the [UI5 Support Assistant](../04_Essentials/support-assistant-57ccd7d.md). The rule `\"Usage of deprecated jQuery API\"` will show you warnings for all instances of deprecated jQuery 3.x API usage.\n\nThough these APIs are \"only\" deprecated and could still be used, the jQuery project will remove them with their next version jQuery 4.x\n\n> ### Note:  \n> To stay future-proof, we strongly recommend that you remove/refactor all your application and control code so as not to use any deprecated jQuery API anymore.\n\n",
  "excerpt": "<!-- loio147eef96aa5f4126ac99f10e25bac75e --> Upgrading from a Version Below 1.82 New jQuery Version Included With SAPUI5 1.82, the third-party library jQuery is upgraded from jQuery 2.2.3 to jQuery 3...",
  "wordCount": 1809,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}