{
  "id": "sapui5-docs-05-developing-apps-device-adaptation-using-device-models-for-your-app-8dbd35e-md",
  "title": "Device Adaptation: Using Device Models for Your App",
  "category": "ui5-framework",
  "path": "docs/05_Developing_Apps/device-adaptation-using-device-models-for-your-app-8dbd35e.md",
  "lastModified": "2025-09-01T18:17:10.560Z",
  "tags": [
    "ui5-framework",
    "md",
    "Device",
    "Adaptation",
    "Using",
    "Models",
    "for",
    "Your",
    "App"
  ],
  "headers": [
    "Device Adaptation: Using Device Models for Your App"
  ],
  "content": "<!-- loio8dbd35e1577b445d8077b2bc6ad8b958 -->\n\n# Device Adaptation: Using Device Models for Your App\n\nDepending on the capabilities of the device on which the app is running, the functionality and the design of the application might differ. By introducing a local JSON model holding the device-dependent data, we can bind properties of our views to the device's capabilities.\n\nAs an example, on big screens \\(if the device is detected as a desktop device\\), it is not necessary to show the *Back* button on a detail view in a list-detail scenario, because the list and detail views are shown at the same time. You can control the visibility of the *Back* button with a property from the device model.\n\nYou need to make the `sap.ui.Device` API available in a JSON model once in your component to allow controls to be adapted to the current platform using data binding. The code below shows an example of how to achieve this:\n\n`Component.js`\n\n```js\n\nsap.ui.define([\n\t\"sap/ui/core/UIComponent\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/ui/Device\"\n], function (UIComponent, JSONModel, Device) {\n\n[…]\n\ninit: function () {\n// set the device model\n\tvar oDeviceModel = new JSONModel(Device);\n\toDeviceModel.setDefaultBindingMode(\"OneWay\");\n\tthis.setModel(oDeviceModel, \"device\");\n\n[…]\n}\n```\n\nThis instantiates a named JSONModel \\(`\"device\"`\\) which contains all of the properties of the `sap.ui.Device` class, like browser, device type, or the current orientation of the screen. You can then bind the model properties in your views as follows:\n\n`List.view.xml`\n\n```xml\n\n<Page showNavButton=\"{device>/system/phone}\" />\n...\n<PullToRefresh visible=\"{device>/support/touch}\" />\n```\n\nIf you want to negate a value of the device model or make a simple case decision, you can use the expression binding syntax as shown below:\n\n`List.view.xml`\n\n```xml\n\n<SearchField showRefreshButton=\"{= !${device>/support/touch} }\" />\n```\n\nFor more information, see [sap.ui.Device](https://ui5.sap.com/#/api/sap.ui.Device) in the *API Reference* in the Demo Kit, and the documentation under [The Device API](../04_Essentials/the-device-api-69a8e46.md).\n\n",
  "excerpt": "<!-- loio8dbd35e1577b445d8077b2bc6ad8b958 --> Device Adaptation: Using Device Models for Your App Depending on the capabilities of the device on which the app is running, the functionality and the des...",
  "wordCount": 294,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}