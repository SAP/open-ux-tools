{
  "id": "sapui5-docs-04-essentials-assigning-the-model-to-the-ui-91f0d1c-md",
  "title": "Assigning the Model to the UI",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/assigning-the-model-to-the-ui-91f0d1c.md",
  "lastModified": "2025-09-01T18:17:10.491Z",
  "tags": [
    "ui5-framework",
    "md",
    "Assigning",
    "the",
    "Model"
  ],
  "headers": [
    "Assigning the Model to the UI"
  ],
  "content": "<!-- loio91f0d1c56f4d1014b6dd926db0e91070 -->\n\n# Assigning the Model to the UI\n\nIf you don't want to use a component or descriptor file, you have to assign the model instance manually to the UI, before you can bind controls to this model instance.\n\nSAPUI5 provides a flexible and modularized concept in which you can not only define one model for your applications, but define different areas in your application with different models and assign single controls to a model. You can, for example, define a JSON model for the application and an OData model for a table control that is contained in the application. You can also set multiple models for a control or a [`UIArea`](https://ui5.sap.com/#/api/sap.ui.core.UIArea) by specifying a name for the model. These models can be accessed by their name.\n\n```js\nvar oJSONModel = new sap.ui.model.json.JSONModel();\nvar oODataModel  = new sap.ui.model.odata.v2.ODataModel(\"myServicelUrl\");\nvar oControl  = new sap.m.Input();\n\noControl.setModel(oODataModel);\n//set the JSONModel with the name 'myJSONModel' to the same control\noControl.setModel(oJSONModel,\"myJSONModel\");\n```\n\nWhen you set a model to a `UIArea` or control, it will be propagated to all aggregated child controls. So if you set a model to a container control, for example, all controls that are contained \\(aggregated\\) in this container have access to this model. If one of the contained controls has its own model set \\(with the same name\\), the propagation stops. It is not possible to have two models with the same name set to one control instance.\n\nChoose one of the following options:\n\n-   If you use a Component for your app, you should set the model in the `manifest.json`:\n\n    > ### Example:  \n    > **Setting a model in the manifest.json**\n    > \n    > ```json\n    > {\n    >   \"_version\": \"1.12.0\",\n    >   \"sap.app\": {\n    >     ...\n    >     \"dataSources\": {\n    >       \"invoiceRemote\": {\n    >         \"uri\": \"https://services.odata.org/V2/Northwind/Northwind.svc/\",\n    >         \"type\": \"OData\",\n    >         \"settings\": {\n    >           \"odataVersion\": \"2.0\"\n    >         }\n    >       }\n    >     }\n    >   },\n    >   ...\n    >   \"sap.ui5\": {\n    >     ...\n    >     \"models\": {\n    >       \"i18n\": {\n    >          ...\n    >       },\n    >       \"invoice\": {\n    >         \"dataSource\": \"invoiceRemote\"\n    >       }\n    >     }\n    >   }\n    > }\n    > ```\n\n    If you need to access your model in the `onInit` function of a controller, keep in mind that the model is not available via `this.getView().getModel(\"myModel\")`. This is because the model is held by a view's parent, which isn't yet connected to the view at execution time. However, you can access the model via the Component in the following way:\n\n    > ### Example:  \n    > **Setting a model in the `onInit` function of a controller**\n    > \n    > ```js\n    > // in your controller\n    > ...\n    > onInit: function() {\n    >    ...\n    >    var oModel = this.getOwnerComponent().getModel(\"myModel\");\n    >    ...\n    > }\n    > ...\n    > ```\n\n-   You can define a specific model for a particular view by using the `setModel` method available on any control. When the model name `myModel` is omitted, the default model is set.\n\n    ```js\n    this.getView().setModel(oModel, \"myModel\");\n    ```\n\n-   You can also define a specific model for sections within a `UIArea`, for example, inside a panel or for a table control:\n\n    ```js\n    \n    var oTable = this.getView().byId(\"table\");\n    oTable.setModel(oModel, \"myModel\");\n    ```\n\n\n**Related Information**  \n\n\n[Components](components-958ead5.md \"Components are independent and reusable parts used in SAPUI5 applications.\")\n\n[Manifest \\(Descriptor for Applications, Components, and Libraries\\)](manifest-descriptor-for-applications-components-and-libraries-be0cf40.md \"The manifest (also known as descriptor for applications, components, and libraries, in short: app descriptor) is inspired by the WebApplication Manifest concept introduced by the W3C. The manifest provides a central, machine-readable, and easy-to-access location for storing metadata associated with an application, an application component, or a library.\")\n\n",
  "excerpt": "<!-- loio91f0d1c56f4d1014b6dd926db0e91070 --> Assigning the Model to the UI If you don't want to use a component or descriptor file, you have to assign the model instance manually to the UI, before yo...",
  "wordCount": 582,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}