{
  "id": "sapui5-docs-09-developing-controls-sapui5-control-development-guidelines-4549da6-md",
  "title": "SAPUI5 Control Development Guidelines",
  "category": "ui5-framework",
  "path": "docs/09_Developing_Controls/sapui5-control-development-guidelines-4549da6.md",
  "lastModified": "2025-09-01T18:17:10.684Z",
  "tags": [
    "ui5-framework",
    "md",
    "SAPUI5",
    "Control",
    "Development",
    "Guidelines"
  ],
  "headers": [
    "SAPUI5 Control Development Guidelines",
    "General Remarks",
    "API",
    "Behavior",
    "Renderer"
  ],
  "content": "<!-- loio4549da61e2d949d6a3d20ad8a9d17a6f -->\n\n# SAPUI5 Control Development Guidelines\n\nContent developers developing SAPUI5 controls should follow the guidelines outlined below with regard to APIs, behavior, and themes/CSS.\n\n\n\n## General Remarks\n\n-   Keep things simple! Keep the number of entities created for a new control minimal.\n\n-   Reuse is good, but carefully compare how many features of the reused control are needed, and how big the impact on performance would be. For example, if a control needs a clickable area, you can simply implement `onclick` and check where the click came from - this has zero impact on performance. Only if you need more features should you think about instantiating and aggregating. For example, you could use a `Button` control and use its `press` event, but this would cost performance.\n\n\n\n\n## API\n\nFor APIs, the following guidelines apply:\n\n-   Get the API right the first time, you will not be able to change it later \\(compatibility\\).\n\n-   Control names start with an uppercase letter and use CamelCase for concatenated words.\n\n-   Property, event, aggregation, association, method, and parameter names start with a lowercase letter and also use camelCase.\n\n-   Do **not** use Hungarian notation for API parameters, as their type is documented in JSDoc.\n\n-   Provide a reasonable default value for properties. Consider the most frequent use case.\n\n-   Let block elements autofill the available width instead of explicitly setting \"100%\" as the default width.\n\n-   `editable` and `enabled` are two different properties. \"Not enabled\" controls are **not** in the focus tab chain.\n\n-   Check similar controls for consistent naming and modeling of public APIs.\n\n    Controls for text input have a `value` property. Container controls with one generic area for child controls have a 1..n `content` aggregation. When the child controls are not generic, but have specific semantics, arrangement, or type, the name should be chosen accordingly \\(\"items\", \"buttons\",…\\).\n\n-   When there is one most important aggregation, it should be marked as the default aggregation; this facilitates the use in XMLViews.\n\n-   Properties, associations, and aggregations should be preferred over API methods due to data binding support and easier usage in XMLViews.\n\n-   Make sure not to break use in XMLViews; for example, types like `object` and `any` may not be used for mandatory properties.\n\n-   Be careful about initial dependencies. The `Input` control, for example, should not always load the table library just because some inputs may show a value help table after certain user interaction\n\n\n\n\n## Behavior\n\nFor behavior-related development, the following guidelines apply:\n\n-   Do **not** use hardcoded IDs. When creating internal subcontrols, their ID should be prefixed with `this.getId() + \"-\"`.\n\n-   Make sure not to break data binding.\n\n-   Do **not** make assumptions about how your control is used.\n\n-   Do **not** use `oEvent.preventDefault()` or `oEvent.stopPropagation()` without a good reason and clear documentation why it is required.\n\n-   Use the SAPUI5 event handling methods when available instead of `jQuery.on()`. When you use `jQuery.on()`, always register them in `onAfterRendering()` and deregister them by using `jQuery.off()` in `onBeforeRendering()` and in `exit()`.\n\n-   Use CSS3 for animations and fall back to no animation for legacy browsers; there are only a few exceptions where the animation is important.\n\n-   Keep in mind that a control can be used multiple times in a page.\n\n-   Provide immediate feedback for user interaction.\n\n-   If an action takes a longer period of time, visualize this, for example by using a `BusyIndicator`.\n\n-   When you create HTML markup for a control outside a renderer, for example, by writing to the `innerHTML` property of a DOM element, or by calling `jQuery.html()` or similar helpers, make sure to escape any unchecked data first with the function provided by `sap/base/security/encodeXML`. This is mandatory to prevent cross-site scripting issues. For more information, see [Cross-Site Scripting](../05_Developing_Apps/cross-site-scripting-91f0bd3.md).\n\n\n\n\n## Renderer\n\nWith regard to the renderer, the following guidelines apply:\n\n-   Produce clean, semantic HTML5, as compact as reasonably possible.\n\n-   Each control instance must have exactly one root HTML element and can have any HTML element structure below that.\n\n-   Unknown strings, such as values coming from string properties, need to be escaped before writing to HTML; this avoids security risks via XSS attacks.\n\n-   Use `RenderManager.writeEscaped(…)`, or the function provided by module `sap/base/security/encodeXML`.\n\n-   Container controls such as `Panel` or `Page`, as opposed to layout controls with a generic \"content\" aggregation, should render the children directly next to each other with no additional HTML or layout applied.\n\n-   Use the Icon pool for images.\n\n-   Provide a sufficiently large touch area for interaction on touch devices \\(usually 3rem/48px\\).\n\n-   When internal HTML elements of the control below the root element need an ID, construct the ID as follows: `<control ID> + \"-\" + <someSuffix>`.\n\n-   The HTML should adhere to the basic XHTML rules; close all tags, enclose attribute values in quotes and do **not** use empty attributes without value.\n\n-   Avoid <table\\>-based layouts when there is no logical table. If a table is used for layout, try to use \"display:table\" or even \"table-layout:fixed\" tables.\n\n-   `RenderManager.writeControlData()` must be called in the root HTML element of the control to make events work.\n\n-   `RenderManager.writeClasses()` must be called in the root HTML element of a control; otherwise `addStyleClass` does not work. this does not need to be used in subelements.\n\n\n",
  "excerpt": "<!-- loio4549da61e2d949d6a3d20ad8a9d17a6f --> SAPUI5 Control Development Guidelines Content developers developing SAPUI5 controls should follow the guidelines outlined below with regard to APIs, behav...",
  "wordCount": 879,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}