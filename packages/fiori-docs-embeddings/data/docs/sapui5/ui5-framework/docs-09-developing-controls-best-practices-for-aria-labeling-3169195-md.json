{
  "id": "sapui5-docs-09-developing-controls-best-practices-for-aria-labeling-3169195-md",
  "title": "Best Practices for ARIA Labeling",
  "category": "ui5-framework",
  "path": "docs/09_Developing_Controls/best-practices-for-aria-labeling-3169195.md",
  "lastModified": "2025-09-01T18:17:10.673Z",
  "tags": [
    "ui5-framework",
    "md",
    "Best",
    "Practices",
    "for",
    "ARIA",
    "Labeling"
  ],
  "headers": [
    "Best Practices for ARIA Labeling",
    "**Adding additional labeling to existing controls**",
    "**No suitable labeling text available on the UI which can be used with `aria-labelledby`**",
    "**Using the `labelFor` attribute together with `aria-labelledby`**",
    "**Internal labeling within a control**"
  ],
  "content": "<!-- loio3169195311f84bdcb63703c1de84b14e -->\n\n# Best Practices for ARIA Labeling\n\nSometimes the UI and the control usage may not allow standard ARIA labeling. Here we introduce some best practices on handling the labels in these cases.\n\n\n\n## **Adding additional labeling to existing controls**\n\n**Use Case:**\n\nThere are two fields in a form, but there is only one label for both of them. For example, street and street no. share the same label - Street.\n\n**Solution:**\n\nIntroduce the following association to controls:\n\n> ### Source Code:  \n> ```\n> ariaLabelledBy : {\n> \n> type : \"sap.ui.core.Control\",\n> \n> multiple : true,\n> \n> singularName : \"ariaLabelledBy\"\n> \n> }\n> \n> ```\n\nThis association can be used to point to other controls that provide the needed labeling using the `aria-labelledby` property.\n\n\n\n## **No suitable labeling text available on the UI which can be used with `aria-labelledby`**\n\n**Use Case:**\n\nIn some cases a suitable labeling text may not be available on the UI or it is hard for the application to reference it \\(text is contained in an inner control of a control, so the application would need to know the internals of the control\\).\n\n**Solution:**\n\nUse the new control `sap.ui.core.InvisibleText` which provides a hidden text and can be referenced in the `ariaLabelledBy` association.\n\n\n\n## **Using the `labelFor` attribute together with `aria-labelledby`**\n\n**Use Case:**\n\nThe `labelFor` attribute provides additional benefits besides the pure labeling \\(for example, focus handling\\). When the label which is referenced with the `labelFor` attribute also has an `aria-labelledby` attribute of a referenced control, it is not read by the screen reader.\n\n**Solution:**\n\nA mapping table is introduced. The table is ID-based and matches label and labeled control. The `writeAccessibilityState` function of the `RenderManager` takes the mappings into account and adds the label to the `aria-labelledby` attribute of the labeled control \\(only when an `ariaLabelledBy` association is also present\\).\n\n\n\n## **Internal labeling within a control**\n\n**Use Case:**\n\nIn some cases controls need to add additional label texts by themselves for a proper screen reader announcement, for example value states, messages, table headers and further descriptions.\n\n**Solution:**\n\n1.  If the control already provides an `ariaLabelledBy` association, the additional texts must be referenced in other means \\(for example, with hidden texts within the control\\).\n\n    > ### Note:  \n    > Itâ€™s not possible to combine `aria-labelledby` with `aria-label`.\n\n2.  If the control does not provide an `ariaLabelledBy` association, but it could, then the association should be added to follow the option above.\n\n\n",
  "excerpt": "<!-- loio3169195311f84bdcb63703c1de84b14e --> Best Practices for ARIA Labeling Sometimes the UI and the control usage may not allow standard ARIA labeling. Here we introduce some best practices on han...",
  "wordCount": 410,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}