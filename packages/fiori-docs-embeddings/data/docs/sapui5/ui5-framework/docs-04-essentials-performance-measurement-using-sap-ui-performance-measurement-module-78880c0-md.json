{
  "id": "sapui5-docs-04-essentials-performance-measurement-using-sap-ui-performance-measurement-module-78880c0-md",
  "title": "Performance Measurement Using sap/ui/performance/Measurement Module",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/performance-measurement-using-sap-ui-performance-measurement-module-78880c0.md",
  "lastModified": "2025-09-01T18:17:10.535Z",
  "tags": [
    "ui5-framework",
    "md",
    "Performance",
    "Measurement",
    "Using",
    "sap",
    "performance",
    "Module"
  ],
  "headers": [
    "Performance Measurement Using sap/ui/performance/Measurement Module",
    "Procedure",
    "1. Activate performance measurement",
    "2. Retrieve the results",
    "3. Interpret the results",
    "4. Clear results",
    "Specific Use Cases",
    "Averages",
    "Measurement of Object Methods",
    "Filtering"
  ],
  "content": "<!-- loio78880c09a1954a02b49c21357d45c91f -->\n\n# Performance Measurement Using sap/ui/performance/Measurement Module\n\nYou can use `sap/ui/performance/Measurement` to measure the performance of your JavaScript code.\n\nFor each measurement, the result is a time and a duration. The time are the milliseconds \\(ms\\) from starting the measurement till its end. The duration is the effective milliseconds, pause phases are not counted here.\n\nYou can measure the categories that are used by the SAPUI5 core classes as listed in the following table:\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nCategory\n\n</th>\n<th valign=\"top\">\n\nDescription\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`javascript` \\(default\\)\n\n</td>\n<td valign=\"top\">\n\nDefault measurement category if no category is provided\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`require` \n\n</td>\n<td valign=\"top\">\n\nIdentifies the duration of `sap.ui.require` for lazy loading of JavaScipt classes including the loading and parsing times for a class\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`xmlhttprequest` \n\n</td>\n<td valign=\"top\">\n\nIdentifies the duration of an `jQuery.ajax` call\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`render` \n\n</td>\n<td valign=\"top\">\n\nUsed for all rendering-related measurements that trigger core rendering of controls within the `RenderManager` class\n\nWith the `render` category there comes an additional set of categories to distinguish between different phases of rendering\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`control` \n\n</td>\n<td valign=\"top\">\n\nIdentifies the duration for HTML rendering provided with the `ControlRender.render` method\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`after` \n\n</td>\n<td valign=\"top\">\n\nIdentifies the duration for calls on the control's `onAfterRendering` method\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`preserve` \n\n</td>\n<td valign=\"top\">\n\nIdentifies the duration needed to find out whether rendering can be preserved\n\n</td>\n</tr>\n</table>\n\n\n\n## Procedure\n\n\n\n### 1. Activate performance measurement\n\nBy default, `Measurement` is disabled to avoid unnecessary code execution during runtime. Therefore, you first have to activate the measurement using one of the following options:\n\n-   Use URL Parameter `sap-ui-measure=true` to measure an initial request.\n\n-   Use the diagnostics window in your app with [Ctrl\\] + [Alt\\] + [Shift\\] + [S\\] . In this window, you can also see a visualization of the results.\n\n-   Activate measurement in the browser's console by calling `Measurement.setActive(true)`\n\n-   Create a measurement in your code with:\n\n    ```js\n    // \"Log\" required from module \"sap/base/Log\"\n    // \"Measurement\" required from module \"sap/ui/performance/Measurement\"\n    Measurement.setActive(true);\n    Measurement.start(\"myId\",\"Measurement of myId\");\n    Log.info(\"foo\");\n    Measurement.end(\"myId\");\n    ```\n\n    You can use methods as listed in the following table:\n\n\n    <table>\n    <tr>\n    <th valign=\"top\">\n\n    Action\n    \n    </th>\n    <th valign=\"top\">\n\n    Method\n    \n    </th>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    Start measurement\n    \n    </td>\n    <td valign=\"top\">\n    \n    `Measurement.start(sId,sInfo,[categories])` \n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    End measurement\n    \n    </td>\n    <td valign=\"top\">\n    \n    `Measurement.end(sId)` \n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    Pause\n    \n    </td>\n    <td valign=\"top\">\n    \n    `Measurement.pause(sId)` \n    \n    </td>\n    </tr>\n    <tr>\n    <td valign=\"top\">\n    \n    Resume\n    \n    </td>\n    <td valign=\"top\">\n    \n    `Measurement.resume(sId)` \n    \n    </td>\n    </tr>\n    </table>\n    \n\nTo activate measurement for certain categories only, you have the following options:\n\n-   Provide a URL Parameter with categories `sap-ui-measure=category1,category2`\n\n-   Add the category as parameter to the call of the `Measurement.setActive` as in the following example:\n\n    ```\n    // Measure only \"require\" category\n    // \"Measurement\" required from module \"sap/ui/performance/Measurement\"\n    Measurement.setActive(true,\"require\")\n    ```\n\n    To assign a measurement to a specific category, just add the category to the `start` function.\n\n    ```\n    // \"Measurement\" required from module \"sap/ui/performance/Measurement\"\n    Measurement.start(\"myId\",\"Measurement of myId\", **\\[\"foo\"\\]**);\n    ```\n\n    > ### Note:  \n    > If you also use the `start` or `average` method, make sure that the same categories are passed on, otherwise no measurement is started.\n\n\n\n\n### 2. Retrieve the results\n\nYou can view the results in the *Performance* section of the diagnostics window \\([Ctrl\\] + [Alt\\] + [Shift\\] + [S\\] \\). Here, you can also refresh the result list, if the performance measurement is still running.\n\nYou can retrieve the results via API with one of the following commands:\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nCommand\n\n</th>\n<th valign=\"top\">\n\nReturns\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Measurement.getAllMeasurements()` \n\n</td>\n<td valign=\"top\">\n\nArray of all measures \\(running and completed\\)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Measurement.getAllMeasurements(true)` \n\n</td>\n<td valign=\"top\">\n\nArray of completed measures\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Measurement.getAllMeasurements(false)` \n\n</td>\n<td valign=\"top\">\n\nArray of running \\(not completed\\) measures\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Measurement.getMeasurement(string)` \n\n</td>\n<td valign=\"top\">\n\nOne specific measurement by ID\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Measurement.filterMeasurements(func)` \n\n</td>\n<td valign=\"top\">\n\nArray of all measures based on the result of the filter function \\(running and completed\\)\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Measurement.filterMeasurements(func, true)` \n\n</td>\n<td valign=\"top\">\n\nArray of completed measures based on the result of the filter function\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n`Measurement.filterMeasurements(func, false)` \n\n</td>\n<td valign=\"top\">\n\nArray of running measures based on the result of the filter function\n\n</td>\n</tr>\n</table>\n\nIn Google Chrome, for example, you can also display the results in a table in the console by using:\n\n```\nconsole.table(Measurement.getAllMeasurements(true)) //table with completed measurements\n```\n\n\n\n### 3. Interpret the results\n\nEach entry in the resulting array provides an object of the following structure:\n\n-   `id`: `string`\n\n    The unique ID of the measurement as provided in the `start` or `average` method\n\n-   `info`: `string`\n\n    Additional information as provided in the `start` or `average` method\n\n-   `duration`: `float`\n\n    Duration or average duration in ms\n\n-   `count`: `int`\n\n    Number of calls counted of an average\n\n-   `average`: `boolean`\n\n    Indicates whether the result is an average\n\n-   `categories`: `string[]`\n\n    Categories as provided in the `start` or `average` method\n\n\n\n\n### 4. Clear results\n\nTo clear all measurements call the `Measurement.clear` method.\n\n\n\n## Specific Use Cases\n\n\n\n### Averages\n\nFor repeatedly occurring operations, you can calculate an average duration with the `Measurement.average` method.\n\n```\n// \"Log\" required from module \"sap/base/Log\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nMeasurement.setActive(true);\nfor (var i=0;i<1000;i++) {\n    Measurement.average(\"myId\",\"Average of myId\");\n    Log.info(\"Foo \" + i);\n    Measurement.end(\"myId\");\n}\n```\n\nBased on the ID, all measurement calls are counted and the average duration is calculated and provided in the result, together with the complete duration and the number of calls:\n\n```\n// \"Log\" required from module \"sap/base/Log\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nLog.info(\"1000 calls: \" + Measurement.getMeasurement(\"myId\").count === 1000); //true\nLog.info(\"Average time: \" + Measurement.getMeasurement(\"myId\").duration);\n\n```\n\n\n\n### Measurement of Object Methods\n\nYou can register an average measurement without changing the original source code. For this, you use the following APIs:\n\n-   `Measurement.registerMethod`\n\n-   `Measurement.unregisterMethod`\n\n-   `Measurement.unregisterAllMethods`\n\n\nTo measure the average time a method of an instance, you can use the following example code:\n\n```\n// \"Button\" required from module \"sap/m/Button\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nvar oButton = new Button();\nMeasurement.registerMethod(\"oButton.setText\", oButton, \"setText\", [\"instance\"]); //register to oButton instance on method setText\nMeasurement.setActive(true,[\"instance\"]); //measure only category \"instance\"\nfor (var i=0;i<1000;i++) {\n    oButton.setText(\"MyButton\" + i);\n}\n \nMeasurement.unregisterMethod(oButton, \"setText\");\n// or Measurement.unregisterAllMethods();\n\nMeasurement.getAllMeasurements();\n```\n\nTo measure the average time a method of a class, you can use the following example code:\n\n```\n// \"Button\" required from module \"sap/m/Button\"\n// \"Measurement\" required from module \"sap/ui/performance/Measurement\"\nMeasurement.registerMethod(\"oButton.setText\", Button.prototype, \"setText\",[\"class\"]); //register to Button class on method setText\nMeasurement.setActive(true,[\"class\"]); //measure only category \"class\"\nfor (var i=0;i<1000;i++) {\n    var oButton = new Button();\n    oButton.setText(\"MyButton\" + i);\n}\n \nMeasurement.unregisterMethod(oButton, \"setText\");\n//or Measurement.unregisterAllMethods();\n \nMeasurement.getAllMeasurements();\n```\n\n\n\n### Filtering\n\nYou can also use the categories listed above as filters for the result list or to define measurements for one or more specific categories with the `filterMeasurements` method.\n\nTo filter the categories that are measured, you use, for example:\n\n```\n// Filter for category1\nMeasurement.filterMeasurements(function(oMeasurement) {\n    return oMeasurement.categories.indexOf(\"category1\") > -1;\n});\n```\n\nTo filter the results, you can use a code like this:\n\n```\n// Filter for duration > 500ms\nMeasurement.filterMeasurements(function(oMeasurement) {\n    return oMeasurement.duration > 500;\n});\n\n```\n\n**Related Information**  \n\n\n[API Reference: `jQuery.sap.measure.html`](https://ui5.sap.com/#/api/jQuery.sap.measure)\n\n[Performance: Speed Up Your App](../05_Developing_Apps/performance-speed-up-your-app-408b40e.md \"If a web app has performance issues, finding the cause can be both a time-consuming and nerve-consuming task. To help you avoid and solve performance issues in your app, here are some good practices we've discovered while dealing with SAPUI5 apps.\")\n\n[Performance Issues](../05_Developing_Apps/performance-issues-966d67c.md \"This section lists some of the most important issues that should be avoided to improve performance in SAPUI5 applications.\")\n\n",
  "excerpt": "<!-- loio78880c09a1954a02b49c21357d45c91f --> Performance Measurement Using sap/ui/performance/Measurement Module You can use sap/ui/performance/Measurement to measure the performance of your JavaScri...",
  "wordCount": 1270,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}