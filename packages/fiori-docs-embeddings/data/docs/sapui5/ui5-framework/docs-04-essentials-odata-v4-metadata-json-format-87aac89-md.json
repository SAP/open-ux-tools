{
  "id": "sapui5-docs-04-essentials-odata-v4-metadata-json-format-87aac89-md",
  "title": "OData V4 Metadata JSON Format",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/odata-v4-metadata-json-format-87aac89.md",
  "lastModified": "2025-09-01T18:17:10.534Z",
  "tags": [
    "ui5-framework",
    "md",
    "OData",
    "Metadata",
    "JSON",
    "Format"
  ],
  "headers": [
    "OData V4 Metadata JSON Format",
    "Design Rationale",
    "Metadata JSON Structure",
    "Constant and Dynamic Expressions"
  ],
  "content": "<!-- loio87aac894a40640f89920d7b2a414499b -->\n\n# OData V4 Metadata JSON Format\n\nThe OData V4 model provides access to metadata in a streamlined JSON format which is described in the section below.\n\nIt is different to the $metadata service's JSON format \\(see [OData JSON Format Version 4.0](http://docs.oasis-open.org/odata/odata-json-format/v4.0/os/odata-json-format-v4.0-os.html)\\) and the OData JSON Format for Common Schema Definition Language \\(CSDL\\) Version 4.0 \\(see [corresponding specification](http://docs.oasis-open.org/odata/odata-json-csdl/v4.0/odata-json-csdl-v4.0.html)\\), intended to simplify client-side processing.\n\nIn the sections below, angled brackets indicate variable parts. The numbers next to each expression correspond to the numbered sections in the official specification, see [OData Version 4.0 Part 3: Common Schema Definition Language \\(CSDL\\) Plus Errata 03](https://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html). Comments highlight optional properties, especially those that have certain default values.\n\n\n\n## Design Rationale\n\nWe have prefixed constant property names with `\"$\"` as this is a legal first character for JavaScript identifiers, but not for OData simple identifiers. This way, **inline annotations** can be added via `\"@<14.3.1 Annotation Term>#<14.3.2 Annotation Qualifier>\" : <value>` everywhere without name clashes. This is shortly shown as `\"@...\" : <value>` below.\n\nWe assume that schema **aliases** have been resolved. We add a trailing dot after a schema's namespace; thus, the qualified name \"A.B\" cannot clash with schema namespace \"A.B.\". This trailing dot is also present for `\"$Include\"`, `\"$TermNamespace\"`, and `\"$TargetNamespace\"` values.\n\n<code><b>$kind</b></code> has been added to each object with a \\(qualified\\) OData name and to almost each object which can be annotated via external targeting, but not to enum members. Actions and functions are arrays of overloads, and `$kind` has been added to each overload.\n\nWe assume each **enum member** to have a value via the fallback rule *\"If no values are specified, the members are assigned consecutive integer values in the order of their appearance, starting with zero for the first member.\"*\n\nFacets like `MaxLength`, `Precision`, and `Scale` are represented as numbers if possible \\(`\"$Scale\" : \"variable\"` is the only exception\\). `DefaultValue` is represented as a string for lack of type information in the general case.\n\n> ### Note:  \n> `\"$MaxLength\" : \"max\"` is omitted and will be treated the same as an unspecified length on the client side.\n\nWe assume that a \"17.5 **TargetPath**\" used as \"13.4.1 Attribute Path\" or \"13.5.3/13.6.3 Attribute EntitySet\" is *normalized* in the following sense: a simple identifier is used instead of a target path for entity sets \\(or singletons\\) within the same container.\n\n> ### Note:  \n> We assume each annotation to specify a value, i.e. default values need to be repeated here. To allow conversion from XML to JSON on the client side \\(w/o reading the vocabulary!\\), we assume that `true` is the only default value which is relevant. Accordingly, `$DefaultValue` has been omitted for the time being.\n\nAnnotations with external targeting are represented as a `\"$Annotations\"` map inside the schema itself. This way, annotations belong to a schema and the \"3.4 Element Include\" feature can be implemented on the client side.\n\n*Normalization:* For all EDM elements which allow both inline annotations and external targeting, we assume that only external targeting is used. This affects edm:ActionImport, edm:ComplexType, edm:EntityContainer, edm:EntitySet, edm:EntityType, edm:EnumType, edm:FunctionImport, edm:Member, edm:Singleton, edm:Term, edm:TypeDefinition, edm:NavigationProperty, edm:Property. The goal is to reduce cases that contain a mixture of inline annotations and external targeting to the bare minimum.\n\n**Update for 4.01:** [\\[OData-CSDL-JSON-v4.01\\] 14.2.2 Target](https://docs.oasis-open.org/odata/odata-csdl-json/v4.01/csprd04/odata-csdl-json-v4.01-csprd04.html#sec_Target) now says, *\"External targeting is possible for actions, functions, their parameters, and their return type, either in a way that applies to all overloads of the action or function or all parameters of that name across all overloads, or in a way that identifies a single overload.\"* Thus, we also normalize towards external targeting here.\n\nWe use the <code>\"&lt;<b>key</b>&gt;@&lt;14.3.1 Annotation Term&gt;#&lt;14.3.2 Annotation Qualifier&gt;\" : &lt;value&gt;</code> syntax for inline annotations in the following cases to avoid explicit object representations:\n\n-   \"7.2 Element ReferentialConstraint\" with key `\"<7.2.1 ReferentialConstraint Property>\"`\n\n-   \"7.3 Element OnDelete\" with key `\"$OnDelete\"` \n\n-   \"14.3 Annotation\" with key `\"@<14.3.1 Annotation Term>#<14.3.2 Annotation Qualifier>\"` \\(yes, this does lead to a double at-sign `\"@...#...@...#...\"`\\)\n\n-   \"14.5.14.2 Element PropertyValue\" with key `\"<14.5.14.2.1 PropertyValue Property>\"`\n\n\n> ### Note:  \n> For segments which represent a path, such as the keys for the `\"$ReferentialConstraint\"` and`\"$NavigationPropertyBinding\"` maps, you need to use URL encoding for the slash character \\(`\"%2F\"`\\).\n> \n> > ### Example:  \n> > Escaping the Slash Character\n> > \n> > ```xml\n> > <EntitySet Name=\"Customer\" EntityType=\"...CustomerParameters\">\n> > <NavigationPropertyBinding Path=\"Set/Parameters\" Target=\"Customer\"/>\n> > ```\n> > \n> > ```js\n> > oMetaModel.getObject('/Customer/$NavigationPropertyBinding/Set%2FParameters')\n> > ```\n\n\n\n## Metadata JSON Structure\n\nThe following JSON file represents the metadata document which corresponds to `GET <serviceRoot>/$metadata`.\n\n```json\n{\n  \"$Version\" : \"<3.1.1 Edmx Version>\",\n  \"$Annotations\" : {\n    \"<14.2.1 Annotations Target>\" : {\n      // Note: \"<14.3.2 Annotation Qualifier>\" defaults to \"<14.2.2 Annotations Qualifier>\",\n      // qualifiers are optional, \"#\" is omitted then\n      \"@<14.3.1 Annotation Term>#<14.3.2 Annotation Qualifier>\" : <value> // constant or dynamic expression\n      \"@<14.3.1 Annotation Term>#<14.3.2 Annotation Qualifier>@...\" : <value> // annotation of an annotation\n    }\n  },\n  \"$EntityContainer\" : \"<5.1.1 Schema Namespace>.<13.1.1 EntityContainer Name>\", // root entity container for this $metadata document\n  \"$Reference\" : {\n    // server-relative, dereferencable URLs (to $metadata) only!\n    \"<3.3.1 Reference Uri>\" : { \"@...\" : <value>,\n      \"$Include\" : [\"<3.4.1 Include Namespace>.\", ...], // optional\n      \"$IncludeAnnotations\" : [{\n        \"$TermNamespace\" : \"<3.5.1 IncludeAnnotations TermNamespace>.\",\n        \"$Qualifier\" : \"<3.5.2 IncludeAnnotations Qualifier>\", // optional\n        \"$TargetNamespace\" : \"<3.5.3 IncludeAnnotations TargetNamespace>.\" // optional\n      }, ...] // optional\n    }\n  }, // optional\n  \"<5.1.1 Schema Namespace>.\" : {\n    \"$kind\" : \"Schema\",\n    \"@...\" : <value> // place inline annotations for schema itself here!\n  },\n  \"<5.1.1 Schema Namespace>.<8.1.1 EntityType Name>\" : {\n    \"$kind\" : \"EntityType\",\n    \"$BaseType\" : \"<8.1.2 EntityType BaseType>\", // optional\n    \"$Abstract\" : true, // omit in case of default value: false\n    \"$OpenType\" : true, // omit in case of default value: false\n    \"$HasStream\" : true, // omit in case of default value: false\n    \"$Key\" : [\n      \"<8.3.1 PropertyRef Name>\", // in case no Alias is given\n      {\"<8.3.1 PropertyRef Alias>\" : \"<8.3.1 PropertyRef Name>\"},\n      ...\n    ], // optional\n    \"<6.1.1 Property Name>\" : {\n      \"$kind\" : \"Property\",\n      \"$Type\" : \"<6.1.2 Property Type>\",\n      \"$isCollection\" : true, // omit in case of default value: false\n      \"$Nullable\" : false, // omit in case of default value: true\n      \"$MaxLength\" : <6.2.2 MaxLength>, // optional, number\n      \"$Precision\" : <6.2.3 Precision>, // optional, number\n      \"$Scale\" : <6.2.4 Scale> | \"variable\", // optional, number or fixed string\n      \"$Unicode\" : false, // omit in case of default value: true\n      \"$SRID\" : \"<6.2.6 SRID>\", // optional\n      \"$DefaultValue\" : \"<6.2.7 DefaultValue>\" // optional\n    },\n    \"<7.1.1 NavigationProperty Name>\" : {\n      \"$kind\" : \"NavigationProperty\",\n      \"$Type\" : \"<7.1.2 NavigationProperty Type>\",\n      \"$isCollection\" : true, // omit in case of default value: false\n      \"$Nullable\" : false, // omit in case of default value: true\n      \"$Partner\" : \"<7.1.4 NavigationProperty Partner>\", // optional\n      \"$ContainsTarget\" : true, // omit in case of default value: false\n      \"$ReferentialConstraint\" : {\n        \"<7.2.1 ReferentialConstraint Property>\" : \"<7.2.2 ReferentialConstraint ReferencedProperty>\",\n        \"<7.2.1 ReferentialConstraint Property>@...\" : <value>\n      }, // optional\n      \"$OnDelete\" : \"<7.3.1. OnDelete Action>\", // optional\n      \"$OnDelete@...\" : <value>\n    },\n  },\n  \"<5.1.1 Schema Namespace>.<9.1.1 ComplexType Name>\" : {\n    \"$kind\" : \"ComplexType\",\n    \"$BaseType\" : \"<9.1.2 ComplexType BaseType>\", // optional\n    \"$Abstract\" : true, // omit in case of default value: false\n    \"$OpenType\" : true, // omit in case of default value: false\n    \"<6.1.1 Property Name>\" : {\n      // see above\n    },\n    \"<7.1.1 NavigationProperty Name>\" : {\n      // see above\n    }\n  },\n  \"<5.1.1 Schema Namespace>.<10.1.1 EnumType Name>\" : {\n    \"$kind\" : \"EnumType\",\n    \"$UnderlyingType\" : \"<10.1.2 EnumType UnderlyingType>\", // omit in case of default value: Edm.Int32\n    \"$IsFlags\" : true, // omit in case of default value: false\n    \"<10.2.1 Member Name>\" : \"<10.2.2 Member Value>\" // use string value in case of base type Edm.Int64, else number\n  },\n  \"<5.1.1 Schema Namespace>.<11.1.1 TypeDefinition Name>\" : {\n    \"$kind\" : \"TypeDefinition\",\n    \"$UnderlyingType\" : \"<11.1.2 TypeDefinition UnderlyingType>\",\n    \"$MaxLength\" : <11.1.3 MaxLength>, // optional, number\n    \"$Precision\" : <11.1.3 Precision>, // optional, number\n    \"$Scale\" : <11.1.3 Scale> | \"variable\", // optional, number or fixed string\n    \"$Unicode\" : false, // omit in case of default value: true\n    \"$SRID\" : \"<11.1.3 SRID>\" // optional\n  },\n  \"<5.1.1 Schema Namespace>.<12.1.1 Action Name>\" : [{\n    \"$kind\" : \"Action\",\n    \"$IsBound\" : true, // omit in case of default value: false\n    \"$EntitySetPath\" : \"<12.1.3 Action EntitySetPath>\", // optional\n    \"$Parameter\" : [{\n      \"$Name\" : \"<12.4.1 Parameter Name>\",\n      \"$isCollection\" : true, // omit in case of default value: false\n      \"$Type\" : \"<12.4.2 Parameter Type>\",\n      \"$Nullable\" : false, // omit in case of default value: true\n      \"$MaxLength\" : <12.4.4 MaxLength>, // optional, number\n      \"$Precision\" : <12.4.4 Precision>, // optional, number\n      \"$Scale\" : <12.4.4 Scale> | \"variable\", // optional, number or fixed string\n      \"$SRID\" : \"<12.4.4 SRID>\" // optional\n    }, ...], // optional\n    \"$ReturnType\" : {\n      \"$isCollection\" : true, // omit in case of default value: false\n      \"$Type\" : \"<12.3.1 ReturnType Type>\",\n      \"$Nullable\" : false, // omit in case of default value: true\n      \"$MaxLength\" : <11.1.3 MaxLength>, // optional, number\n      \"$Precision\" : <11.1.3 Precision>, // optional, number\n      \"$Scale\" : <11.1.3 Scale> | \"variable\", // optional, number or fixed string\n      \"$SRID\" : \"<11.1.3 SRID>\" // optional\n    } // optional\n  }, ...],\n  \"<5.1.1 Schema Namespace>.<12.2.1 Function Name>\" : [{\n    \"$kind\" : \"Function\",\n    \"$IsBound\" : true, // omit in case of default value: false\n    \"$IsComposable\" : true, // omit in case of default value: false\n    \"$EntitySetPath\" : \"<12.2.4 Function EntitySetPath>\", // optional\n    \"$Parameter\" : [{\n      // see above\n    }, ...], // optional\n    \"$ReturnType\" : {\n      // see above\n    }\n  }, ...],\n  \"<5.1.1 Schema Namespace>.<13.1.1 EntityContainer Name>\" : {\n    \"$kind\" : \"EntityContainer\"\n//      \"$Extends\" : \"<13.1.2 EntityContainer Extends>\", // not in the 1st step\n    \"<13.2.1 EntitySet Name>\" : {\n      \"$kind\" : \"EntitySet\",\n      \"$Type\" : \"<13.2.2 EntitySet EntityType>\", // Note: renamed for consistency!\n      \"$IncludeInServiceDocument\" : false, // omit in case of default value: true\n      \"$NavigationPropertyBinding\" : {\n        \"<13.4.1 NavigationPropertyBinding Path>\" : \"<13.4.2 NavigationPropertyBinding Target>\" // normalized\n      } // optional\n    },\n    \"<13.3.1 Singleton Name>\" : {\n      \"$kind\" : \"Singleton\",\n      \"$Type\" : \"<13.3.2 Singleton Type>\",\n      \"$NavigationPropertyBinding\" : {\n        \"<13.4.1 NavigationPropertyBinding Path>\" : \"<13.4.2 NavigationPropertyBinding Target>\" // normalized\n      } // optional\n    },\n    \"<13.5.1 ActionImport Name>\" : {\n      \"$kind\" : \"ActionImport\",\n      \"$Action\" : \"<13.5.2 ActionImport Action>\",\n      \"$EntitySet\" : \"<13.5.3 ActionImport EntitySet>\" // optional, normalized\n    },\n    \"<13.6.1 FunctionImport Name>\" : {\n      \"$kind\" : \"FunctionImport\",\n      \"$Function\" : \"<13.6.2 FunctionImport Function>\",\n      \"$EntitySet\" : \"<13.6.3 FunctionImport EntitySet>\", // optional, normalized\n      \"$IncludeInServiceDocument\" : true // omit in case of default value: false\n    }\n  },\n  \"<5.1.1 Schema Namespace>.<14.1.1 Term Name>\" : {\n    \"$kind\" : \"Term\",\n    \"$isCollection\" : true, // omit in case of default value: false\n    \"$Type\" : \"<14.1.2 Term Type>\",\n    \"$BaseTerm\" : \"<14.1.3 Term BaseTerm>\", // optional\n//    \"$DefaultValue\" : \"<14.1.4 Term DefaultValue>\", // omit in case of default value: null\n//    \"$AppliesTo\" : \"<14.1.5 Term AppliesTo>\", // JSON clients need not validate\n    \"$Nullable\" : false, // omit in case of default value: true\n    \"$MaxLength\" : <14.1.6 MaxLength>, // optional, number\n    \"$Precision\" : <14.1.6 Precision>, // optional, number\n    \"$Scale\" : <14.1.6 Scale> | \"variable\", // optional, number or fixed string\n    \"$SRID\" : \"<14.1.6 SRID>\" // optional\n  }\n}\n```\n\n\n\n## Constant and Dynamic Expressions\n\n**Constant Expressions**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nExpression\n\n</th>\n<th valign=\"top\">\n\nOptions\n\n</th>\n<th valign=\"top\">\n\nAdditional Information\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.4 Constant Expressions\n\n</td>\n<td valign=\"top\">\n\n`{\"$Binary\" : \"T0RhdGE\"}`\n\n`{\"$Date\" : \"2000-01-01\"}`\n\n`{\"$DateTimeOffset\" : \"2000-01-01T16:00:00.000-09:00\"}`\n\n`{\"$Decimal\" : \"3.14\"}`\n\n`{\"$Duration\" : \"P11D23H59M59.999999999999S\"}`\n\n`{\"$Guid\" : \"21EC2020-3AEA-1069-A2DD-08002B30309D\"}`\n\n`{\"$TimeOfDay\" : \"21:45:00\"}`\n\n</td>\n<td valign=\"top\">\n\n\"Binary\", \"Date\", \"DateTimeOffset\", \"Decimal\", \"Duration\", \"Guid\", \"TimeOfDay\" are objects with a single property that has a string value.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.4.2 Expression `Bool` \n\n</td>\n<td valign=\"top\">\n\n`false`\n\n`true`\n\n</td>\n<td valign=\"top\">\n\nIs represented by the JavaScript boolean literals.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.4.7 Expression `EnumMember` \n\n</td>\n<td valign=\"top\">\n\n`{\"$EnumMember\" : 42}`\n\n`{\"$EnumMember\" : \"1234567890123456789\"}`\n\n</td>\n<td valign=\"top\">\n\nIs represented like above object notation, but with a JavaScript number literal as long as the value is a safe integer, else with a string value.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.4.8 Expression `Float` \n\n</td>\n<td valign=\"top\">\n\n`3.1415926535`\n\n`{\"$Float\" : \"-INF\"}`\n\n`{\"$Float\" : \"INF\"}`\n\n`{\"$Float\" : \"NaN\"}`\n\n</td>\n<td valign=\"top\">\n\nIs represented by a JavaScript number literal \\(except for the `nanInfinity` ABNF rule which needs an object notation with a string value\\).\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.4.10 Expression `Int` \n\n</td>\n<td valign=\"top\">\n\n`42`\n\n`{\"$Int\" : \"1234567890123456789\"}`\n\n</td>\n<td valign=\"top\">\n\nIs represented by a JavaScript number literal as long as the value is a safe integer. Else the above object notation is used.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.4.11 Expression `String` \n\n</td>\n<td valign=\"top\">\n\n`\"Product Catalog\"` \n\n</td>\n<td valign=\"top\">\n\nIs represented by a JavaScript string literal.\n\n</td>\n</tr>\n</table>\n\n**Dynamic Expressions**\n\n\n<table>\n<tr>\n<th valign=\"top\">\n\nExpression\n\n</th>\n<th valign=\"top\">\n\nOptions and Additional Information\n\n</th>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.1 Comparison and Logical Operators\n\n</td>\n<td valign=\"top\">\n\nedm:Not is written as `{\"$Not\" : <value>, \"@...\" : <value>}`. All others are written like `{\"$And\" : [<value>, <value>], \"@...\" : <value>}` because they require two child expressions.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.2 Expression `AnnotationPath` \n\n</td>\n<td valign=\"top\">\n\n`{\"$AnnotationPath\" : \"...\"}` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.3 Expression `Apply` \n\n</td>\n<td valign=\"top\">\n\n`{\"$Apply\" : [<value>, ...], \"$Function\" : \"<14.5.3.1 Apply Function>\", \"@...\" : <value>}` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.4 Expression `Cast` \n\n</td>\n<td valign=\"top\">\n\n```js\n\n{\n\"$Cast\" : <value>,\n\"$isCollection\" : true, // omit in case of default value: false\n\"$Type\" : \"<14.5.4.1 Cast Type>\",\n\"$MaxLength\" : <6.2.2 MaxLength>, // optional, number\n\"$Precision\" : <6.2.3 Precision>, // optional, number\n\"$Scale\" : <6.2.4 Scale> | \"variable\", // optional, number or fixed string\n\"$SRID\" : \"<6.2.6 SRID>\", // optional\n\"@...\" : <value>\n}\n```\n\n\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.5 Expression `Collection` \n\n</td>\n<td valign=\"top\">\n\n`[<value>, ...]`\n\nSimply an array. No additional properties, no annotations possible.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.6 Expression `If` \n\n</td>\n<td valign=\"top\">\n\n`{\"$If\" : [<value>, <value>, <value>], \"@...\" : <value>}`\n\nCondition, then, else \\(which is optional inside a \"14.5.5 Expression Collection\" only\\).\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.7 Expression `IsOf` \n\n</td>\n<td valign=\"top\">\n\n```js\n\n{\n\"$IsOf\" : <value>,\n\"$isCollection\" : true, // omit in case of default value: false\n\"$Type\" : \"<14.5.7.1 IsOf Type>\",\n\"$MaxLength\" : <6.2.2 MaxLength>, // optional, number\n\"$Precision\" : <6.2.3 Precision>, // optional, number\n\"$Scale\" : <6.2.4 Scale> | \"variable\", // optional, number or fixed string\n\"$SRID\" : \"<6.2.6 SRID>\", // optional\n\"@...\" : <value>\n}\n```\n\n\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.8 Expression `LabeledElement` \n\n</td>\n<td valign=\"top\">\n\n`{\"$LabeledElement\" : <value>, \"$Name\" : \"<5.1.1 Schema Namespace>.<14.5.8.1 LabeledElement Name>\", \"@...\" : <value>}` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.9 Expression `LabeledElementReference` \n\n</td>\n<td valign=\"top\">\n\n`{\"$LabeledElementReference\" : \"<QualifiedName name of a labeled element expression in scope>\"}` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.10 Expression `Null` \n\n</td>\n<td valign=\"top\">\n\n`null`\n\n`{\"$Null\" : null, \"@...\" : <value>}`\n\nThe object notation is needed in case of inline annotations.\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.11 Expression `NavigationPropertyPath` \n\n</td>\n<td valign=\"top\">\n\n`{\"$NavigationPropertyPath\" : \"...\"}` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.12 Expression `Path` \n\n</td>\n<td valign=\"top\">\n\n`{\"$Path\" : \"...\"}` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.13 Expression `PropertyPath` \n\n</td>\n<td valign=\"top\">\n\n`{\"$PropertyPath\" : \"...\"}` \n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.14 Expression `Record` \n\n</td>\n<td valign=\"top\">\n\nThe record itself is a map:\n\n```js\n\n{\n  \"$Type\" : \"<14.5.14.1 Record Type>\",\n  \"<14.5.14.2.1 PropertyValue Property>\" : <value>,\n  \"@...\" : <value>\n}\n```\n\n\n\n</td>\n</tr>\n<tr>\n<td valign=\"top\">\n\n14.5.15 Expression `UrlRef` \n\n</td>\n<td valign=\"top\">\n\n`{\"$UrlRef\" : <value>, \"@...\" : <value>}` \n\n</td>\n</tr>\n</table>\n\n**Related Information**  \n\n\n[OData JSON Format Version 4.0](http://docs.oasis-open.org/odata/odata-json-format/v4.0/os/odata-json-format-v4.0-os.html)\n\n[OData JSON Format for Common Schema Definition Language \\(CSDL\\) Version 4.0](http://docs.oasis-open.org/odata/odata-json-csdl/v4.0/odata-json-csdl-v4.0.html)\n\n[OData Version 4.0 Part 3: Common Schema Definition Language \\(CSDL\\) Plus Errata 03](https://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part3-csdl.html)\n\n",
  "excerpt": "<!-- loio87aac894a40640f89920d7b2a414499b --> OData V4 Metadata JSON Format The OData V4 model provides access to metadata in a streamlined JSON format which is described in the section below. It is d...",
  "wordCount": 2534,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}