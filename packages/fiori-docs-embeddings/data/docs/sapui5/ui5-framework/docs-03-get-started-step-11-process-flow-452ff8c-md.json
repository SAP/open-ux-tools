{
  "id": "sapui5-docs-03-get-started-step-11-process-flow-452ff8c-md",
  "title": "Step 11: Process Flow",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-11-process-flow-452ff8c.md",
  "lastModified": "2025-09-01T18:17:10.451Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Process",
    "Flow"
  ],
  "headers": [
    "Step 11: Process Flow",
    "Preview",
    "ProcessFlow",
    "ProcessFlow.view.xml",
    "ProcessFlow.controller.js"
  ],
  "content": "<!-- loio452ff8c4f12f4f04b3855186c7fa1adc -->\n\n# Step 11: Process Flow\n\nIn this step, we will create the `ProcessFlow` on the **Production Process** page.\n\n\n\n<a name=\"loio452ff8c4f12f4f04b3855186c7fa1adc__section_vtd_2wr_l1b\"/>\n\n## Preview\n\n![](images/Step10_1_a4df9ef.png)\n\n\n\n<a name=\"loio452ff8c4f12f4f04b3855186c7fa1adc__section_n3b_ywr_l1b\"/>\n\n## ProcessFlow\n\nThe `ProcessFlow` in the center of the page will be used to visualize the current state of the production process. Each production step is represented by a lane. The colors of the state segments of `ProcessFlowHeader` are calculated internally according to a `ProcessFlowNode` of a lane. The following semantic colors are used:\n\n-   Grey for **Neutral**\n\n-   Green for **Good**\n\n-   Orange for **Critical**\n\n-   Red for **Error**.\n\n\nThe **Assembly** lane in the middle is a *merged* lane that consists of nodes that are bound together by a parent-child relation. As a result, the usual width will be doubled.\n\nThe `ProcessFlowNode` elements **Spare parts: Purchased** and **Delivery** are highlighted \\(refer to the *focused* property on the API\\). They are of high interest because their states are critical.\n\n\n\n### ProcessFlow.view.xml\n\nYou can view and download this step in the Demo Kit at [Ice Cream Machine - Step 11 - Process Flow](https://ui5.sap.com/#/entity/sap.suite.ui.commons.tutorial.icecream/sample/sap.suite.ui.commons.tutorial.icecream.11).\n\n```xml\n<mvc:View\n    ...\n        <m:ObjectHeader\n            ...\n            <m:headerContainer>\n                <m:HeaderContainer\n                    ...\n                </m:HeaderContainer>\n            </m:headerContainer>\n        </m:ObjectHeader>\n        <m:Panel headerText=\"{i18n>processFlowProcessTitle}\">\n            <ProcessFlow\n                id=\"processflow1\"\n                scrollable=\"false\"\n                nodes=\"{process>/Nodes}\"\n                lanes=\"{process>/Lanes}\"\n                nodePress=\".onNodePressed\">\n                <nodes>\n                    <ProcessFlowNode\n                        laneId=\"{process>lane}\"\n                        nodeId=\"{process>id}\"\n                        title=\"{process>title}\"\n                        titleAbbreviation=\"{process>titleAbbreviation}\"\n                        isTitleClickable=\"{process>isTitleClickable}\"\n                        children=\"{process>children}\"\n                        state=\"{process>state}\"\n                        stateText=\"{process>stateText}\"\n                        texts=\"{process>texts}\"\n                        highlighted=\"{process>highlighted}\"\n                        focused=\"{process>focused}\" />\n                </nodes>\n                <lanes>\n                    <ProcessFlowLaneHeader\n                        laneId=\"{process>id}\"\n                        iconSrc=\"{process>icon}\"\n                        text=\"{process>label}\"\n                        position=\"{process>position}\" />\n                </lanes>\n            </ProcessFlow>\n        </m:Panel>\n    ...\n</mvc:View>\n```\n\nFirst, we are going to add a `ProcessFlow` control to our view. By setting the *scrollable* property to **false**, the `ProcessFlow` will use the default browser scrolling.\n\nNext, we will bind the *nodes* and *lanes* aggregations. Templates will be added to the corresponding aggregations \\(nodes and lanes\\).\n\nThe template for `ProcessFlowNodes` is created using the following properties:\n\n-   The *laneId* that is a unique identifier for the lane the node belongs to.\n\n-   The *nodeId* that is the current node identifier.\n\n-   The **child** property that defines the parent-child relation to other nodes using their *nodeIds*.\n\n-   The **state** property that determines the property of the node and influences the aggregated state of the lane directly.\n\n\nThe next template for the lanes will be created using a `ProcessFlowLaneHeader` with a *laneId* that we already know from the `ProcessFlowNode`. The *iconSrc* property of the `ProcessFlowLaneHeader` accepts any icon. The text below the state of the `ProcessFlowLaneHeader` is set with the *text* property of the lane header. The order of the lanes is defined by the *position* property of the lane header.\n\n\n\n\n\n### ProcessFlow.controller.js\n\n```js\nsap.ui.define([\n    \"sap/ui/core/mvc/Controller\",\n    \"sap/m/MessageToast\",\n    \"sap/base/strings/formatMessage\"\n\n], function(Controller, MessageToast) {\n    \"use strict\";\n\n    return Controller.extend(\"sap.suite.ui.commons.demokit.tutorial.icecream.11.controller.ProcessFlow\", {\n       ...\n       onNodePressed: function(oEvent) {\n            var sItemTitle = oEvent.getParameters().getTitle();\n            MessageToast.show(this.getResourceBundle().getText(\"processFlowNodeClickedMessage\", [sItemTitle]));\n       },\n\n       getResourceBundle: function() {\n           return this.getOwnerComponent().getModel(\"i18n\").getResourceBundle();\n       }\n   });\n});\n```\n\nThe *onNodePressed* event listener is set on the *onNode* event of the `ProcessFlow`. It is called when the user clicks on the *node*. The title text of the *node* will be displayed in the message toast.\n\n",
  "excerpt": "<!-- loio452ff8c4f12f4f04b3855186c7fa1adc --> Step 11: Process Flow In this step, we will create the ProcessFlow on the Production Process page. <a name=\"loio452ff8c4f12f4f04b3855186c7fa1adc__section_...",
  "wordCount": 480,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}