{
  "id": "sapui5-docs-04-essentials-using-data-binding-for-data-export-f1ee7a8-md",
  "title": "Using Data Binding for Data Export",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/using-data-binding-for-data-export-f1ee7a8.md",
  "lastModified": "2025-09-01T18:17:10.552Z",
  "tags": [
    "ui5-framework",
    "md",
    "Using",
    "Data",
    "Binding",
    "for",
    "Export"
  ],
  "headers": [
    "Using Data Binding for Data Export",
    "Export Types",
    "Integration in Controls"
  ],
  "content": "<!-- loiof1ee7a8b2102415bb0d34268046cd3ea -->\n\n# Using Data Binding for Data Export\n\nData binding supports the export of data in a specific format so that the data can be used in other programs.\n\nTo export data, load the necessary modules as shown in the following example:\n\n```js\nsap.ui.require([\"sap/ui/core/util/Export\", \"sap/ui/core/util/ExportTypeCSV\"], function(Export, ExportTypeCSV) {\n    // ...\n});\n```\n\nThe following code snippet uses a JSON model as basis for the export. You can also use other models, such as the OData model.\n\n```js\n\n// \"JSONModel\" required from module \"sap/ui/model/json/JSONModel\"\nvar oModel = JSONModel([\n    {\n        firstname: \"Al\",\n        lastname: \"Dente\"\n    },\n    {\n        firstname: \"Andy\",\n        lastname: \"Friese\"\n    },\n    {\n        firstname: \"Anita\",\n        lastname: \"Mann\"\n    },\n    {\n        firstname: \"Doris\",\n        lastname: \"Schutt\"\n    },\n    {\n        firstname: \"Kenya\",\n        lastname: \"Dewit\"\n    }\n]);\n\n```\n\nIn the next step, create the data export object and pass the required information for the export to the object:\n\n```js\n\n// \"Export\" required from module \"sap/ui/core/util/Export\"\nvar oExport = new Export({\n\n    // \"ExportTypeCSV\" required from module \"sap/ui/core/util/ExportTypeCSV\"\n    // Type that will be used to generate the content. Own ExportType's can be created to support other formats\n    exportType: new ExportTypeCSV({\n        separatorChar: \";\"\n    }),\n\n    // Pass in the model created above\n    models: oModel,\n\n    // binding information for the rows aggregation \n    rows: {\n        path: \"/\" \n    },\n\n    // column definitions with column name and binding info for the content\n    columns: [\n        {\n            name: \"First name\",\n            template: {\n                content: {\n                    path: \"firstname\"\n                }\n            }\n        },\n        {\n            name: \"Last name\",\n            template: {\n                content: {\n                    path: \"lastname\"\n                }\n            }\n        }\n    ]\n});\n\n```\n\nThe export class provides a generate method that triggers the generation process and returns a jQuery Promise object. The done handler is called when the generation process has finished. If you use the OData model, this happens asynchronously. The always handler is also called when the generation has failed. When the generation has finished and the export object is no longer needed, destroy the export object.\n\n```js\n\noExport.generate().done(function(sContent) {\n    console.log(sContent);\n}).always(function() {\n    this.destroy();\n});\n\n```\n\nThe above example provides the following output:\n\n```\nFirst name;Last name\nAl;Dente\nAndy;Friese\nAnita;Mann\nDoris;Schutt\nKenya;Dewit\n```\n\nYou can directly save the file by triggering a download. This calls the generate method internally and uses the file util class \\(`sap/ui/core/util/File`\\) to trigger the download.\n\n```js\n\noExport.saveFile().always(function() {\n    this.destroy();\n});\n\n```\n\n\n\n## Export Types\n\nYou can use the CSV export type out of the box, or define other export types. The concept is similar to custom notepad controls, see [Developing Controls](../09_Developing_Controls/developing-controls-8dcab00.md). The generate method is called and should return the created file as a string.\n\n> ### Note:  \n> Make sure that all values are encoded or escaped properly.\n\n```js\n\n// \"ExportType\" required from module \"sap/ui/core/util/ExportType\"\n// \"encodeXML\" required from module \"sap/base/security/encodeXML\"\nExportType.extend(\"my.own.ExportType\", {\n\n    init: function() {\n        // Set default values\n        this.setProperty(\"fileExtension\", \"mytype\", true);\n        this.setProperty(\"mimeType\", \"text/mytype\", true);\n        this.setProperty(\"charset\", \"utf-8\", true);\n    },\n\n    generate: function() {\n        var aBuffer = [];\n\n        var oColumns = this.columnGenerator(),\n            oColumn;\n\n        aBuffer.push(\"<columns>\");\n\n        while (!(oColumn = oColumns.next()).done) {\n            aBuffer.push(\"<column>\" + encodeXML(oColumn.value.name) + \"</column>\");\n        }\n\n        aBuffer.push(\"</columns>\");\n        \n        var oRows = this.rowGenerator(),\n            oRow;\n\n        aBuffer.push(\"<rows>\");\n\n        while (!(oRow = oRows.next()).done) {\n            var oCells = oRow.value.cells,\n                oCell;\n\n            aBuffer.push(\"<row>\");\n            aBuffer.push(\"<cells>\");\n\n            while (!(oCell = oCells.next()).done) {\n                aBuffer.push(\"<cell\");\n                if (oCell.value.customData.color) {\n                    aBuffer.push(\" color=\\\"\" + encodeXML(oCell.value.customData.color) + \"\\\"\");\n                }\n                aBuffer.push(\">\");\n                aBuffer.push(encodeXML(oCell.value.content));\n                aBuffer.push(\"</cell>\");\n            }\n\n\n        \n        aBuffer.push(\"</rows>\");\n        \n        return aBuffer.join(\"\");\n    }\n});\n\n```\n\n**Custom Data**\n\nIt is also possible to pass `customData` to the cell template. This can be used to provide additional metadata to the `ExportType` \\(see example code above\\).\n\n```js\n\n// column definitions with column name, binding info for the content and additional custom data\ncolumns: [\n    {\n        name: \"First name\",\n        template: {\n            content: {\n                path: \"firstname\"\n            },\n            customData: [\n                {\n                    \"key\": \"color\",\n                    \"value\": {\n                        path: \"color\"\n                    }\n                }\n            ]\n        }\n    },\n    {\n        name: \"Last name\",\n        template: {\n            content: {\n                path: \"lastname\"\n            }\n        }\n    }\n]\n\n```\n\n**Model Data**\n\n```js\n\n// \"JSONModel\" required from module \"sap/ui/model/json/JSONModel\"\nvar oModel = new JSONModel([\n    {\n        firstname: \"Al\",\n        lastname: \"Dente\",\n        color: \"red\"\n    },\n    {\n        firstname: \"Andy\",\n        lastname: \"Friese\",\n        color: \"black\"\n    },\n    {\n        firstname: \"Anita\",\n        lastname: \"Mann\",\n        color: \"yellow\"\n    },\n    {\n        firstname: \"Doris\",\n        lastname: \"Schutt\",\n        color: \"green\"\n    },\n    {\n        firstname: \"Kenya\",\n        lastname: \"Dewit\",\n        color: \"blue\"\n    }\n]);\n\n```\n\n**Output**\n\n```xml\n\n<columns>\n    <column>First name</column>\n    <column>Last name</column>\n</columns>\n<rows>\n    <row>\n        <cells>\n            <cell color=\"red\">Al</cell>\n            <cell>Dente</cell>\n        </cells>\n    </row>\n    <row>\n        <cells>\n            <cell color=\"black\">Andy</cell>\n            <cell>Friese</cell>\n        </cells>\n    </row>\n    <row>\n        <cells>\n            <cell color=\"yellow\">Anita</cell>\n            <cell>Mann</cell>\n        </cells>\n    </row>\n    <row>\n        <cells>\n            <cell color=\"green\">Doris</cell>\n            <cell>Schutt</cell>\n        </cells>\n    </row>\n    <row>\n        <cells>\n            <cell color=\"blue\">Kenya</cell>\n            <cell>Dewit</cell>\n        </cells>\n    </row>\n</rows>\n\n```\n\n\n\n## Integration in Controls\n\n`sap/ui/table/Table`\n\nThe `exportData` method creates an export instance and fills the rows and columns with the table's rows/column definition, if not defined otherwise. This also includes filters and sorters that have been applied to the columns.\n\n```js\n\n// \"ExportTypeCSV\" required from module \"sap/ui/core/util/ExportTypeCSV\"\n\noTable.exportData({\n    exportType: ExportTypeCSV()\n})\n.saveFile()\n.always(function() {\n    this.destroy();\n});\n\n```\n\n",
  "excerpt": "<!-- loiof1ee7a8b2102415bb0d34268046cd3ea --> Using Data Binding for Data Export Data binding supports the export of data in a specific format so that the data can be used in other programs. To export...",
  "wordCount": 778,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}