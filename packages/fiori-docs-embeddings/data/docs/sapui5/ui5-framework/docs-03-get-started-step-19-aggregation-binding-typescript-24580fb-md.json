{
  "id": "sapui5-docs-03-get-started-step-19-aggregation-binding-typescript-24580fb-md",
  "title": "Step 19: Aggregation Binding \\(TypeScript\\)",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-19-aggregation-binding-typescript-24580fb.md",
  "lastModified": "2025-09-01T18:17:10.457Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Aggregation",
    "Binding",
    "TypeScript"
  ],
  "headers": [
    "Step 19: Aggregation Binding \\(TypeScript\\)",
    "Preview",
    "Coding",
    "webapp/model/localInvoices.json \\(New\\)",
    "webapp/manifest.json",
    "webapp/i18n/i18n.properties",
    "webapp/view/InvoiceList.view.xml \\(New\\)",
    "webapp/view/App.view.xml",
    "Conventions"
  ],
  "content": "<!-- loio24580fb89258491db986482f4ed45e47 -->\n\n# Step 19: Aggregation Binding \\(TypeScript\\)\n\nNow that we have established a good structure for our app, it's time to add some more functionality. We start exploring more features of data binding by adding some invoice data in JSON format that we display in a list below the panel.\n\n\n\n## Preview\n\n  \n  \n**A list of invoices is displayed below the panel**\n\n![The graphic has an explanatory text.](images/UI5_Walkthrough_Step_19_b05bdb4.png \"A list of invoices is displayed below the panel\")\n\n\n\n<a name=\"loio24580fb89258491db986482f4ed45e47__section_zfj_ljk_syb\"/>\n\n## Coding\n\nYou can view all files at [OpenUI5 TypeScript Walkthrough - Step 19: Aggregation Binding](https://github.com/sap-samples/ui5-typescript-walkthrough/tree/main/steps/19) and [download the solution as a zip file](https://sap-samples.github.io/ui5-typescript-walkthrough/ui5-typescript-walkthrough-step-19.zip).\n\n\n\n<a name=\"loio24580fb89258491db986482f4ed45e47__section_agj_ljk_syb\"/>\n\n## webapp/model/localInvoices.json \\(New\\)\n\nWe create a new `model` folder in our app project and place the new `localInvoices.json` file in it. We enter the following JSON data into the file:\n\n```\n{\n    \"Invoices\": [\n        {\n            \"ProductName\": \"Pineapple\",\n            \"Quantity\": 21,\n            \"ExtendedPrice\": 87.2,\n            \"ShipperName\": \"Fun Inc.\",\n            \"ShippedDate\": \"2015-04-01T00:00:00\",\n            \"Status\": \"A\"\n        },\n        {\n            \"ProductName\": \"Milk\",\n            \"Quantity\": 4,\n            \"ExtendedPrice\": 10,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-02-18T00:00:00\",\n            \"Status\": \"B\"\n        },\n        {\n            \"ProductName\": \"Canned Beans\",\n            \"Quantity\": 3,\n            \"ExtendedPrice\": 6.85,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-03-02T00:00:00\",\n            \"Status\": \"B\"\n        },\n        {\n            \"ProductName\": \"Salad\",\n            \"Quantity\": 2,\n            \"ExtendedPrice\": 8.8,\n            \"ShipperName\": \"ACME\",\n            \"ShippedDate\": \"2015-04-12T00:00:00\",\n            \"Status\": \"C\"\n        },\n        {\n            \"ProductName\": \"Bread\",\n            \"Quantity\": 1,\n            \"ExtendedPrice\": 2.71,\n            \"ShipperName\": \"Fun Inc.\",\n            \"ShippedDate\": \"2015-01-27T00:00:00\",\n            \"Status\": \"A\"\n        }\n    ]\n}\n```\n\nThe `localInvoices` file simply contains five invoices in a JSON format that we can use to bind controls against them in the app. JSON is a very lightweight format for storing data and can be directly used as a data source for SAPUI5 applications.\n\n\n\n## webapp/manifest.json\n\nWe add a new model named `invoice` to the `sap.ui5` section of the descriptor. This time we want a JSONModel, so we set the type to `sap.ui.model.json.JSONModel`. The `uri` key is the path to our data relative to the component.\n\n```\n{\n  ...\n  \"sap.ui5\": {\n    \"models\": {\n      \"i18n\": {\n        \"type\": \"sap.ui.model.resource.ResourceModel\",\n        \"settings\": {\n          \"bundleName\": \"ui5.walkthrough.i18n.i18n\",\n          \"supportedLocales\": [\n            \"\"\n          ],\n          \"fallbackLocale\": \"\"\n        }\n      },\n      \"invoice\": {\n        \"type\": \"sap.ui.model.json.JSONModel\",\n        \"uri\": \"model/localInvoices.json\"\n      }\n        },\n        \"resources\": {\n          \"css\": [\n            {\n              \"uri\": \"css/style.css\"\n            }\n          ]\n        }\n      }\n}\n```\n\nWith this little configuration our component will automatically instantiate a new `JSONModel` which loads the invoice data from the `localInvoices.json` file. Finally, the instantiated `JSONModel` is put onto the component as a named model invoice. The named model is then visible throughout our app.\n\n\n\n<a name=\"loio24580fb89258491db986482f4ed45e47__section_qtl_rcz_nzb\"/>\n\n## webapp/i18n/i18n.properties\n\nIn the text bundle we create a new text for an Invoice List title, which we'll need in the view we are about to create.\n\n```ini\n# App Descriptor\nappTitle=Hello World\nappDescription=A simple walkthrough app that explains the most important concepts of SAPUI5\n\n# Hello Panel\nshowHelloButtonText=Say Hello\nhelloMsg=Hello {0}\nhomePageTitle=UI5 TypeScript Walkthrough\nhelloPanelTitle=Hello World\nopenDialogButtonText=Say Hello With Dialog\ndialogCloseButtonText=Ok\n\n# Invoice List\ninvoiceListTitle=Invoices\n```\n\n\n\n<a name=\"loio24580fb89258491db986482f4ed45e47__section_sqg_ycz_nzb\"/>\n\n## webapp/view/InvoiceList.view.xml \\(New\\)\n\nIn the view folder, we create a new `InvoiceList.view.xml` view to display the invoices. We use a list control with the custom header text we just specified in our resource bundle and assign the CSS class `sapUiResponsiveMargin` to it. We bound the item aggregation of the list to the root path `Invoices` of the JSON data in our invoice model. And since we defined a named model, we have to prefix each binding definition with the `invoice` identifier followed by the `>` symbol.\n\nIn the `items` aggregation, we define the template for the list that will be automatically repeated for each invoice of our test data. More precisely, we use an `sap/m/ObjectListItem` to create a control for each aggregated child of the `items` aggregation. The `title` property of the list item is bound to the `Quantity` and `ProductName` properties of a single invoice. This is achieved by defining a relative path \\(without `/` character in the beginning\\).\n\n```xml\n<mvc:View\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <List\n      headerText=\"{i18n>invoiceListTitle}\"\n      class=\"sapUiResponsiveMargin\"\n      width=\"auto\"\n      items=\"{invoice>/Invoices}\" >\n      <items>\n         <ObjectListItem\n            title=\"{invoice>Quantity} x {invoice>ProductName}\"/>\n      </items>\n   </List>\n</mvc:View>\n```\n\nThe binding in the list item works because we have bound the `items` aggregation via `items={invoice>/Invoices}` to the invoices.\n\n\n\n## webapp/view/App.view.xml\n\nIn the app view we add a second view and assign it to our newly created `InvoiceList` view to display our invoices below the panel.\n\n```xml\n<mvc:View\n\tcontrollerName=\"ui5.walkthrough.controller.App\"\n\txmlns=\"sap.m\"\n\txmlns:mvc=\"sap.ui.core.mvc\"\n\tdisplayBlock=\"true\">\n    <Shell>\n        <App class=\"myAppDemoWT\">\n            <pages>\n                <Page title=\"{i18n>homePageTitle}\">\n                    <content>\n                        <Panel\n                            headerText=\"{i18n>helloPanelTitle}\"\n                            class=\"sapUiResponsiveMargin\"\n                            width=\"auto\">\n                            <content>\n                                <mvc:XMLView\n                                    viewName=\"ui5.walkthrough.view.HelloPanel\"/>\n                                <mvc:XMLView\n                                    viewName=\"ui5.walkthrough.view.InvoiceList\"/>\n                            </content>\n                        </Panel>\n                    </content>\n                </Page>\n            </pages>\n        </App>\n    </Shell>\n</mvc:View>\n```\n\n\n\n<a name=\"loio24580fb89258491db986482f4ed45e47__section_hzd_f2z_nzb\"/>\n\n## Conventions\n\n-   Any files needed for creating models and the logic relating to model data are stored in the `model` folder. This includes grouping, filtering, and formatting data\n\n-   Model file names are lowercased\n\n\n**Related Information**  \n\n\n[Folder Structure: Where to Put Your Files](../05_Developing_Apps/folder-structure-where-to-put-your-files-003f755.md \"The details described here represent a best practice for structuring an application that features one component, one OData service and less than 20 views. If you're building an app that has more components, OData services and views, you may have to introduce more folder levels than described here.\")\n\n[Lists](../10_More_About_Controls/lists-1da1581.md \"Lists have properties and events and they contain list items that inherit from sap.m.ListItemBase, which provides navigation, selection and event features. The list item type determines the way the list item interacts by providing additional features.\")\n\n[API Reference: `sap.ui.base.ManagedObject.AggregationBindingInfo` ](https://ui5.sap.com/#/api/sap.ui.base.ManagedObject.AggregationBindingInfo)\n\n[API Reference: `sap.m.List`](https://ui5.sap.com/#/api/sap.m.List)\n\n[Samples: `sap.m.List` ](https://ui5.sap.com/#/entity/sap.m.List)\n\n[List Binding \\(Aggregation Binding\\)](../04_Essentials/list-binding-aggregation-binding-91f0577.md \"List binding (or aggregation binding) is used to automatically create child controls according to model data.\")\n\n",
  "excerpt": "<!-- loio24580fb89258491db986482f4ed45e47 --> Step 19: Aggregation Binding \\(TypeScript\\) Now that we have established a good structure for our app, it's time to add some more functionality. We start ...",
  "wordCount": 879,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}