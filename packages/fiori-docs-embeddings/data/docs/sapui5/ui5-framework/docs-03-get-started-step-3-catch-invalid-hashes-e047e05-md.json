{
  "id": "sapui5-docs-03-get-started-step-3-catch-invalid-hashes-e047e05-md",
  "title": "Step 3: Catch Invalid Hashes",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-3-catch-invalid-hashes-e047e05.md",
  "lastModified": "2025-09-01T18:17:10.466Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Catch",
    "Invalid",
    "Hashes"
  ],
  "headers": [
    "Step 3: Catch Invalid Hashes",
    "Preview",
    "Coding",
    "webapp/manifest.json",
    "webapp/view/NotFound.view.xml \\(New\\)",
    "webapp/controller/NotFound.controller.js \\(New\\)",
    "webapp/i18n/i18n.properties",
    "Conventions"
  ],
  "content": "<!-- loioe047e0596e8a4a1db50f4a53c11f4276 -->\n\n# Step 3: Catch Invalid Hashes\n\nSometimes it is important to display an indication that the requested resource was not found. To give you an example: If a user tries to access an invalid pattern which does not match any of the configured routes, the user is notified that something went wrong. You might also know this as a \"404\" or *Not Found Page* from traditional web pages. In this step, we will implement a feature that detects invalid hashes and visualizes this in a nice way.\n\n\n\n## Preview\n\n  \n  \n**Not Found page**\n\n![](images/Tutorial_Navigation_and_Routing_Step_03_81506b2.png \"Not Found page\")\n\n\n\n## Coding\n\nYou can view and download all files in the *Samples* in the Demo Kit at [Routing and Navigation - Step 3](https://ui5.sap.com/#/entity/sap.ui.core.tutorial.navigation/sample/sap.ui.core.tutorial.navigation.03).\n\n  \n  \n**Folder structure for this step**\n\n![](images/Tutorial_Navigation_and_Routing_Step_03b_0b225d6.png \"Folder structure for this step\")\n\n\n\n## webapp/manifest.json\n\n```js\n{\n   ...\n   \"sap.ui5\": {\n      ...\n      \"routing\": {\n         \"config\": {\n            \"routerClass\": \"sap.m.routing.Router\",\n            \"type\": \"View\",\n            \"viewType\": \"XML\",\n            \"path\": \"sap.ui.demo.nav.view\",\n            \"controlId\": \"app\",\n            \"controlAggregation\": \"pages\",\n            \"transition\": \"slide\",\n            \"bypassed\": {\n               \"target\": \"notFound\"\n            },\n            \"async\": true\n         },\n         \"routes\": [{\n            \"pattern\": \"\",\n            \"name\": \"appHome\",\n            \"target\": \"home\"\n         }],\n         \"targets\": {\n            \"home\": {\n               \"id\": \"home\",\n               \"name\": \"Home\",\n               \"level\" : 1\n            },\n            \"notFound\": {\n               \"id\": \"notFound\",\n               \"name\": \"NotFound\",\n               \"transition\": \"show\"\n            }\n         }\n      }\n   }\n}\n```\n\nLet's extend the routing configuration in the descriptor by adding a `bypassed` property and setting its `target` to `notFound`. This configuration tells the router to display the `notFound` target in case no route was matched to the current hash. Next, we add a `notFound` target to the `bypassed` section. The `notFound` target simply configures a `notFound` view with a `show` transition.\n\n\n\n## webapp/view/NotFound.view.xml \\(New\\)\n\n```xml\n<mvc:View\n   controllerName=\"sap.ui.demo.nav.controller.NotFound\"\n   xmlns=\"sap.m\"\n   xmlns:mvc=\"sap.ui.core.mvc\">\n   <MessagePage\n      title=\"{i18n>NotFound}\"\n      text=\"{i18n>NotFound.text}\"\n      description=\"{i18n>NotFound.description}\"/>\n</mvc:View>\n```\n\nNow we create the view referenced above in a new file `NotFound.view.xml` in the `webapp/view folder`. It uses a `sap.m.MessagePage` control to display an error message to the user. In a real app you might use a dynamic message matching the current error situation. Here, we simply display a preconfigured text from our resource bundle.\n\n\n\n## webapp/controller/NotFound.controller.js \\(New\\)\n\n```js\nsap.ui.define([\n   \"sap/ui/core/mvc/Controller\"\n], function (Controller) {\n   \"use strict\";\n   return Controller.extend(\"sap.ui.demo.nav.controller.NotFound\", {\n      onInit: function () {\n      }\n   });\n});\n```\n\nNow we create the controller for the `NotFound` view and save it into the `webapp/controller` folder. This controller will be extended later.\n\n\n\n## webapp/i18n/i18n.properties\n\n```js\n...\nNotFound=Not Found\nNotFound.text=Sorry, but the requested resource is not available.\nNotFound.description=Please check the URL and try again.\n```\n\nAdd the new properties to the `i18n.properties` file.\n\nOpen the URL `index.html#/thisIsInvalid` in your browser. From now on the user will see a nice *Not Found* page if a hash could not be matched to one of our routes.\n\n\n\n## Conventions\n\n-   Always configure the `bypassed` property and a corresponding target\n\n-   Use the `sap.m.MessagePage` control to display routing related error messages\n\n\n**Related Information**  \n\n\n[API Reference: `sap.m.MessagePage`](https://ui5.sap.com/#/api/sap.m.MessagePage)\n\n[API Overview and Samples: `sap.m.MessagePage` ](https://ui5.sap.com/#/entity/sap.m.MessagePage)\n\n",
  "excerpt": "<!-- loioe047e0596e8a4a1db50f4a53c11f4276 --> Step 3: Catch Invalid Hashes Sometimes it is important to display an indication that the requested resource was not found. To give you an example: If a us...",
  "wordCount": 473,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}