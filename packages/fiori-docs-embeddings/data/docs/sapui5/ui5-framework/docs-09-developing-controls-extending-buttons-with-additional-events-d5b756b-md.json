{
  "id": "sapui5-docs-09-developing-controls-extending-buttons-with-additional-events-d5b756b-md",
  "title": "Extending Buttons with Additional Events",
  "category": "ui5-framework",
  "path": "docs/09_Developing_Controls/extending-buttons-with-additional-events-d5b756b.md",
  "lastModified": "2025-09-01T18:17:10.677Z",
  "tags": [
    "ui5-framework",
    "md",
    "Extending",
    "Buttons",
    "with",
    "Additional",
    "Events"
  ],
  "headers": [
    "Extending Buttons with Additional Events"
  ],
  "content": "<!-- loiod5b756bf4e9a4d67961fa21e1ba12c9e -->\n\n# Extending Buttons with Additional Events\n\nExample of a button control that is extended with additional events.\n\nTo create a `HoverButton` control, that is, a button that fires a `hover` event when the mouse enters its area, use the following code:\n\n```js\nsap.m.Button.extend(\"HoverButton\", { // call the new Control type \"HoverButton\" \n                                                // and let it inherit from sap.m.Button\n      metadata: {\n          events: {\n              \"hover\" : {}  // this Button has also a \"hover\" event, in addition to \"press\" of the normal Button\n          }\n      },\n  \n      // the hover event handler:\n      onmouseover : function(evt) {   // is called when the Button is hovered - no event registration required\n          this.fireHover();\n      },\n\n      renderer: {} // add nothing, just inherit the ButtonRenderer as is; \n                   // In this case (since the renderer is not changed) you could also specify this explicitly with:  renderer:\"sap.m.ButtonRenderer\"\n                   // (means you reuse the ButtonRenderer instead of creating a new view\n  });\n```\n\nThe `HoverButton` control is used in the application in the same way as a regular button. The following code snippet shows how to attach a handler to the `hover` event:\n\n```js\n  \nvar myControl = new HoverButton(\"myBtn\", {\n      text: \"Hover Me\",\n      hover: function(evt) {\n          alert(\"Button \" + evt.getSource().getId() + \" was hovered.\");\n      }\n  });\n\n  myControl.placeAt(\"content\");\n```\n\n",
  "excerpt": "<!-- loiod5b756bf4e9a4d67961fa21e1ba12c9e --> Extending Buttons with Additional Events Example of a button control that is extended with additional events. To create a HoverButton control, that is, a ...",
  "wordCount": 209,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}