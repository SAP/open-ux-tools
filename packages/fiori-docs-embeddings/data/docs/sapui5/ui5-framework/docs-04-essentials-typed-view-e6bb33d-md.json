{
  "id": "sapui5-docs-04-essentials-typed-view-e6bb33d-md",
  "title": "Typed View",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/typed-view-e6bb33d.md",
  "lastModified": "2025-09-01T18:17:10.550Z",
  "tags": [
    "ui5-framework",
    "md",
    "Typed",
    "View"
  ],
  "headers": [
    "Typed View",
    "View Definition",
    "View Instantiation",
    "View Declaration in XML",
    "View Declaration in `manifest.json`"
  ],
  "content": "<!-- loioe6bb33d076dc4f23be50c082c271b9f0 -->\n\n# Typed View\n\nA view can also be defined by extending the `sap.ui.core.mvc.View` class. Such a view is referred to as a typed view. This means the view definition represents its own view class.\n\n\n\nA typed view implements its own `View#createContent` method. It must either return one or several root controls that will be rendered as content of the view or a promise resolving with the view content.\n\n\n\n<a name=\"loioe6bb33d076dc4f23be50c082c271b9f0__section_fx1_wqz_y4b\"/>\n\n## View Definition\n\nThe following example shows the definition of a view of type `myapp.views.MyView`:\n\n```js\nsap.ui.define([\n  \"sap/ui/core/mvc/View\",\n  \"sap/m/Panel\"\n], function(View, Panel) {\n  \"use strict\";\n  return View.extend(\"myapp.views.MyView\", {\n    // define which controller to use\n    getControllerModuleName: function() {\n      return \"myapp/controller/Main\";\n    },\n    // create view content and return the root control\n    createContent: async function(oController) {\n      // \"createContent\" allows for asynchronous actions\n      const someControl = await oController.loadFragment(...);\n\n      return new Panel({\n        //create stable id, prefixed with the view id\n        id: this.createId(\"myPanel\"),\n        headerText: \"My Panel\",\n        content: [someControl, /* ... */]\n      });\n    }\n  });\n});\n```\n\nIn addition to the `createContent` method, a view can implement the `getControllerModuleName` method, which defines the module name of the view controller, or the `getControllerName` method, which specifies the name of the view controller to be instantiated and used for the view.\n\n-   `getControllerModuleName`: The name must follow the module name syntax \\(i.e., slash-separated format\\) **without** the `.js` suffix, e.g., `module:myapp/views/MyTypedView`.\n-   `getControllerName`: The name must be in class name notation \\(i.e. dot notation\\) **without** the `.controller` suffix. The suffix will be added by the framework when loading the module containing the controller.\n\n> ### Note:  \n> A Typed View must not specify a `type`, since the class inheriting from `sap/ui/core/mvc/View` is sufficient.\n\n> ### Caution:  \n> Contrary to `JSView`s, Typed Views are modeled as classes extending the `sap/ui/core/mvc/View` base class. When migrating `JSView`s to Typed Views, make sure that your corresponding Controller does not use the same fully qualified class name. For a best practice recommendation on structuring an application project, see [Folder Structure: Where to Put Your Files](../05_Developing_Apps/folder-structure-where-to-put-your-files-003f755.md).\n\n\n\n<a name=\"loioe6bb33d076dc4f23be50c082c271b9f0__section_w3x_msz_y4b\"/>\n\n## View Instantiation\n\nThe preferred way of instantiating a typed view is via the factory function [`sap.ui.core.mvc.View#create`](https://ui5.sap.com/#/api/sap.ui.core.mvc.View/methods/sap.ui.core.mvc.View.create) . When the `viewName` starts with the `module:` prefix, the remainder of the name is assumed to be the name of a module that exports a typed view \\(a subclass of `sap.ui.core.mvc.View`\\). The module name must use the same syntax as for `sap.ui.define` or `sap.ui.require`, respectively, i.e. use slashes for separation.\n\n**Example:** Instantiating a typed view with `View.create`:\n\n```js\nconst oView = await View.create({\n    viewName: \"module:myapp/views/MyView\"\n});\noView.placeAt(\"content\");\n```\n\n\n\n<a name=\"loioe6bb33d076dc4f23be50c082c271b9f0__section_wjs_psz_y4b\"/>\n\n## View Declaration in XML\n\nA typed view in XML can be declared via the class `sap.ui.core.mvc.View`. Using this class requires a `module:` prefix in the `viewName` attribute.\n\n**Example:** View Declaration using class `sap.ui.core.mvc.View`:\n\n```xml\n<mvc:View viewName=\"module:myapp/views/MyView\" />\n```\n\n\n\n<a name=\"loioe6bb33d076dc4f23be50c082c271b9f0__section_gjh_kdr_k1c\"/>\n\n## View Declaration in `manifest.json`\n\nA typed view can be described in a manifest in a fashion similar to the instantiation shown above.\n\nMore information on the `sap.ui5/routing` section can be found in [Routing Configuration](routing-configuration-9023130.md).\n\n```\n{\n  \"sap.ui5\": {\n    \"rootView\": {\n      \"viewName\": \"module:myapp/views/MyView\"\n    },\n    \"routing\": {\n      \"targets\": {\n        \"myHome\": {\n          \"name\": \"module:myapp/views/MyHomeView\"\n        }\n        /* other views, e.g. XML ... */\n      }\n    }\n  }\n}\n```\n\n**Related Information**  \n\n\n[Typed View Sample](https://ui5.sap.com/entity/sap.ui.core.mvc.View/sample/sap.ui.core.sample.View.navigationTypedView)\n\n[API Reference: `sap.ui.core.mvc.View`](https://ui5.sap.com/#/api/sap.ui.core.mvc.View)\n\n",
  "excerpt": "<!-- loioe6bb33d076dc4f23be50c082c271b9f0 --> Typed View A view can also be defined by extending the sap.ui.core.mvc.View class. Such a view is referred to as a typed view. This means the view definit...",
  "wordCount": 538,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}