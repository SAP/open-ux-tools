{
  "id": "sapui5-docs-03-get-started-step-6-chart-container-9847648-md",
  "title": "Step 6: Chart Container",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-6-chart-container-9847648.md",
  "lastModified": "2025-09-01T18:17:10.479Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Chart",
    "Container"
  ],
  "headers": [
    "Step 6: Chart Container",
    "Preview",
    "Chart Content",
    "Table Content",
    "ChartContainer",
    "ChartContainer.view.xml",
    "ChartContainer.controller.js",
    "Table with details",
    "ChartContainer.view.xml"
  ],
  "content": "<!-- loio9847648d69b543e2994630ae3e0027fb -->\n\n# Step 6: Chart Container\n\nIn this step, we will use the *ChartContainer* control to display information in a detailed view.\n\nIn the previous steps, we created a start page with embedded tiles. We prepared the routing configuration for navigation from the *Quality Control* tile to another view.\n\nIn the *Quality Control* view, we want to display the temperatures needed for different flavors and the ideal temperature for getting the best ice cream with a smooth consistency. We will use a chart to visualize the data and a table to get a detailed view with the help of the `ChartContainer` control.\n\n\n\n<a name=\"loio9847648d69b543e2994630ae3e0027fb__section_imm_fqb_k1b\"/>\n\n## Preview\n\n\n\n### Chart Content\n\n![](images/Step5_1_08bae85.png)\n\n\n\n### Table Content\n\n![](images/Step5_2_85f1fc8.png)\n\n\n\n<a name=\"loio9847648d69b543e2994630ae3e0027fb__section_rdh_xsb_k1b\"/>\n\n## ChartContainer\n\nThe `ChartContainer` control manages various data views in one container. The single controls \\(for example, *VizFrame* and *Tables*\\) are embedded in the `ChartContainerContent` controls that were added to the *content* aggregation of the `ChartContainer`.\n\n\n\nYou can view and download this step in the Demo Kit at [Ice Cream Machine - Step 6 - Chart Container](https://ui5.sap.com/#/entity/sap.suite.ui.commons.tutorial.icecream/sample/sap.suite.ui.commons.tutorial.icecream.06).\n\n\n\n\n\n### ChartContainer.view.xml\n\n```xml\nmvc:View\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:suite=\"sap.suite.ui.commons\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns=\"sap.m\"\n    xmlns:l=\"sap.ui.layout\"\n    controllerName=\"sap.suite.ui.commons.demokit.tutorial.icecream.06.controller.ChartContainer\">\n    <Page\n        title=\"{i18n>chartContainerPageTitle}\"\n        showNavButton=\"true\"\n        navButtonPress=\".onNavButtonPressed\"\n        backgroundDesign=\"Solid\">\n        <content>\n            <l:Grid defaultSpan=\"L12 M12 S12\" class=\"sapUiResponsiveMargin\" vSpacing=\"0\" hSpacing=\"0\">\n               <suite:ChartContainer\n                        title=\"{\n                            parts: [\n                                'i18n>chartContainerBulletChartTitle',\n                                'business>/temperatureUnit'\n                            ],\n                            formatter: '.formatMessage'\n                        }\">\n                    <suite:ChartContainerContent\n                        icon=\"sap-icon://vertical-bullet-chart\"\n                        title=\"{i18n>chartContainerBulletChartContentTitle}\">\n                        <suite:content>\n                            <core:Fragment\n                                fragmentName=\"sap.suite.ui.commons.demokit.tutorial.icecream.06.fragment.VizChart\"\n                                type=\"JS\" />\n                        </suite:content>\n                    </suite:ChartContainerContent>\n                </suite:ChartContainer> \n            </l:Grid>\n        </content>\n    </Page>\n</mvc:View>\n```\n\nIn the toolbar, there is a corresponding button for each `ChartContainerContent` from which you can select the content. You can have an icon on the button if you set the *icon* property of the `ChartContainerContent` to the respective SAPUI5 icon URI. The *title* property of the `ChartContainerContent` determines the tooltip text for the button.\n\nSince `VizFrame` is not part of this tutorial, we have provided the `VizChart.fragment.js` JavaScript file in the folder fragment that can be used without modifications.\n\n\n\n\n\n### ChartContainer.controller.js\n\n```js\n\nsap.ui.define([\n     \"sap/ui/core/mvc/Controller\"\n], function(Controller) {\n    \"use strict\";\n\n    return Controller.extend(\"sap.suite.ui.commons.demokit.tutorial.icecream.06.controller.ChartContainer\", {\nonNavButtonPressed: function() {\n            var oRouter = this.getOwnerComponent().getRouter();\n            oRouter.navTo(\"home\");\n        }        \n    });\n});\n```\n\nIn the `ChartContainer.view.xml`, we will add the backward navigation with the `showNavButton` and `navButtonPress` properties. The function that is referenced by the `navButtonPress` event retrieves the router of the component and navigates to the **home** route as specified in `manifest.json`.\n\n\n\n<a name=\"loio9847648d69b543e2994630ae3e0027fb__section_lxt_yqx_k1b\"/>\n\n## Table with details\n\nIn the next step, we are going to display detailed information about the data shown in the chart. We will be using a table in which each value is displayed, so that no information is lost.\n\n\n\n\n\n### ChartContainer.view.xml\n\n```xml\n\nmvc:View\n    xmlns:mvc=\"sap.ui.core.mvc\"\n    xmlns:suite=\"sap.suite.ui.commons\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns=\"sap.m\"\n    xmlns:l=\"sap.ui.layout\"\n    controllerName=\"sap.suite.ui.commons.demokit.tutorial.icecream.06.controller.ChartContainer\">\n    <Page\n        title=\"{i18n>chartContainerPageTitle}\"\n        showNavButton=\"true\"\n        navButtonPress=\".onNavButtonPressed\"\n        backgroundDesign=\"Solid\">\n        <content>\n            <l:Grid defaultSpan=\"L12 M12 S12\" class=\"sapUiResponsiveMargin\" vSpacing=\"0\" hSpacing=\"0\">\n                <suite:ChartContainer\n                        title=\"{\n                            parts: [\n                                'i18n>chartContainerBulletChartTitle',\n                                'business>/temperatureUnit'\n                            ],\n                            formatter: '.formatMessage'\n                        }\">\n                    ...\n                   <suite:ChartContainerContent\n                        icon=\"sap-icon://table-chart\"\n                        title=\"{i18n>chartContainerTableContentTitle}\">\n                        <suite:content>\n                            <Table items=\"{/Temperatures}\">\n                                <columns>\n                                    <Column>\n                                        <Text text=\"{i18n>chartContainerIceCreamId}\" />\n                                    </Column>\n                                    <Column>\n                                        <Text text=\"{i18n>chartContainerTemperature}\" />\n                                    </Column>\n                                    <Column>\n                                        <Text text=\"{i18n>chartContainerTargetTemperature}\" />\n                                    </Column>\n                                </columns>\n                                <items>\n                                    <ColumnListItem>\n                                        <cells>\n                                            <Text text=\"{id}\" />\n                                            <Text text=\"{temperature}\" />\n                                            <Text text=\"{target}\" />\n                                        </cells>\n                                    </ColumnListItem>\n                                </items>\n                            </Table>\n                        </suite:content>\n                    </suite:ChartContainerContent> \n                </suite:ChartContainer>\n            </l:Grid>\n        </content>\n    </Page>\n</mvc:View>\n```\n\nWe are going to create another `ChartContainerContent` with a **table**. This table contains three columns that were created with the **Column** element with a **text** that will be shown in the header. The values were created with the `ColumnListItem` that has a *text* control with a bound *text* property for each cell.\n\n",
  "excerpt": "<!-- loio9847648d69b543e2994630ae3e0027fb --> Step 6: Chart Container In this step, we will use the ChartContainer control to display information in a detailed view. In the previous steps, we created ...",
  "wordCount": 544,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}