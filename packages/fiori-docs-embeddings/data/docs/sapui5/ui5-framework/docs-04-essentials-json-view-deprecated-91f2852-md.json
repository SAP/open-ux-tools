{
  "id": "sapui5-docs-04-essentials-json-view-deprecated-91f2852-md",
  "title": "JSON View \\(deprecated\\)",
  "category": "ui5-framework",
  "path": "docs/04_Essentials/json-view-deprecated-91f2852.md",
  "lastModified": "2025-09-01T18:17:10.522Z",
  "tags": [
    "ui5-framework",
    "md",
    "JSON",
    "View",
    "deprecated"
  ],
  "headers": [
    "JSON View \\(deprecated\\)",
    "Aggregation Handling",
    "Event Handling",
    "Data Binding"
  ],
  "content": "<!-- loio91f285256f4d1014b6dd926db0e91070 -->\n\n# JSON View \\(deprecated\\)\n\nThe JSON view type is defined in a file. The file name has to either end with `.view.json` or as a JSON string. The file name and the folder structure together specify the name of the view that equals the SAPUI5 module name within the modularization concept.\n\n> ### Caution:  \n> Deprecated as of UI5 version 1.120, replaced by [XML View](xml-view-91f2928.md).\n\nFor the file `resources/sap/hcm/Address.view.json`, the view name is `sap.hcm.Address`. The application uses this view name for displaying an instance of this view.\n\nThe file looks as follows:\n\n```js\n{ \n   \"Type\":\"sap.ui.core.mvc.JSONView\",\n   \"controllerName\":\"sap.hcm.Address\",\n   \"content\": [{\n      \"Type\":\"sap.m.Image\",\n      \"id\":\"MyImage\",\n      \"src\":\"http://www.sap.com/global/ui/images/global/sap-logo.png\"\n   },\n   {\n      \"Type\":\"sap.m.Button\",\n      \"id\":\"MyButton\",\n      \"text\":\"Press Me\"\n\n   }]\n\n}\n```\n\nNest the JSON objects analogous to the nesting of SAPUI5 controls and add the property values as attributes. The syntax is the same as the syntax of a JSON constructor for any control.\n\n> ### Note:  \n> You can use strings, Boolean values, and null in your JSON view.\n\n\n\n<a name=\"loio91f285256f4d1014b6dd926db0e91070__section_37BCAE29E4604ABBA78979649D54CF04\"/>\n\n## Aggregation Handling\n\nYou add child controls as arrays. This is shown in the example above where an image and a button have been added to the view content aggregation.\n\n\n\n## Event Handling\n\nIn JSON views, event handlers are bound as attributes with the attribute name as event name like `press` for a button and the attribute value as event handler name.\n\nThe following declaration causes `controller.doSomething()` to be executed when the button is pressed:\n\n```js\n...\n   {\n      \"Type\":\"sap.m.Button\",\n      \"id\":\"MyButton\",\n      \"text\":\"Press Me\",\n      \"press\":\"doSomething\"\n   }\n...\n```\n\nThe location in which an event handler is looked up, are similar to XML views \\(see [Handling Events in XML Views](handling-events-in-xml-views-b0fb4de.md)\\).\n\n\n\n## Data Binding\n\nYou can bind data in JSON views. To bind the texts of a control to a language-dependent resource bundle, define the resource bundle via name \\(`resourceBundleName` property\\) or a URL \\(`resourceBundleUrl` property\\) and assign an alias \\(`resourceBundleAlias` property\\) for the bundle within the view definition. The binding path is the same for all other SAPUI5 data bindings.\n\nResource bundle content:\n\n```\nMY_TEXT=Hello World\n```\n\n> ### Example:  \n> ```js\n> {   \"Type\": \"sap.ui.core.JSONView\",\n>     \"controllerName\":\"my.own.views.test\",\n>     \"resourceBundleName\":\"myBundle\",\n>     \"resourceBundleAlias\":\"i18n\",\n>     \"content\": [{\n>         \"Type\":\"sap.m.Panel\",\n>         \"id\":\"myPanel\",\n>         \"content\":[{\n>             \"Type\":\"sap.m.Button\",\n>             \"id\":\"Button1\",\n>             \"text\":\"{i18n>MY_TEXT}\",\n>             \"press\": \"doIt\"\n>         }]\n>     }]\n> }\n> \n> ```\n\nThe `ResourceModel` for binding this texts is created during view instantiation. The model is set as secondary model with the given alias to the view instance. To bind other properties to another model, create the model in the corresponding controller or HTML page and attach it to the view with another alias.\n\n",
  "excerpt": "<!-- loio91f285256f4d1014b6dd926db0e91070 --> JSON View \\(deprecated\\) The JSON view type is defined in a file. The file name has to either end with .view.json or as a JSON string. The file name and t...",
  "wordCount": 433,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}