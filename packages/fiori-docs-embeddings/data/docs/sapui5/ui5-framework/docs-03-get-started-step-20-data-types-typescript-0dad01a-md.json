{
  "id": "sapui5-docs-03-get-started-step-20-data-types-typescript-0dad01a-md",
  "title": "Step 20: Data Types \\(TypeScript\\)",
  "category": "ui5-framework",
  "path": "docs/03_Get-Started/step-20-data-types-typescript-0dad01a.md",
  "lastModified": "2025-09-01T18:17:10.462Z",
  "tags": [
    "ui5-framework",
    "md",
    "Step",
    "Data",
    "Types",
    "TypeScript"
  ],
  "headers": [
    "Step 20: Data Types \\(TypeScript\\)",
    "Preview",
    "Coding",
    "webapp/controller/InvoiceList.controller.ts \\(New\\)",
    "webapp/view/InvoiceList.view.xml",
    "Conventions"
  ],
  "content": "<!-- loio0dad01aa741c49508b74082dd9f8c9af -->\n\n# Step 20: Data Types \\(TypeScript\\)\n\nThe list of invoices is already looking nice, but what is an invoice without a price assigned? Typically prices are stored in a technical format and with a '`.`' delimiter in the data model. For example, our invoice for pineapples has the calculated price `87.2` without a currency. We are going to use the SAPUI5 data types to format the price properly, with a locale-dependent decimal separator and two digits after the separator.\n\n\n\n## Preview\n\n  \n  \n**The list of invoices with prices and number units**\n\n![The graphic has an explanatory text.](images/UI5_Walkthrough_Step_20_dc9e919.png \"The list of invoices with prices and number units\")\n\n\n\n<a name=\"loio0dad01aa741c49508b74082dd9f8c9af__section_wqj_flk_syb\"/>\n\n## Coding\n\nYou can view all files at [OpenUI5 TypeScript Walkthrough - Step 20: Data Types](https://github.com/sap-samples/ui5-typescript-walkthrough/tree/main/steps/20) and [download the solution as a zip file](https://sap-samples.github.io/ui5-typescript-walkthrough/ui5-typescript-walkthrough-step-20.zip).\n\n\n\n<a name=\"loio0dad01aa741c49508b74082dd9f8c9af__section_ol1_zfz_nzb\"/>\n\n## webapp/controller/InvoiceList.controller.ts \\(New\\)\n\nWe want to display in our list view the price in Euro, and typically the currency is part of our data model in the back end. Here this is not the case, so we need to define it directly in the app. We therefore create a controller for the invoice list and define a view model for the currency code for Euro. It is a simple JSON model with just one key `currency` and the value `EUR`.\n\n```js\nimport Controller from \"sap/ui/core/mvc/Controller\";\nimport JSONModel from \"sap/ui/model/json/JSONModel\";\n\n/**\n * @namespace ui5.walkthrough.controller\n */\nexport default class App extends Controller {\n    \n    onInit(): void {\n        const viewModel = new JSONModel({\n            currency: \"EUR\"\n        });\n        this.getView()?.setModel(viewModel, \"view\");        \n    } \n};\n```\n\n\n\n<a name=\"loio0dad01aa741c49508b74082dd9f8c9af__section_xqj_flk_syb\"/>\n\n## webapp/view/InvoiceList.view.xml\n\nWe add a reference to the invoice list controller to the view to get access to the view model we defined in the controller.\n\nWe add a price and the currency to our invoices list in the view by adding the `number` attribute to the `ObjectListItem` control. To apply the currency data type, we use the `require` attribute with the namespace URI `sap.ui.core`, for which the `core` prefix is already defined in our XML view. This allows us to write the attribute as `core:require`. We then add the currency data type module to the list of required modules and assign it the alias `Currency`, making it available for use within the view. Finally, we set the `type` attribute of the binding syntax to the alias `Currency`. The `Currency` type handles the formatting of the price for us, based on the currency code. In our case, the price is displayed with 2 decimals.\n\nAdditionally, we set the formatting option `showMeasure` to `false`. This hides the currency code in the property `number`, because it is passed on to the `ObjectListItem` control as a separate property `numberUnit`.\n\n```xml\n<mvc:View\n    controllerName=\"ui5.walkthrough.controller.InvoiceList\"\n    xmlns=\"sap.m\"\n    xmlns:core=\"sap.ui.core\"\n    xmlns:mvc=\"sap.ui.core.mvc\">\n    <List\n        headerText=\"{i18n>invoiceListTitle}\"\n        class=\"sapUiResponsiveMargin\"\n        width=\"auto\"\n        items=\"{invoice>/Invoices}\">\n        <items>\n            <ObjectListItem\n                core:require=\"{\n                    Currency: 'sap/ui/model/type/Currency'\n                }\"\n                title=\"{invoice>Quantity} x {invoice>ProductName}\"\n                number=\"{\n                    parts: [\n                        'invoice>ExtendedPrice',\n                        'view>/currency'\n                    ],\n                    type: 'Currency',\n                    formatOptions: {\n                        showMeasure: false\n                    }\n                }\"\n                numberUnit=\"{view>/currency}\"/>\n        </items>\n    </List>\n</mvc:View>\n```\n\nAs you can see above, we use a special binding syntax for the `number` property of the `ObjectListItem`. This binding syntax makes use of so-called \"Calculated Fields\", which allows the binding of multiple properties from different models to a single property of a control. The properties bound from different models are called \"parts\". In the example above, the property of the control is `number` and the bound properties \\(\"parts\"\\) retrieved from two different models are `invoice>ExtendedPrice` and `view>/currency`.\n\n\n\n## Conventions\n\nUse data types instead of custom formatters whenever possible.\n\n**Related Information**  \n\n\n[Composite Binding](../04_Essentials/composite-binding-a2fe8e7.md \"Calculated fields enable the binding of multiple properties in different models to a single property of a control.\")\n\n[Formatting, Parsing, and Validating Data](../04_Essentials/formatting-parsing-and-validating-data-07e4b92.md \"Data that is presented on the UI often has to be converted so that is human readable and fits to the locale of the user. On the other hand, data entered by the user has to be parsed and validated to be understood by the data source. For this purpose, you use formatters and data types.\")\n\n[API Reference: `sap.ui.base.ManagedObject`](https://ui5.sap.com/#/api/sap.ui.base.ManagedObject)\n\n[API Reference: `sap.ui.base.ManagedObject.PropertyBindingInfo`](https://ui5.sap.com/#/api/sap.ui.base.ManagedObject.PropertyBindingInfo)\n\n[API Reference: `sap.ui.model.type`](https://ui5.sap.com/#/api/sap.ui.model.type)\n\n[API Reference: `sap.ui.model.type.Currency`](https://ui5.sap.com/#/api/sap.ui.model.type.Currency)\n\n[Samples: `sap.ui.model.type.Currency` ](https://ui5.sap.com/#/entity/sap.ui.model.type.Currency)\n\n",
  "excerpt": "<!-- loio0dad01aa741c49508b74082dd9f8c9af --> Step 20: Data Types \\(TypeScript\\) The list of invoices is already looking nice, but what is an invoice without a price assigned? Typically prices are sto...",
  "wordCount": 668,
  "version": "1.0.0",
  "source": "sapui5",
  "sourceType": "github"
}