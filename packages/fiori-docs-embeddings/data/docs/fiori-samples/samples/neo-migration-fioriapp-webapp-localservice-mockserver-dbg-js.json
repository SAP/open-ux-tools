{
  "id": "fiori-samples-neo-migration-fioriapp-webapp-localservice-mockserver-dbg-js",
  "title": "mockserver dbg",
  "category": "samples",
  "path": "neo-migration/fioriapp/webapp/localService/mockserver-dbg.js",
  "lastModified": "2025-09-01T18:17:10.809Z",
  "tags": [
    "samples",
    "js",
    "mockserver",
    "dbg"
  ],
  "headers": [],
  "content": "# mockserver dbg.md\n\n```javascript\n# mockserver dbg.md\n\n```javascript\n# mockserver dbg.md\n\n```javascript\n# mockserver dbg.md\n\n```javascript\n# mockserver dbg.md\n\n```javascript\n# mockserver dbg.md\n\n```javascript\n# mockserver dbg.md\n\n```javascript\n# mockserver dbg.md\n\n```javascript\n# mockserver-dbg.js\n\n```javascript\nsap.ui.define([\n\t\"sap/ui/core/util/MockServer\",\n\t\"sap/ui/model/json/JSONModel\",\n\t\"sap/base/util/UriParameters\",\n\t\"sap/base/Log\"\n], function (MockServer, JSONModel, UriParameters, Log) {\n\t\"use strict\";\n\n\tvar oMockServer,\n\t\t_sAppPath = \"mycompany/myapp/MyWorklistApp/\",\n\t\t_sJsonFilesPath = _sAppPath + \"localService/mockdata\";\n\n\tvar oMockServerInterface = {\n\n\t\t/**\n\t\t * Initializes the mock server asynchronously.\n\t\t * You can configure the delay with the URL parameter \"serverDelay\".\n\t\t * The local mock data in this folder is returned instead of the real data for testing.\n\t\t * @protected\n\t\t * @param {object} [oOptionsParameter] init parameters for the mockserver\n\t\t * @returns{Promise} a promise that is resolved when the mock server has been started\n\t\t */\n\t\tinit : function (oOptionsParameter) {\n\t\t\tvar oOptions = oOptionsParameter || {};\n\n\t\t\treturn new Promise(function(fnResolve, fnReject) {\n\t\t\t\tvar sManifestUrl = sap.ui.require.toUrl(_sAppPath + \"manifest.json\"),\n\t\t\t\t\toManifestModel = new JSONModel(sManifestUrl);\n\n\t\t\t\toManifestModel.attachRequestCompleted(function ()  {\n\t\t\t\t\tvar oUriParameters = UriParameters.fromQuery(window.location.search),\n\t\t\t\t\t\t// parse manifest for local metadata URI\n\t\t\t\t\t\tsJsonFilesUrl = sap.ui.require.toUrl(_sJsonFilesPath),\n\t\t\t\t\t\toMainDataSource = oManifestModel.getProperty(\"/sap.app/dataSources/mainService\"),\n\t\t\t\t\t\tsMetadataUrl = sap.ui.require.toUrl(_sAppPath + oMainDataSource.settings.localUri),\n\t\t\t\t\t\t// ensure there is a trailing slash\n\t\t\t\t\t\tsMockServerUrl = /.*\\/$/.test(oMainDataSource.uri) ? oMainDataSource.uri : oMainDataSource.uri + \"/\";\n\n\t\t\t\t\t// create a mock server instance or stop the existing one to reinitialize\n\t\t\t\t\tif (!oMockServer) {\n\t\t\t\t\t\toMockServer = new MockServer({\n\t\t\t\t\t\t\trootUri: sMockServerUrl\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\toMockServer.stop();\n\t\t\t\t\t}\n\n\t\t\t\t\t// configure mock server with the given options or a default delay of 0.2s\n\t\t\t\t\tMockServer.config({\n\t\t\t\t\t\tautoRespond : true,\n\t\t\t\t\t\tautoRespondAfter : (oOptions.delay || oUriParameters.get(\"serverDelay\") || 200)\n\t\t\t\t\t});\n\n\t\t\t\t\t// simulate all requests using mock data\n\t\t\t\t\toMockServer.simulate(sMetadataUrl, {\n\t\t\t\t\t\tsMockdataBaseUrl : sJsonFilesUrl,\n\t\t\t\t\t\tbGenerateMissingMockData : true\n\t\t\t\t\t});\n\n\t\t\t\t\tvar aRequests = oMockServer.getRequests();\n\n\t\t\t\t\t// compose an error response for requesti\n\t\t\t\t\tvar fnResponse = function (iErrCode, sMessage, aRequest) {\n\t\t\t\t\t\taRequest.response = function(oXhr){\n\t\t\t\t\t\t\toXhr.respond(iErrCode, {\"Content-Type\": \"text/plain;charset=utf-8\"}, sMessage);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\t// simulate metadata errors\n\t\t\t\t\tif (oOptions.metadataError || oUriParameters.get(\"metadataError\")) {\n\t\t\t\t\t\taRequests.forEach(function (aEntry) {\n\t\t\t\t\t\t\tif (aEntry.path.toString().indexOf(\"$metadata\") > -1) {\n\t\t\t\t\t\t\t\tfnResponse(500, \"metadata Error\", aEntry);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// simulate request errors\n\t\t\t\t\tvar sErrorParam = oOptions.errorType || oUriParameters.get(\"errorType\"),\n\t\t\t\t\t\tiErrorCode = sErrorParam === \"badRequest\" ? 400 : 500;\n\t\t\t\t\tif (sErrorParam) {\n\t\t\t\t\t\taRequests.forEach(function (aEntry) {\n\t\t\t\t\t\t\tfnResponse(iErrorCode, sErrorParam, aEntry);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// custom mock behaviour may be added here\n\n\t\t\t\t\t// set requests and start the server\n\t\t\t\t\toMockServer.setRequests(aRequests);\n\t\t\t\t\toMockServer.start();\n\n\t\t\t\t\tLog.info(\"Running the app with mock data\");\n\t\t\t\t\tfnResolve();\n\t\t\t\t});\n\n\t\t\t\toManifestModel.attachRequestFailed(function () {\n\t\t\t\t\tvar sError = \"Failed to load application manifest\";\n\n\t\t\t\t\tLog.error(sError);\n\t\t\t\t\tfnReject(new Error(sError));\n\t\t\t\t});\n\t\t\t});\n\t\t},\n\n\t\t/**\n\t\t * @public returns the mockserver of the app, should be used in integration tests\n\t\t * @returns {sap.ui.core.util.MockServer} the mockserver instance\n\t\t */\n\t\tgetMockServer : function () {\n\t\t\treturn oMockServer;\n\t\t}\n\t};\n\n\treturn oMockServerInterface;\n});\n```\n```\n```\n```\n```\n```\n```\n```\n```",
  "excerpt": "mockserver dbg.md javascript mockserver dbg.md javascript mockserver dbg.md javascript mockserver dbg.md javascript mockserver-dbg.js",
  "wordCount": 428,
  "version": "1.0.0",
  "source": "fiori-samples",
  "sourceType": "github"
}