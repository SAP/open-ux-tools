{
  "id": "fiori-samples-app-with-tutorials-cap-fiori-elements-incident-management-srv-incidentservice-js",
  "title": "incidentservice",
  "category": "samples",
  "path": "app-with-tutorials/cap/fiori-elements-incident-management/srv/incidentservice.js",
  "lastModified": "2025-09-01T18:17:10.797Z",
  "tags": [
    "samples",
    "js",
    "incidentservice"
  ],
  "headers": [
    "setTechnicalFlags",
    "_setFlags",
    "setPriorityCriticality",
    "_setCriticality",
    "validateincident"
  ],
  "content": "# incidentservice.md\n\n```javascript\n# incidentservice.md\n\n```javascript\n# incidentservice.md\n\n```javascript\n# incidentservice.md\n\n```javascript\n# incidentservice.md\n\n```javascript\n# incidentservice.md\n\n```javascript\n# incidentservice.md\n\n```javascript\n# incidentservice.md\n\n```javascript\n# incidentservice.js\n\n```javascript\nconst cds = require(\"@sap/cds\");\n\n/**\n * Enumeration values for FieldControlType\n * @see https://github.com/SAP/odata-vocabularies/blob/master/vocabularies/Common.md#FieldControlType\n */\nconst FieldControl = {\n    Mandatory: 7,\n    Optional: 3,\n    ReadOnly: 1,\n    Inapplicable: 0,\n  };\n  \nmodule.exports = cds.service.impl(async function (srv) {\n    const {\n        Incidents,\n        BusinessPartner,\n        Individual,\n        BusinessPartnerAddress\n    } = srv.entities\n\n    //read/edit event hook after read  of entity 'Incidents'\n    srv.after([\"READ\", \"EDIT\"], \"Incidents\", setTechnicalFlags);\n    srv.after(\"READ\", \"Incidents\", setPriorityCriticality);\n    srv.before(\"SAVE\", \"Incidents\", validateincident);\n\n    /**\n     * Set technical flags, used\n     for controlling UI behaviour, on the 'Incidents'\n     entity\n     *\n     * @param Incidents {\n         Incidents | Incidents[]\n     }(Array of ) Incidents\n     */\n    function setTechnicalFlags(Incidents) {\n\n        function _setFlags(incident) {\n            incident.isDraft = !incident.IsActiveEntity;\n            // field control on the 'identifier' property\n            if (incident.IsActiveEntity) {\n                incident.identifierFieldControl = FieldControl.Optional;\n            } else if (incident.HasActiveEntity) {\n                incident.identifierFieldControl = FieldControl.ReadOnly;\n            } else {\n                incident.identifierFieldControl = FieldControl.Mandatory;\n            }\n        }\n\n        if (Array.isArray(Incidents)) {\n            Incidents.forEach(_setFlags);\n        } else {\n            _setFlags(Incidents);\n        }\n    };\n\n    /**\n     * Set priority criticality used for display in LR table\n     *\n     * @param Incidents {\n         Incidents | Incidents[]\n     }(Array of ) Incidents\n     */\n    function setPriorityCriticality(Incidents) {\n\n        function _setCriticality(incident) {\n            if (incident.priority) {\n                incident.priority.criticality = parseInt(incident.priority.code);\n            }\n        }\n\n        if (Array.isArray(Incidents)) {\n            Incidents.forEach(_setCriticality);\n        } else {\n            _setCriticality(Incidents);\n        }\n    }\n\n    /**\n     * Validate a 'incident'\n     entry\n     *\n     * @param req   Request\n     */\n    function validateincident(req) {\n        // check mandatory properties\n        if (!req.data.identifier) {\n            req.error(400, \"Enter an Incident Identifier\", \"in/identifier\");\n        }\n    }\n})\n\n```\n```\n```\n```\n```\n```\n```\n```\n```",
  "excerpt": "incidentservice.md javascript incidentservice.md javascript incidentservice.md javascript incidentservice.md javascript incidentservice.js",
  "wordCount": 250,
  "version": "1.0.0",
  "source": "fiori-samples",
  "sourceType": "github"
}