{
  "id": "fiori-samples-misc-cicd-readme-md",
  "title": "Sample Configurations to improve ABAP deployment task",
  "category": "samples",
  "path": "misc/cicd/README.md",
  "lastModified": "2025-09-01T18:17:10.805Z",
  "tags": [
    "samples",
    "md",
    "Sample",
    "Configurations",
    "improve",
    "ABAP",
    "deployment",
    "task"
  ],
  "headers": [
    "Sample Configurations to improve ABAP deployment task",
    "Developers Note",
    "Using environment variables using .env file",
    "Create Transport Request (TR) Dynamically",
    "CI/CD Pipeline",
    "Generate ZIP archive",
    "Option 1",
    "Option 2",
    "Additional Notes"
  ],
  "content": "# Sample Configurations to improve ABAP deployment task\n\nPlease refer to the following guide for more info;\n\nhttps://www.npmjs.com/package/@sap/ux-ui5-tooling\n\n## Developers Note\n\nSAP Cloud Transport Management (CTMS) for deployment is a recommended solution for ABAP deployment. While manual deployments or the use of CLI tools are supported, the CI/CD process may run in non-SAP DevOps platforms, but deployment to SAP BTP should go through CTMS. \n\nYou can integrate external CI/CD pipelines, eg. Azure DevOps or CircleCI, to CTMS via APIs or using [GitHub Actions](https://github.com/marketplace/actions/deploy-to-sap-btp-with-ctms). \n\nWith CTMS, you have full control on the changes going through the landscape, and have a proper audit log to trace them if required.\n\nFor more information, please refer to the following resources;\n\nhttps://community.sap.com/t5/technology-blog-posts-by-sap/sap-btp-runtimes-my-personal-considerations-and-preferences-on-cloud/ba-p/14129510\n\n\n## Using environment variables using .env file\n\nCreate a `.env` file in the root of your SAPUI5 project and append the following content;\n```\nXYZ_USER=myusername\nXYZ_PASSWORD=mypassword\n```\n\nUpdate `ui5-deploy.yaml` with the `credentials`, ensuring it's aligned with the existing root nodes, for example `target`;\n\n```YAML\n    configuration:\n      yes: true\n      failFast: true\n      target:\n        url: https://XYZ.sap-system.corp:44311\n        client: 200        \n      credentials:\n        username: env:XYZ_USER\n        password: env:XYZ_PASSWORD\n```\n\nWhen you run `npm run deploy` or `npm run undeploy`, it will pick up the respective environment variables.\n\nSetting `env:` for the credentials is only required if you want to configure a `.env` file to load environment variables, otherwise you export them as normal;\n\n```bash\nexport XYZ_USER='~username'\nexport XYZ_PASSWORD='~password''\n```\n\n`ui5-deploy.yaml` is then updated as \n```YAML\n      credentials:\n        username: XYZ_USER\n        password: XYZ_PASSWORD\n```\n\nOr if using CLI params;\n```bash\n--username XYZ_USER --pasword XYZ_PASSWORD\n```\n\nAdditional note, if you are using a CI/CD pipeline, then you can make further updates to your `ui5-deploy.yaml` as shown above;\n- Add `yes: true` to bypass the `Yes` confirmation prompt\n- Add `failFast: true` to immediately exit the process if any exception is thrown, for example, a typical scenario is where authentication might fail, and you want to disable the credentials prompts from being shown. This will exit with code of `1`.\n\n## Create Transport Request (TR) Dynamically\n\nTo create a TR dynamically during each deploy or undeploy task, append the `REPLACE_WITH_TRANSPORT` bookmark to your `ui5-deploy.yaml` configuration;\n```YAML\n      app:\n        name: /TEST/SAMPLE_APP\n        package: /TEST/UPLOAD\n        transport: REPLACE_WITH_TRANSPORT\n```\n\nUsing the TR `REPLACE_WITH_TRANSPORT` bookmark for undeployment works as well, for example, when you run `npm run undeploy` it will also creat a TR on the fly.\n\n## CI/CD Pipeline\n\nGenerate CLI commands for your CI/CD pipeline;\n\n```bash\nnpx fiori deploy --url https://your-env.hana.ondemand.com --name 'SAMPLE_APP' --package 'MY_PACKAGE' --transport 'REPLACE_WITH_TRANSPORT' --archive-path 'archive.zip' --username 'env:XYZ_USER' --password 'env:XYZ_PASSWORD' --noConfig --failFast --yes\n```\n\n## Generate ZIP archive\n\nYou have two options;\n\n### Option 1\n\nRemove `--archive-path 'archive.zip'` from the CLI params and allow the `dist` folder to be archived on the fly during deployment \n\n### Option 2 \n\nGenerate an `archive.zip` manually which will require some updates to your existing project; update `package.json` with a new `devDependency`;\n```json\n\"ui5-task-zipper\": \"latest\"\n```\n\nUpdate `ui5.yaml` with a new `builder` task;\n```YAML\nbuilder:\n  customTasks:\n    - name: ui5-task-zipper\n      afterTask: generateVersionInfo\n      configuration:\n        archiveName: \"archive\"          \n        keepResources: true\n```\n\nWhen `npm run build` is now executed, it will generate a new archive file `./dist/arhive.zip`.\n\nYou can also create a new configuration file called `build.yaml` to handle this specific task;\n\n```yaml\n# yaml-language-server: $schema=https://sap.github.io/ui5-tooling/schema/ui5.yaml.json\n\nspecVersion: \"3.1\"\nmetadata:\n  name: <your-project-name>\ntype: application  \nbuilder:\n  customTasks:\n    - name: ui5-task-zipper\n      afterTask: generateVersionInfo\n      configuration:\n        archiveName: \"archive\"          \n        keepResources: true\n```\nRun the CLI command using the new `build.yaml` configuration;\n\n```bash\nnpx ui5 build --config build.yaml\n```\nwhich will generate a new archive file `./dist/arhive.zip`.\n\nOptionally, update your `scripts` in `package.json` with the new command;\n\n```json\n\"archive\": \"ui5 build --config build.yaml\"\n```\n\nUsing either flow, you can see the new custom task `ui5-task-zipper` being executed;\n```bash\ninfo ProjectBuilder Preparing build for project project1\ninfo ProjectBuilder   Target directory: ./dist\ninfo Project 1 of 1: ❯ Building application project project1...\ninfo project1 › Running task escapeNonAsciiCharacters...\ninfo project1 › Running task replaceCopyright...\ninfo project1 › Running task replaceVersion...\ninfo project1 › Running task minify...\ninfo project1 › Running task generateFlexChangesBundle...\ninfo project1 › Running task generateComponentPreload...\ninfo project1 › Running task ui5-task-zipper...\ninfo ProjectBuilder Build succeeded in 199 ms\ninfo ProjectBuilder Executing cleanup tasks...\n```\n\nNote: please update your scripts to reflect the new target folder to `./dist/archive.zip`.\n\n## Additional Notes\n\n1. For deployment purposes, appending additional headers is not supported via CLI or `ui5-deploy.yaml` configurations.\n2. If you want to enable debug mode, you can set the debug parameter as follows\n```bash\n# Using default npm scripts\nDEBUG=* npm run deloy\n# Or if you are using the CLI directly\nDEBUG=* npx fiori deploy ...\n```\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "excerpt": "Sample Configurations to improve ABAP deployment task Please refer to the following guide for more info; https://www.npmjs.com/package/@sap/ux-ui5-tooling Developers Note SAP Cloud Transport Managemen...",
  "wordCount": 753,
  "version": "1.0.0",
  "source": "fiori-samples",
  "sourceType": "github"
}