{
  "id": "fiori-samples-sample-fiori-gen-ext-src-index-ts",
  "title": "index",
  "category": "samples",
  "path": "sample-fiori-gen-ext/src/index.ts",
  "lastModified": "2025-09-01T18:17:10.817Z",
  "tags": [
    "samples",
    "ts",
    "index"
  ],
  "headers": [
    "extends"
  ],
  "content": "# index.md\n\n```typescript\n# index.md\n\n```typescript\n# index.md\n\n```typescript\n# index.md\n\n```typescript\n# index.md\n\n```typescript\n# index.md\n\n```typescript\n# index.md\n\n```typescript\n# index.md\n\n```typescript\n# index.ts\n\n```typescript\nimport Generator from \"yeoman-generator\";\nimport extensions from \"./custom/questions\";\nimport { FioriGeneratorExtensionAPI, FioriGeneratorSettings, ReadonlyState, FioriGeneratorPromptExtension } from \"@sap/generator-fiori\";\nimport { IPrompt as YUIStep } from \"@sap-devx/yeoman-ui-types\";\nimport { join } from \"path\";\n\nexport default class extends Generator implements FioriGeneratorExtensionAPI {\n\n  fioriGeneratorState: ReadonlyState;\n  localAnswers;\n\n  constructor(args: any, opts: Generator.GeneratorOptions) {\n    super(args, opts);\n    this.fioriGeneratorState = this.options.state as ReadonlyState;\n  }\n\n  async prompting(): Promise<void> {\n    this.log('Sample Fiori generator extension: prompting()');\n    // These are the prompts for the first step\n    const answersPrompt1 = await this.prompt([\n      {\n        type: \"input\",\n        guiOptions: {\n          breadcrumb: true,\n        },\n        name: \"prompt1\",\n        message: \"Sample prompt1\",\n        default: 'Default value prompt1',\n        validate: (val, answers): boolean | string =>\n          val ? true : \"Validation message from prompt1, enter a value\",\n      },\n      {\n        type: \"input\",\n        guiOptions: {\n          breadcrumb: true,\n        },\n        name: \"prompt2\",\n        message: \"Sample prompt2\",\n        validate: (val, answers): boolean | string =>\n          val ? true : \"Validation message from prompt2, enter a value\",\n      },\n    ]);\n    this.log(`Answers from sample sub-generator \"Extension step 1\" prompts:  ${JSON.stringify(answersPrompt1)}`);\n    // These are the prompts for the second step\n    const answersPrompt2 = await this.prompt([\n      {\n        type: \"input\",\n        guiOptions: {\n          breadcrumb: true,\n        },\n        name: \"prompt3\",\n        message: \"Sample prompt3\",\n        default: () => this.fioriGeneratorState.project.namespace || \"\"\n      },\n      {\n        type: \"input\",\n        guiOptions: {\n          breadcrumb: true,\n        },\n        name: \"prompt4\",\n        message: \"Sample prompt4\"\n      },\n    ]);\n    this.log(`Answers from sample sub-generator \"Extension step 2\" prompts:  ${JSON.stringify(answersPrompt2)}`);\n    // Assign local answers for access in following phases\n    this.localAnswers = Object.assign({}, answersPrompt1, answersPrompt2);\n  }\n\n  async configuring(): Promise<void> {\n    // Set the root path so it can be excluded in calls to `this.fs`\n    this.destinationRoot(join(this.fioriGeneratorState.project.targetFolder, this.fioriGeneratorState.project.name));\n  }\n\n  async writing(): Promise<void> {\n    const manifestPath = this.destinationPath('webapp', 'manifest.json');\n    // Write a new file with some prompt answers\n    this.fs.writeJSON(this.destinationPath('sample.json'), {\n      moduleName: this.fioriGeneratorState.project.name,\n      moduleNamespace: this.fioriGeneratorState.project.namespace,\n      ...this.localAnswers\n    });\n\n    // Extend the application manifest.json\n    this.fs.extendJSON(manifestPath, {\n      'sap.app': {\n          tags: {\n            keywords: [\"fiori\", \"custom extension\", \"acme\"]\n          }\n      }});\n\n    // Update the package.json, for example, by adding a dependency\n    const packageJsonPath = this.destinationPath('package.json');\n    if (this.fs.exists(packageJsonPath)) {\n      this.fs.extendJSON(packageJsonPath, { devDependencies: { 'fast-glob': '3.2.12' }})\n    };\n  }\n\n  // Provide the extension prompts\n  _getExtensions(): FioriGeneratorPromptExtension {\n    this.log(`Getting extension defintions`);\n    return extensions;\n  }\n\n  // Return the nav steps that will be added to the LHS navigation panel\n  // Note: for each step there must be one call to prompt()\n  _getSteps(): YUIStep[] {\n    return [\n      {\n        name: \"Extension step 1\",\n        description: \"Extension step 1 description\",\n      },\n      {\n        name: \"Extension step 2\",\n        description: \"Extension step 2 description\",\n      }\n    ];\n  }\n\n  /**\n   * Provide the settings options to the consuming generator\n   */\n  _getSettings(): FioriGeneratorSettings {\n    return {\n      generateIndexHtml: false\n    };\n  }\n}\n\n```\n```\n```\n```\n```\n```\n```\n```\n```",
  "excerpt": "index.md typescript index.md typescript index.md typescript index.md typescript index.ts",
  "wordCount": 446,
  "version": "1.0.0",
  "source": "fiori-samples",
  "sourceType": "github"
}