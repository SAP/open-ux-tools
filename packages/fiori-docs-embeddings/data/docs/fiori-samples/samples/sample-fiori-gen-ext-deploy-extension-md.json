{
  "id": "fiori-samples-sample-fiori-gen-ext-deploy-extension-md",
  "title": "Deploying Fiori generator extensions to Business Application Studio",
  "category": "samples",
  "path": "sample-fiori-gen-ext/Deploy_extension.md",
  "lastModified": "2025-09-01T18:17:10.816Z",
  "tags": [
    "samples",
    "md",
    "Deploying",
    "Fiori",
    "generator",
    "extensions",
    "Business",
    "Application",
    "Studio"
  ],
  "headers": [
    "Deploying Fiori generator extensions to Business Application Studio",
    "Using the WEX (Business Application Studio Extension Management) tool",
    "Example: Deploying the sample Fiori generator extension"
  ],
  "content": "# Deploying Fiori generator extensions to Business Application Studio\n\nTo make Fiori generator extensions available to the Fiori generator they must be installed globally. To ensure the extension is always available for BAS (Business Application Studio) users an additional configuration can be used to install the extension automatically when creating new dev spaces. \n\n## Using the WEX (Business Application Studio Extension Management) tool\n\nThe BAS WEX tool (https://www.npmjs.com/package/@sapse/business-application-studio-extension-management) can be used to pre-configure the BAS Create new dev space page with additional extension options. Please ensure the pre-conditions for using the tool are met: https://help.sap.com/docs/bas/sap-business-application-studio/create-and-deploy-sap-business-application-studio-extension\n\nBAS Simple Extension install process requires that the extensions are available from a publicly accesssible repo. The simplest approach is to create a repo on `github.com` ensuring that access is restricted to a single admin user and protected using a Github Personal Access Token (PAT). The PAT is then included in the repo access URL. The recommended approach is to create a release atrefact on the repo so that versioned releases of the extension can be managed. This can be done through the `Draft a new release` option on Github web (There is also an API to achieve the same result). Note that the compiled output must be included in the repo for extensions written in TypeScript, as is demonstrated in the `@sample/fiori-gen-ext` example.\n\n## Example: Deploying the sample Fiori generator extension\n\nThe provided sample Fiori generator extenion `@sample/fiori-gen-ext` can be deployed as follows:\n\n1.  Locally implement and test your Fiori generator extension by installing globally using: \n\n    `npm install -g <extension_tarfile>`\n\n    The tar file can be generated by running `npm pack` in the root of the package.\n\n    See https://github.com/SAP-samples/fiori-tools-samples/sample-fiori-gen-ext/README.md for a detailed description of how to implement the extension.\n\n2.  Once the extension had been tested and behaves as expected, publish the new package to `github.com` ensuring that the repo is not publicly accessible. Generate a new Github Personal Access Token with the minimum required access (Profile -> Settings -> Developer Settings -> Tokens(classic) ). The minimum required access is: `read:packages` and `repo`. Create a new release artefact by using the `Draft new release` option (https://github.com/\\<User Name>/<Repository Name\\>/releases/new)\n\n3. Prepare the Simple Extension config file which will be configured to access the artefact from Github: \n\nFile: `sample-extension.json`\n```\n{\n    \"apiVersion\": \"1\",\n    \"name\": \"testing-sample-gen-ext\",\n    \"namespace\": \"ext-<sub-account_name>\",\n    \"autoSelectExtensions\": [\n    ],\n    \"about\": {\n        \"tagline\": \"Sample Gen Ext - SAP Fiori Tools\",\n        \"description\": \"Test extensions config - Sample Gen Ext\",\n        \"thumbnail\": \"<base 64 encoded image>\"\n    },\n    \"hidden\": false,\n    \"version\": \"0.0.2\",\n    \"vscodeExtensions\": [],\n        \"yeomanPackages\": [\n            {\n                \"name\": \"@sample/fiori-gen-ext\",\n                \"versionRange\": \"https://<User Name>:<Github PAT>@github.com/<User Name>/sample-fiori-gen-ext/archive/refs/tags/v0.0.1.tar.gz\"\n            }\n        ]\n}\n```\nNote: To auto-select the extension for all new dev spaces please use the property `autoSelectExtensions: [\"ext-sap-ux-stage/testing-sample-gen-ext\"]`\n\n\n4. Deploy the WEX (SAP Business Application Studio Extension Management tool) config file using the command: `wex deploy --verbose -f <wex_config_filename>.json`. \n\n    See: https://www.npmjs.com/package/@sapse/business-application-studio-extension-management?activeTab=code for a full descriptopn of the SAP Business Application Studio Extension Management tool.\n\n5. Following successful deployment a new extension option should appear on the BAS Create Dev Spaces page. Selecting this option (if not selected by default) and creating a dev space should automatically install the extension. To verify the installation or view any errors please see the log file in the opened dev space at the path : `/extbin/generators/simple-extension-yo-install-output.txt`.\n\n",
  "excerpt": "Deploying Fiori generator extensions to Business Application Studio To make Fiori generator extensions available to the Fiori generator they must be installed globally. To ensure the extension is alwa...",
  "wordCount": 538,
  "version": "1.0.0",
  "source": "fiori-samples",
  "sourceType": "github"
}