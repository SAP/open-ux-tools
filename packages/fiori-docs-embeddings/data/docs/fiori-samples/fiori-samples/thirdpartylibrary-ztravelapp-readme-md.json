{
  "id": "fiori-samples-thirdpartylibrary-ztravelapp-readme-md",
  "title": "Adding External Library to your SAP Fiori UI application",
  "category": "fiori-samples",
  "path": "thirdpartylibrary/ztravelapp/README.md",
  "lastModified": "2025-09-29T10:06:39.533Z",
  "tags": [
    "fiori-samples",
    "md",
    "README"
  ],
  "headers": [
    "Adding External Library to your SAP Fiori UI application",
    "Prerequisites",
    "Create SAP Fiori Dev Space",
    "Generate a freestyle SAPUI5 application",
    "Tasks",
    "Additional Links"
  ],
  "content": "# Adding External Library to your SAP Fiori UI application\n\nIn this sample project, `xml-js` is going to be added as an external library.\n\n# Prerequisites\n\n- You’ll need an SAP Business Technology Platform (SAP BTP) account\n- You are subscribed to SAP Business Application Studio, follow this [tutorial](https://help.sap.com/products/SAP%20Business%20Application%20Studio/9d1db9835307451daa8c930fbd9ab264/6331319fd9ea4f0ea5331e21df329539.html) for more information\n- Sub-account destination `northwind` is available\n\n# Create SAP Fiori Dev Space\n\nFrom your SAP BTP cockpit, select Instances and Subscriptions, select SAP Business Application Studio which will open a new tab into your dev space manager. Generate a SAP Fiori dev space.\n\n# Generate a freestyle SAPUI5 application\n\nPlease refer to the following link, [Developing Apps with SAP Fiori Tools](https://sapui5.hana.ondemand.com/sdk/#/topic/a460a7348a6c431a8bd967ab9fb8d918) for more information.\n\n# Tasks\n\nAppend third party library to `package.json`;\n```bash\nnpm install xml-js --save-prod\n```\n\nAppend UI5 tooling extension to include a custom middleware and a custom task which allows use of NPM package names in your code;\n```bash\nnpm install ui5-tooling-modules --save-prod\n```\n\nOpen `ui5.yaml` and append a new task, ensuring the alignment is maintained;\n```YAML\n    - name: ui5-tooling-modules-middleware\n      afterMiddleware: compression\n      configuration:\n        addToNamespace: true\n```\n\nOpen `View1.controller.js` and append the `xml-js` library;\n```JS\nsap.ui.define(\n  [\"sap/ui/core/mvc/Controller\", \"xml-js\"],\n```\n\nUnderstanding the `sap.ui.defined` JavaScript namespace, please refer to this [link](https://sapui5.hana.ondemand.com/sdk/#/api/sap.ui%23methods/sap.ui.define) paying attention to the `Third Party Modules` section, as this provides guidance on how third party modules are imported and referenced.\n\nNext, update the `function` to reference this library;\n```JS\nfunction (Controller, xmljs) {\n```\n\nWith these changes, you can now consume the library inside your code;\n```JS\n var xmlToJson = JSON.parse(\n      xmljs.xml2json(xml, {\n        compact: true,\n        spaces: 4,\n      })\n    );\n    console.log(`>>>> xmlToJson ${JSON.stringify(xmlToJson)}`);\n```\n\n# Additional Links\n\n* [External libraries in UI5 + CAP + SAP Build Work Zone, Standard Edition](https://blogs.sap.com/2023/11/08/external-libraries-in-ui5-cap-sap-build-work-zone-standard-edition/)\n* [Smart templates and SAP Fiori Apps – 57 Tips and Tricks](https://blogs.sap.com/2019/09/20/smart-templates-tips-and-tricks/)",
  "excerpt": "Adding External Library to your SAP Fiori UI application In this sample project, xml-js is going to be added as an external library. Prerequisites - You’ll need an SAP Business Technology Platform (SA...",
  "wordCount": 296,
  "version": "1.0.0",
  "source": "fiori-samples",
  "sourceType": "github"
}