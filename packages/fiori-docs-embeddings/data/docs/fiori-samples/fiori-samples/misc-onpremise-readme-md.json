{
  "id": "fiori-samples-misc-onpremise-readme-md",
  "title": "SAP Cloud Connector (On-Premise) Destination",
  "category": "fiori-samples",
  "path": "misc/onpremise/README.md",
  "lastModified": "2025-09-29T10:06:39.524Z",
  "tags": [
    "fiori-samples",
    "md",
    "README"
  ],
  "headers": [
    "SAP Cloud Connector (On-Premise) Destination",
    "Overview",
    "Prerequisites",
    "Understanding SAP Cloud Connector and SAP BTP Destinations",
    "Flow Diagram",
    "Configuration Steps",
    "SAP Cloud Connector Configuration",
    "SAP BTP Destination",
    "Validate Connectivity",
    "Connectivity Issues",
    "Common Issues",
    "Enable Trace Logging",
    "Additional Resources",
    "Support Ticket",
    "Step 1: Provide Screenshots",
    "Step 2: Trace SAP Cloud Connector Activity",
    "Step 3: Environment Check Report",
    "Step 4: Archive Files",
    "Deployment Issues",
    "Option 1: ABAP Transaction Log",
    "Option 2: Enable Trace Logging",
    "Option 3: Execute a Connection Test Using Business Application Studio (BAS)"
  ],
  "content": "# SAP Cloud Connector (On-Premise) Destination\n\n# Overview\nAn SAP BTP destination defined with Proxy type of `OnPremise` is a configuration that enables secure connectivity between your SAP Business Technology Platform (BTP) applications and on-premises systems residing behind your corporate firewall.\n\n1. Use Cases include;\n   1. Accessing on-premises SAP systems (S/4HANA, ECC, etc.)\n   1. Connecting to internal databases residing in corporate networks\n   1. Consuming APIs from services that aren't internet-facing\n1. Authentication options include;\n   1. Basic Authentication\n   2. OAuth2 Client Credentials\n   3. OAuth2 User Credentials\n   4. Principal Propagation\n1. Security Features include;\n   1. Encrypted communication between SAP BTP and on-premises systems\n   2. Supports principal propagation for identity forwarding\n   3. No need to expose internal systems directly to the internet\n\n# Prerequisites\n\n- You have SAP Cloud Foundry Runtime environment configured in your SAP BTP subaccount\n- You have admin rights to the SAP BTP cockpit to modify destinations\n- You have admin rights to the SAP Cloud Connector (SCC) UI\n- Only OData XML services are supported when creating SAP Fiori Elements applications when using SAP Fiori tools generator\n- Understanding [SAP BTP destinations](https://learning.sap.com/learning-journeys/administrating-sap-business-technology-platform/using-destinations)\n- Creating [SAP BTP destinations in the SAP BTP cockpit](https://developers.sap.com/tutorials/cp-cf-create-destination..html)\n\n\n## Understanding SAP Cloud Connector and SAP BTP Destinations\n\nWhen you build applications on SAP BTP, especially those that need to connect to backend systems (like S/4HANA, other cloud services, or external APIs), you generally don't hardcode connection details. Instead, you define **Destinations** in your SAP BTP subaccount. These destinations centralize connection information (URL, authentication, proxy settings, etc.).\n\nBusiness Application Studio (BAS) is your development environment. When you develop an application in BAS that will run on BTP, you configure it to consume these destinations. At runtime, the BTP application looks up the destination by name, retrieves the necessary connection details from the SAP BTP Destination Service, and then establishes the connection to the backend system.\n\n## Flow Diagram\n\nThe following Mermaid diagram illustrates this process, assuming the default IdP is used for authentication, which is the SAP BTP Identity Provider (IdP) configured in your subaccount. \n\n```mermaid\nsequenceDiagram\n   participant Developer as Developer (BAS)\n   participant BTPApp as SAP BTP Application (Runtime)\n   participant DestinationService as SAP BTP Destination Service\n   participant ConnectivityService as SAP BTP Connectivity Service (Cloud Connector)\n   participant BackendSystem as Backend System (e.g., S/4HANA, External API)\n\n   Developer->>BTPApp: 1. Develops & Deploys App in BAS\n   BTPApp->>DestinationService: 2. App requests Destination 'MyBackend'\n   DestinationService->>BTPApp: 3. Provides Destination Configuration (URL, Auth, Proxy)\n\n   alt On-Premise Backend (via Cloud Connector)\n      BTPApp->>ConnectivityService: 4a. Connects via Secure Tunnel\n      ConnectivityService-->>BackendSystem: 5a. Routes request to On-Premise System\n   else Cloud/External Backend\n      BTPApp->>BackendSystem: 4b. Direct HTTP/API Call\n   end\n\n   BackendSystem-->>BTPApp: 6. Responds with Data\n   BTPApp-->>Developer: 7. Application processes and displays data\n```\n\n# Configuration Steps\n\n## SAP Cloud Connector Configuration\n\nThis guide will not document the steps to configure an SAP Cloud Connector, the following blog post details [Installation and Configuration of SAP Cloud Connector](https://blogs.sap.com/2021/09/05/installation-and-configuration-of-sap-cloud-connector).\n\n## SAP BTP Destination\n\nTo get a better understanding of SAP BTP destinations, refer to the guide [Consuming and validating SAP BTP destinations to support OData XML Service](../destinations/README.md).\n\nThe [SAP BTP Cloud Connector destination configuration](cloudconnector?raw=true) can be imported directly into your SAP BTP destinations list and it contains the following properties;\n\n```text\n#\nType=HTTP\nHTML5.DynamicDestination=true\nDescription=SAP Cloud Connector\nAuthentication=PrincipalPropagation\nCloudConnectorLocationId=scloud\nWebIDEEnabled=true\nProxyType=OnPremise\nURL=http\\://my-internal-host\\:44330/\nName=cloudconnector\nWebIDEUsage=odata_abap\n```\n\nQuick Summary of the properties;\n- `WebIDEUsage` is configured with `odata_abap`, this means that the destination is used to expose OData service catalogs to the SAP Business Application Studio\n- `WebIDEEnabled` is set to true; this means that the destination is enabled for use in the SAP Business Application Studio\n- `HTML5.Timeout` is set to 60000 ms; this is the time the destination will wait for a response from the service before timing out\n- `HTML5.DynamicDestination` is set to true. This means that the destination will be dynamically created at runtime.\n- `Authentication` is set to `PrincipalPropagation`. This means that the destination to support a productive landscape, to maintain the same user context and to avoid the need for a password.\n- `CloudConnectorLocationId` is set to `scloud`. This is the location ID of the SAP Cloud Connector that is configured in the SAP BTP cockpit. The SAP BTP subaccount can be configured with different cloud connectors.\n- `URL` is set to `http://my-internal-host:44330/` which indicates the internal URL that is then mapped to your on-premise system within your local On-Premise network. Note, the URL will always default to `http://` soo only the port and address are configurable.\n\n# Validate Connectivity\n\nTo validate your SAP BTP destination connectivity, run the [Environment Check](../destinations/README.md#environment-check) and review the generated results.\n\n# Connectivity Issues\n\nIf you are experiencing connectivity issues, please check the following;\n\n### Common Issues\n\nThis [guide](https://ga.support.sap.com/dtp/viewer/index.html#/tree/3046/actions/45995:48363:53594:48366:52526) covers some of the most common issues encountered when using SCC and SAP BTP destinations. If you make changes to your configuration, please re-run your existing steps to see if the issue is resolved.\n\n- Ensure that the SCC is running and that the connection to the on-premise system is established, you can review the SCC logs for any errors, see next section\n- Ensure there are no issues with firewalls blocking incoming connections from SAP BTP, in some cases, you may need to whitelist the IP addresses of the SAP BTP data centers\n- Ensure there are no issues with SSL certificates, you can review the SCC `core` or `ljs` logs for any errors, see next section\n\n### Enable Trace Logging\n\nStep 1: Enable logging in the SAP Cloud Connector (SCC) UI.\n\n* Confirm the version of your SAP Cloud Connector (SCC).\n* Set Cloud Connector Loggers to ALL.\n* Set Other Loggers to Information\n* Enable Payload Trace (ensure the correct subaccount is selected)\n  Replicate the issue and provide us with the following logs, if generated:\n* ljs_trace.log (Cloud Connector).\n* scc_core.log (if applicable, newer version).\n* traffic_trace_<subaccount>_on_<region>.trc.\n* tunnel_traffic_trace_<subaccount>_on_<region>.trc (if applicable, newer version).\n\n__Note:__ As best practice, we recommend that you do not enable trace logging in production environments unless you are troubleshooting a specific issue.\n\nStep 2: Run the scenario that is failing and check the logs for any errors. If there are no errors, run the Environment Check to call the V2 and V4 catalog API endpoints. The logs will provide detailed information about the requests and responses between the SAP BTP and the On-Premise system.\n\nStep 3: Once you've gathered the logs, you can disable the trace settings.\n\nFor more details about these logs, see [SAP Cloud Connector Troubleshooting](https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/cloud-connector-troubleshooting).\n\nStep 4: Review the logs for any errors or issues. The logs will provide detailed information about the requests and responses between the SAP BTP and the on-premise system.\n\nIf you do not see any network traffic in the `traffic_trace_` logs, then the issue is most likely with the SCC configuration where the SAP Cloud Connector is unable to establish a secure connection to the target ABAP system which is blocking traffic.\n\n# Additional Resources\n\nCloud Connector, explained in simple terms - https://community.sap.com/t5/technology-blog-posts-by-sap/cloud-connector-explained-in-simple-terms/ba-p/13547036\n\nInstallation and Configuration of SAP Cloud Connector, https://blogs.sap.com/2021/09/05/installation-and-configuration-of-sap-cloud-connector which provides a step-by-step guide to configuring SAP Cloud Connector.\n\nPrincipal Propagation Configuration;\n1. Blog post https://blogs.sap.com/2021/09/06/setting-up-principal-propagation\n2. SAP Help Portal https://help.sap.com/docs/connectivity/sap-btp-connectivity-cf/configuring-principal-propagation\n3. Check Logs https://help.sap.com/docs/SUPPORT_CONTENT/appservices/3361376259.html?locale=en-US&state=PRODUCTION&version=1.0#HowtotroubleshootCloudConnectorprincipalpropagationoverHTTPS-Checkingthelogs,followtheclientcertificate\n\n[Consuming SAPUI5 Libraries from an On-Premise System](./ui5-onpremise.md) provides a step-by-step guide to consuming SAPUI5 libraries from an On-Premise system using SAP Cloud Connector and a SAP BTP destination.\n\n# Support Ticket\n\nIf you are still experiencing issues, please raise a support ticket using the support component `BC-MID-SCC` and ensure you provide the following information:\n\n## Step 1: Provide Screenshots\n\nNavigate to SAP BTP -> Subaccount -> Connectivity -> Destinations. Select the affected destination and ensure all properties are shown.\n\nFrom your SAP Cloud Connector (SCC):\n* Subaccount Overview: SCC -> Subaccount Overview -> Click Subaccount.\n* Virtual Host Mapping: SCC -> Cloud to On-Premise -> Select Virtual Host Mapping as defined in SAP BTP Destination.\n* Access Control: SCC -> Cloud to On-Premise -> Access Control -> Select Mapping -> Actions -> Edit (pencil icon).\n* Access Control: SCC -> Cloud to On-Premise -> Access Control -> Select Mapping -> Ensure Access Policy is set to Path and All Sub-Paths and URL Path is /. Note this may differ depending on security concerns.\n* Check Availability: SCC -> Cloud to On-Premise -> Access Control -> Actions -> Select Mapping -> Check Availability.\n\n## Step 2: Trace SAP Cloud Connector Activity\n\n* Confirm the version of your SAP Cloud Connector.\n* Set Cloud Connector Loggers to ALL.\n* Set Other Loggers to Information\n* Enable Payload Trace (ensure the correct subaccount is selected)\n  Replicate the issue and provide us with the following logs, if generated:\n* ljs_trace.log (Cloud Connector).\n* scc_core.log (if applicable, newer version).\n* traffic_trace_<subaccount>_on_<region>.trc.\n* tunnel_traffic_trace_<subaccount>_on_<region>.trc (if applicable, newer version).\n\nAlso, specify the date and time of the request to help us narrow down the logs.\n\nOnce you've gathered the logs, you can disable the trace settings.\n\n## Step 3: Environment Check Report\nRun the [Environment Check Report](../destinations/README.md#environment-check) and attach the generated zip file.\n\n## Step 4: Archive Files\n\nCompress all the requested files into a single zip file and attach it to the support ticket.\n\n# Deployment Issues\n\nIf you are experiencing deployment issues, see [Deployment Issues](https://ga.support.sap.com/index.html#/tree/3046/actions/45995:45996:50742:46000) for troubleshooting steps. \n\nIn most instances, the root cause of deployment issues relates to the prerequisites not being met.\n\n### Option 1: ABAP Transaction Log\n\nIf the connection to the ABAP system is working but API requests are failing, check the ABAP transaction logs:\n\nUse `/IWFND/ERROR_LOG` to view OData service errors.\n\nUse `/IWFND/GW_CLIENT` to test and analyze service calls.\n\nRefer [SAP ABAP guide](https://www.youtube.com/watch?v=Tmb-O966GwM)\n\n### Option 2: Enable Trace Logging\n\nRun the following deployment command with debug logging enabled to get more information about the API request and response. This will help identify any issues during the deployment process.\n\n```bash\n# Mac or Linux\nDEBUG=* npm run deploy\n# Windows\nset DEBUG=* && npm run deploy\n```\nTo make it a permanent change, in your HTML5 application, you can add `--verbose` to enable trace logging to get more information about the API request and response.\n\n```json\n\"deploy\": \"npm run build && fiori deploy --config ui5-deploy.yaml --verbose && rimraf archive.zip\"\n```\n\nRe-run the deployment command `npm run deploy` and check the console output for any errors or issues. The trace logging will provide detailed information about the requests and responses between the SAP BTP and the On-Premise system.\n\n### Option 3: Execute a Connection Test Using Business Application Studio (BAS)\n- Open a BAS terminal window and run the following command to execute the connection test:\nReplace the `<destination-name>` with the name of your SAP BTP destination.\nReplace the `<bsp-name>` with the name of your BSP name.\n```bash\ncurl -vs -i -H \"X-CSRF-Token: Fetch\" \"https://dest.<destination-name>/sap/opu/odata/UI5/ABAP_REPOSITORY_SRV/Repositories(%27<bsp-name>%27)?saml2=disabled\"  > curl-abap-srv-output.txt 2>&1\n```\n- Review the `curl-abap-srv-output.txt` file for any errors or issues. In some instances, the root cause of why the API request is failing can be found in the response body or headers.\n\nNote, if you get an HTTP 404 error, this means that the BSP application is not yet deployed but indicates there is no connectivity issue to your On-Premise ABAP system.\n\n\n\n",
  "excerpt": "SAP Cloud Connector (On-Premise) Destination Overview An SAP BTP destination defined with Proxy type of OnPremise is a configuration that enables secure connectivity between your SAP Business Technolo...",
  "wordCount": 1846,
  "version": "1.0.0",
  "source": "fiori-samples",
  "sourceType": "github"
}