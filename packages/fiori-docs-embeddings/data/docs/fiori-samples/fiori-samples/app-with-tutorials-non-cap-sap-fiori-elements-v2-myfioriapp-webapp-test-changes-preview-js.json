{
  "id": "fiori-samples-app-with-tutorials-non-cap-sap-fiori-elements-v2-myfioriapp-webapp-test-changes-preview-js",
  "title": "changes preview",
  "category": "fiori-samples",
  "path": "app-with-tutorials/non-cap/sap-fiori-elements/V2/myfioriapp/webapp/test/changes_preview.js",
  "lastModified": "2025-09-29T10:06:39.513Z",
  "tags": [
    "fiori-samples",
    "js",
    "changes",
    "preview"
  ],
  "headers": [],
  "content": "# changes_preview.js\n\n```javascript\n//Load the fake lrep connector only if ui5 version < 1.78\nvar version = sap.ui.version.split(\".\");\nif (parseInt(version[0], 10) <= 1 && parseInt(version[1], 10) < 78) {\n    sap.ui.getCore().loadLibraries([\"sap/ui/fl\"]);\n    sap.ui.require([\"sap/ui/fl/FakeLrepConnector\"], function (FakeLrepConnector) {\n        jQuery.extend(FakeLrepConnector.prototype, {\n            create: function (oChange) {\n                return Promise.resolve();\n            },\n            stringToAscii: function (sCodeAsString) {\n                if (!sCodeAsString || sCodeAsString.length === 0) {\n                    return \"\";\n                }\n                var sAsciiString = \"\";\n                for (var i = 0; i < sCodeAsString.length; i++) {\n                    sAsciiString += sCodeAsString.charCodeAt(i) + \",\";\n                }\n                if (\n                    sAsciiString !== null &&\n                    sAsciiString.length > 0 &&\n                    sAsciiString.charAt(sAsciiString.length - 1) === \",\"\n                ) {\n                    sAsciiString = sAsciiString.substring(0, sAsciiString.length - 1);\n                }\n                return sAsciiString;\n            },\n            /*\n             * Get the content of the sap-ui-cachebuster-info.json file\n             * to get the paths to the changes files\n             * and get their content\n             */\n            loadChanges: function () {\n                var oResult = {\n                    changes: [],\n                    settings: {\n                        isKeyUser: true,\n                        isAtoAvailable: false,\n                        isProductiveSystem: false\n                    }\n                };\n\n                //Get the content of the changes folder.\n                var aPromises = [];\n                var sCacheBusterFilePath = \"/sap-ui-cachebuster-info.json\";\n                return new Promise(function (resolve, reject) {\n                    $.ajax({\n                        url: sCacheBusterFilePath,\n                        type: \"GET\",\n                        cache: false\n                    })\n                        .then(function (oCachebusterContent) {\n                            //we are looking for only change files\n                            var aChangeFilesPaths = Object.keys(oCachebusterContent).filter(function (sPath) {\n                                return sPath.endsWith(\".change\");\n                            });\n                            $.each(aChangeFilesPaths, function (index, sFilePath) {\n                                //now as we support MTA projects we need to take only changes which are relevant for\n                                //the current HTML5 module\n                                //sap-ui-cachebuster-info.json for MTA doesn\"t start with \"webapp/changes\" but from <MTA-HTML5-MODULE-NAME>\n                                //possible change file path patterns\n                                //webapp/changes/<change-file>\n                                //<MTA-HTML5-MODULE-NAME>/webapp/changes/<change-file>\n                                if (sFilePath.indexOf(\"changes\") === 0) {\n                                    /*eslint-disable no-param-reassign*/\n                                    aPromises.push(\n                                        $.ajax({\n                                            url: \"/\" + sFilePath,\n                                            type: \"GET\",\n                                            cache: false\n                                        }).then(function (sChangeContent) {\n                                            return JSON.parse(sChangeContent);\n                                        })\n                                    );\n                                }\n                            });\n                        })\n                        .always(function () {\n                            return Promise.all(aPromises).then(function (aChanges) {\n                                return new Promise(function (resolveInner, rejectInner) {\n                                    // If no changes found, maybe because the app was executed without doing a build.\n                                    // Check for changes folder and load the changes, if any.\n                                    if (aChanges.length === 0) {\n                                        $.ajax({\n                                            url: \"/changes/\",\n                                            type: \"GET\",\n                                            cache: false\n                                        })\n                                            .then(function (sChangesFolderContent) {\n                                                var regex = /(\\/changes\\/[^\"]*\\.[a-zA-Z]*)/g;\n                                                var result = regex.exec(sChangesFolderContent);\n\n                                                while (result !== null) {\n                                                    aPromises.push(\n                                                        $.ajax({\n                                                            url: result[1],\n                                                            type: \"GET\",\n                                                            cache: false\n                                                        }).then(function (sChangeContent) {\n                                                            return JSON.parse(sChangeContent);\n                                                        })\n                                                    );\n                                                    result = regex.exec(sChangesFolderContent);\n                                                }\n                                                resolveInner(Promise.all(aPromises));\n                                            })\n                                            .fail(function (obj) {\n                                                // No changes folder, then just resolve\n                                                resolveInner(aChanges);\n                                            });\n                                    } else {\n                                        resolveInner(aChanges);\n                                    }\n                                }).then(function (aCheckChanges) {\n                                    var aChangePromises = [],\n                                        aProcessedChanges = [];\n                                    aCheckChanges.forEach(function (oChange) {\n                                        var sChangeType = oChange.changeType;\n                                        if (sChangeType === \"addXML\" || sChangeType === \"codeExt\") {\n                                            /*eslint-disable no-nested-ternary*/\n                                            var sPath =\n                                                sChangeType === \"addXML\"\n                                                    ? oChange.content.fragmentPath\n                                                    : sChangeType === \"codeExt\"\n                                                        ? oChange.content.codeRef\n                                                        : \"\";\n                                            var sWebappPath = sPath.match(/webapp(.*)/);\n                                            var sUrl = \"/\" + sWebappPath[0];\n                                            aChangePromises.push(\n                                                $.ajax({\n                                                    url: sUrl,\n                                                    type: \"GET\",\n                                                    cache: false\n                                                }).then(function (oFileDocument) {\n                                                    if (sChangeType === \"addXML\") {\n                                                        oChange.content.fragment = FakeLrepConnector.prototype.stringToAscii(\n                                                            oFileDocument.documentElement.outerHTML\n                                                        );\n                                                        oChange.content.selectedFragmentContent =\n                                                            oFileDocument.documentElement.outerHTML;\n                                                    } else if (sChangeType === \"codeExt\") {\n                                                        oChange.content.code = FakeLrepConnector.prototype.stringToAscii(\n                                                            oFileDocument\n                                                        );\n                                                        oChange.content.extensionControllerContent = oFileDocument;\n                                                    }\n                                                    return oChange;\n                                                })\n                                            );\n                                        } else {\n                                            aProcessedChanges.push(oChange);\n                                        }\n                                    });\n                                    // aChanges holds the content of all change files from the project (empty array if no such files)\n                                    // sort the array by the creation timestamp of the changes\n                                    if (aChangePromises.length > 0) {\n                                        return Promise.all(aChangePromises).then(function (aUpdatedChanges) {\n                                            aUpdatedChanges.forEach(function (oChange) {\n                                                aProcessedChanges.push(oChange);\n                                            });\n                                            aProcessedChanges.sort(function (change1, change2) {\n                                                return new Date(change1.creation) - new Date(change2.creation);\n                                            });\n                                            oResult.changes = aProcessedChanges;\n                                            var oLrepChange = {\n                                                changes: oResult,\n                                                componentClassName: \"Namespace1.myfioriapp\"\n                                            };\n                                            resolve(oLrepChange);\n                                        });\n                                    } else {\n                                        aProcessedChanges.sort(function (change1, change2) {\n                                            return new Date(change1.creation) - new Date(change2.creation);\n                                        });\n                                        oResult.changes = aProcessedChanges;\n                                        var oLrepChange = {\n                                            changes: oResult,\n                                            componentClassName: \"Namespace1.myfioriapp\"\n                                        };\n                                        resolve(oLrepChange);\n                                    }\n                                });\n                            });\n                        });\n                });\n            }\n        });\n        FakeLrepConnector.enableFakeConnector();\n    });\n}\n\n```",
  "excerpt": "changes_preview.js",
  "wordCount": 581,
  "version": "1.0.0",
  "source": "fiori-samples",
  "sourceType": "github"
}