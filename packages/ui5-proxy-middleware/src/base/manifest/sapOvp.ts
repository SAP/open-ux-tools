/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Represents the card default grid size in columns and rows
 */
export type SapOvpDefaultSpanDef =
    | {
          /**
           * Represents the number of the number of grid columns
           */
          cols: number;
          /**
           * Represents the number of the number of grid rows
           */
          rows: number;
          /**
           * Represents if user wants to show only header part of card in resizable layout
           */
          showOnlyHeader?: boolean;
          /**
           * If user wants to show more text in title then he/she can configure no of lines to be shown in title(Maximum allowed 3 lines)
           */
          minimumTitleRow?: number;
          /**
           * If user wants to show more text in title then he/she can configure no of lines to be shown in sub-title(Maximum allowed 2 lines)
           */
          minimumSubTitleRow?: number;
      }
    | 'auto';
/**
 * Plot area is a parent property which defines multiple other properties for smoothness and marker size
 */
export type SapOvpLevelsDef = any[];

/**
 * Represents OVP specific attributes
 */
export interface SapOvp {
    /**
     * Represents attributes format version. It is managed by namespace owner
     */
    _version?: '1.1.0' | '1.2.0' | '1.3.0';
    /**
     * Represents the name of global filter OData model, which  contains entities definition that are relevant for global filters
     */
    globalFilterModel?: string;
    /**
     * Represents the entity to use as global filter in the smart filter bar control
     */
    globalFilterEntityType?: string;
    /**
     * Represents the entity set to use as global filter in the smart filter bar control
     */
    globalFilterEntitySet?: string;
    /**
     * Represents a switch to include basic search in the global filters
     */
    showBasicSearch?: boolean;
    /**
     * Represents a switch to disable the error page shown on load of overview page when no data is retreived from the backend
     */
    disableErrorPage?: boolean;
    /**
     * Represents a switch to activate smart variant management in the global filters
     */
    smartVariantRequired?: boolean;
    /**
     * Represents a switch to show smart filter bar in expanded or collapsed mode
     */
    bHeaderExpanded?: boolean;
    /**
     * Represents the layout of the card container
     */
    containerLayout?: 'fixed' | 'resizable';
    /**
     * Represents a switch to Enable or disable Relative or Normal date formating in ovp application
     */
    showDateInRelativeFormat?: boolean;
    /**
     * Represents a switch to Enable or Disable the Flexibility of Table cards
     */
    disableTableCardFlexibility?: boolean;
    /**
     * Represents the switch to activate live update in the global filters, else manual update will be required
     */
    enableLiveFilter?: boolean;
    /**
     * Flag to enable/disable analytical parameter support for Smart filter bar
     */
    considerAnalyticalParameters?: boolean;
    /**
     * Time interval in minutes to auto refresh the card models
     */
    refreshIntervalInMinutes?: number;
    /**
     * Flag to enable/disable semantic date range control for Smart filter bar
     */
    useDateRangeType?: boolean;
    cards: {
        [k: string]: SapOvpCard;
    };
    resizableLayout?: {
        [k: string]: SapOvpResizableLayoutVariant;
    };
}
/**
 * Represents the card attributes
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9_\.\-]+$".
 */
export interface SapOvpCard {
    /**
     * Represents the position of the card in the sequence
     */
    sequencePos?: number;
    /**
     * Represents the model for the card
     */
    model?: string;
    /**
     * Represents the card component path to use for this card
     */
    template: string;
    settings?: CardSetting;
    /**
     * Represents the card with view switch control
     */
    tabs?: [SapOvpTabSetting, ...SapOvpTabSetting[]];
}
/**
 * Represents the card specific properties - properties that are passed to the card
 */
export interface CardSetting {
    /**
     * Represents the category of the card- used in the card header
     */
    category?: string;
    /**
     * Represents the user defined string in placeholder card
     */
    itemText?: string;
    /**
     * Represents language-dependent title of the card - used in the card header
     */
    title: string;
    /**
     * Represents language-dependent subtitle of the card - used in the card header
     */
    subTitle?: string;
    /**
     * Represents things like people, number of items
     */
    valueSelectionInfo?: string;
    /**
     * Represents the entity set that will be displayed in this card
     */
    entitySet?: string;
    /**
     * Represents the static content that will be displayed in this card
     */
    staticContent?: {
        [k: string]: any;
    }[];
    /**
     * Represents the flavor of the list to use in this card. The flavor can be bar chart, carousel or standard
     */
    listFlavor?: 'standard' | 'bar' | 'carousel';
    /**
     * Represents the type of list to use for this card. The list can be extended to display more information or condensed to take up less space on the card
     */
    listType?: 'extended' | 'condensed';
    /**
     * Represents the sort key for the entity set
     */
    sortBy?: string;
    /**
     * Represents the sort order for the entity set
     */
    sortOrder?: 'ascending' | 'descending';
    /**
     * Represents the annotation path
     */
    annotationPath?: string;
    /**
     * Represents the selection annotation path
     */
    selectionAnnotationPath?: string;
    /**
     * Represents the chart annotation path
     */
    chartAnnotationPath?: string;
    /**
     * Represents the presentation annotation path
     */
    presentationAnnotationPath?: string;
    /**
     * Represents the data point annotation path
     */
    dataPointAnnotationPath?: string;
    /**
     * Represents the identification annotation path
     */
    identificationAnnotationPath?: string;
    /**
     * Represents the KPI annotation path
     */
    kpiAnnotationPath?: string;
    /**
     * Represents the selection presentation annotation path
     */
    selectionPresentationAnnotationPath?: string;
    /**
     * Represents the dynamic subtitle annotation path
     */
    dynamicSubtitleAnnotationPath?: string;
    /**
     * Represents the flag to indicate priority of number formatting over sap text
     */
    ignoreSapText?: boolean;
    defaultSpan?: SapOvpDefaultSpanDef;
    /**
     * Represents the cards for which authorization is required
     */
    requireAppAuthorization?: string;
    objectStreamCardsSettings?: ObjectStreamCardsSettingsDef;
    /**
     * Represents the flag to indicate the use of object number/smart field
     */
    enableLocaleCurrencyFormatting?: boolean;
    /**
     * Represents the configuration to alter the navigation mode in OVP Analytical Cards
     */
    navigation?: 'dataPointNav' | 'chartNav' | 'headerNav' | 'noHeaderNav';
    /**
     * Represents a switch to Show or Hide Filters in Cards Headers in OVP application
     */
    showFilterInHeader?: boolean;
    /**
     * Represents a switch to Show or Hide Sorting in Cards Headers in OVP application
     */
    showSortingInHeader?: boolean;
    /**
     * Flag for enabling images in a condensed list card
     */
    imageSupported?: boolean;
    /**
     * Flag for show line item detail in list and table card
     */
    showLineItemDetail?: boolean;
    /**
     * This property is responsible for showing and hiding text labels on the geo spots
     */
    showLabelText?: boolean;
    /**
     * This property is responsible for passing custom parameters present in the entity set to the navigating application
     */
    customParams?: string;
    /**
     * This property is responsible for setting specific chart settings
     */
    chartProperties?: {
        plotArea?: SapOvpPlotAreaDef;
        timeAxis?: SapOvpTimeAxisDef;
    };
    /**
     * Represents the configuration to customize the column stacked chart
     */
    colorPalette?:
        | {
              [k: string]: any;
          }[]
        | {
              [k: string]: any;
          };
    [k: string]: any;
}
/**
 * Represents the Object Stream properties - properties that are passed to the Object Stream cards
 */
export interface ObjectStreamCardsSettingsDef {
    /**
     * Represents the flag to show first action in footer of the Quickview cards
     */
    showFirstActionInFooter?: boolean;
    /**
     * Represents the custom actions in the Quick View Cards
     */
    customActions?: [CustomActionsSetting, ...CustomActionsSetting[]];
    [k: string]: any;
}
/**
 * Represents the properties for the custom actions in the Quick View Cards
 */
export interface CustomActionsSetting {
    /**
     * Text displayed for extended actions in Quick View
     */
    text?: string;
    /**
     * Name of the press handler for extended actions in Quick View
     */
    press?: string;
    /**
     * Position of extended actions in Quick View
     */
    position?: number;
    [k: string]: any;
}
/**
 * Plot area is a parent property which defines multiple other properties for smoothness and marker size
 */
export interface SapOvpPlotAreaDef {
    /**
     * Represents whether smoother curves are required or not
     */
    isSmoothed?: boolean;
    /**
     * Represents the size of the markers in scatter plots
     */
    markerSize?: number;
    /**
     * dataLabel is a parent property that defines other properties for type
     */
    dataLabel?: {
        /**
         * Defines whether to display percentage values or actual counts in the donut chart
         */
        type?: 'value' | 'percentage';
    };
}
/**
 * Represents the configuration to customize the time axis
 */
export interface SapOvpTimeAxisDef {
    levels?: SapOvpLevelsDef;
    [k: string]: any;
}
/**
 * Represents the tab specific properties - properties that are passed to a particular tab in a card
 */
export interface SapOvpTabSetting {
    /**
     * Represents the annotation path
     */
    annotationPath?: string;
    /**
     * Represents the selection annotation path
     */
    selectionAnnotationPath?: string;
    /**
     * Represents the chart annotation path
     */
    chartAnnotationPath?: string;
    /**
     * Represents the presentation annotation path
     */
    presentationAnnotationPath?: string;
    /**
     * Represents the data point annotation path
     */
    dataPointAnnotationPath?: string;
    /**
     * Represents the identification annotation path
     */
    identificationAnnotationPath?: string;
    /**
     * Represents the dynamic subtitle annotation path
     */
    dynamicSubtitleAnnotationPath?: string;
    /**
     * Represents the drop down value to be shown
     */
    value?: string;
    /**
     * This property is responsible for setting specific chart settings
     */
    chartProperties?: {
        plotArea?: SapOvpPlotAreaDef;
        timeAxis?: SapOvpTimeAxisDef;
    };
    /**
     * Represents the configuration to customize the column stacked chart
     */
    colorPalette?:
        | {
              [k: string]: any;
          }[]
        | {
              [k: string]: any;
          };
    [k: string]: any;
}
/**
 * Represents the resizable layout variant
 *
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "^cols_[0-9]+$".
 */
export interface SapOvpResizableLayoutVariant {
    [k: string]: SapOvpResizableLayoutVariantCardProperties;
}
/**
 * Represents the card properties is a layout variant
 *
 * This interface was referenced by `ResizableLayoutVariant`'s JSON-Schema definition
 * via the `patternProperty` "^[a-zA-Z0-9_\.\-]+$".
 */
export interface SapOvpResizableLayoutVariantCardProperties {
    /**
     * Represents the grid column
     */
    col: number;
    /**
     * Represents the grid row
     */
    row: number;
    /**
     * Represents the column span
     */
    colSpan: number;
    /**
     * Represents the row span
     */
    rowSpan: number;
    /**
     * Represents the visibility of the card
     */
    visible?: boolean;
}
